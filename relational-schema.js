/* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */

/* eslint-disable */

module.exports = {
    database: 'partly',
    schema: 'partly',
    connection: { host: '127.0.0.1', port: 5432, user: 'postgres' },
    generatedAt: '2021-05-01T04:27:55.377Z',
    tables: {
        analytics_categories: {
            primaryKey: {
                constraintName: 'analytics_categories_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'analytics_categories_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                {
                    constraintName: 'analytics_categories_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'analytics_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'analytics_categories_user_device_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_device_id'],
                },
                {
                    constraintName: 'analytics_categories_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_devices',
                    alias: 'user_device',
                    joins: [{ fromColumn: 'user_device_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                views: { dbType: 'int4', columnDefault: '0', nullable: true, columnName: 'views', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                graphql_views: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'graphql_views',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                user_device_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_device_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        analytics_products: {
            primaryKey: {
                constraintName: 'analytics_products_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'analytics_products_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'analytics_products_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'analytics_products_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'analytics_products_user_device_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_device_id'],
                },
                {
                    constraintName: 'analytics_products_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_devices',
                    alias: 'user_device',
                    joins: [{ fromColumn: 'user_device_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                views: { dbType: 'int4', columnDefault: '0', nullable: true, columnName: 'views', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                platform_type: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'platform_type',
                    tsType: 'number',
                },
                is_impression: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_impression',
                    tsType: 'boolean',
                },
                is_view: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_view',
                    tsType: 'boolean',
                },
                is_impression_view: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_impression_view',
                    tsType: 'boolean',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                graphql_views: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'graphql_views',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                user_device_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_device_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                context_page: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'context_page',
                    tsType: 'string',
                },
                context_payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'context_payload',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        analytics_searches: {
            primaryKey: {
                constraintName: 'analytics_searches_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'analytics_searches_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'analytics_searches_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'analytics_searches_user_device_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_device_id'],
                },
                {
                    constraintName: 'analytics_searches_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_devices',
                    alias: 'user_device',
                    joins: [{ fromColumn: 'user_device_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                views: { dbType: 'int4', columnDefault: '0', nullable: true, columnName: 'views', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                latest_result_count: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'latest_result_count',
                    tsType: 'number',
                },
                search_type: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'search_type',
                    tsType: 'number',
                },
                category_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'number',
                },
                store_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'number',
                },
                graphql_views: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'graphql_views',
                    tsType: 'number',
                },
                blacklisted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'blacklisted',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                search_term: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'search_term',
                    tsType: 'string',
                },
                user_device_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_device_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        analytics_stores: {
            primaryKey: { constraintName: 'analytics_stores_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'analytics_stores_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'analytics_stores_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'analytics_stores_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'analytics_stores_user_device_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_device_id'],
                },
                {
                    constraintName: 'analytics_stores_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_devices',
                    alias: 'user_device',
                    joins: [{ fromColumn: 'user_device_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                views: { dbType: 'int4', columnDefault: '0', nullable: true, columnName: 'views', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_device_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_device_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        analytics_users: {
            primaryKey: { constraintName: 'analytics_users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'analytics_users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'analytics_users_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                action_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'action_type',
                    tsType: 'number',
                },
                response_time: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'response_time',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                action: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'action',
                    tsType: 'string',
                },
                payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'payload',
                    tsType: 'string',
                },
                response_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'response_code',
                    tsType: 'string',
                },
                response_message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'response_message',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        api_access_keys: {
            primaryKey: { constraintName: 'api_access_keys_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'api_access_keys_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'api_access_keys_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'api_access_keys_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                secret: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'secret',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        carrier_service_inventory: {
            primaryKey: {
                constraintName: 'carrier_service_inventory_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'carrier_service_inventory_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'carrier_service_inventory_shipping_carrier_service_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['shipping_carrier_service_id'],
                },
                {
                    constraintName: 'carrier_service_inventory_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'shipping_carrier_services',
                    alias: 'shipping_carrier_service',
                    joins: [{ fromColumn: 'shipping_carrier_service_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                shipping_surcharge_percent: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_surcharge_percent',
                    tsType: 'number',
                },
                shipping_surcharge_cents: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_surcharge_cents',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                shipping_carrier_service_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'shipping_carrier_service_id',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        carts: {
            primaryKey: { constraintName: 'carts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'carts_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'carts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'carts_product_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['product_id'] },
                { constraintName: 'carts_store_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['store_id'] },
                { constraintName: 'carts_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                shipping_type: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_type',
                    tsType: 'number',
                },
                deleted_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deleted_at',
                    tsType: 'Date',
                },
                quantity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'quantity',
                    tsType: 'number',
                },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                class: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'class', tsType: 'number' },
                shipping_option: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'shipping_option',
                    tsType: 'number',
                },
                expires: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'expires',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                promo_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'promo_code',
                    tsType: 'string',
                },
            },
            softDelete: {
                dbType: 'timestamp',
                columnDefault: null,
                nullable: true,
                columnName: 'deleted_at',
                tsType: 'Date',
            },
            enums: {},
        },
        categories: {
            primaryKey: { constraintName: 'categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'categories_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'categories_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'categories_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                { constraintName: 'categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'categories_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_id'],
                },
                { constraintName: 'categories_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'categories_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'categories',
                    alias: 'parent',
                    joins: [{ fromColumn: 'parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'analytics_categories',
                    alias: 'analytics_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'categories',
                    alias: 'categories',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'category_keyword',
                    alias: 'category_keywords',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'category_product',
                    alias: 'category_products',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'i18n_categories',
                    alias: 'i18n_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_category',
                    alias: 'internal_tag_categorys',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tags',
                    alias: 'category_internal_tags',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tags',
                    alias: 'parent_category_internal_tags',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'related_categories',
                    alias: 'category_related_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'related_categories',
                    alias: 'related_category_related_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'related_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_categories',
                    alias: 'store_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                level: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'level', tsType: 'number' },
                is_leaf: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_leaf',
                    tsType: 'number',
                },
                value: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'value',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                quality: {
                    dbType: 'int4',
                    columnDefault: '10',
                    nullable: false,
                    columnName: 'quality',
                    tsType: 'number',
                },
                listing_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'listing_count',
                    tsType: 'number',
                },
                consumable_days: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'consumable_days',
                    tsType: 'number',
                },
                risk_level: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'risk_level',
                    tsType: 'number',
                },
                is_popular_used: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_popular_used',
                    tsType: 'boolean',
                },
                fitment_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fitment_type',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                icon: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'icon', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_id',
                    tsType: 'string',
                },
                type: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'type', tsType: 'string' },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                metadata_description_template: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'metadata_description_template',
                    tsType: 'string',
                },
                metadata_name_template: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'metadata_name_template',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        category_keyword: {
            primaryKey: { constraintName: 'category_keyword_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'category_keyword_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'category_keyword_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'category_keyword_keyword_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['keyword_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'keywords',
                    alias: 'keyword',
                    joins: [{ fromColumn: 'keyword_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                keyword_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'keyword_id',
                    tsType: 'string',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        category_product: {
            primaryKey: { constraintName: 'category_product_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'category_product_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'category_product_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'category_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                storefront_display: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'storefront_display',
                    tsType: 'boolean',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        category_suggestions: {
            primaryKey: {
                constraintName: 'category_suggestions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'category_suggestions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'category_suggestions_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                parent: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'parent',
                    tsType: 'number',
                },
                display: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'display',
                    tsType: 'boolean',
                },
                level: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'level', tsType: 'number' },
                class: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'class', tsType: 'number' },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                icon: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'icon', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        chat_sessions: {
            primaryKey: { constraintName: 'chat_sessions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'chat_sessions_conversation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['conversation_id'],
                },
                { constraintName: 'chat_sessions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'chat_sessions_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'conversations',
                    alias: 'conversation',
                    joins: [{ fromColumn: 'conversation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                session_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'session_id',
                    tsType: 'number',
                },
                state: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                open: { dbType: 'bool', columnDefault: 'true', nullable: false, columnName: 'open', tsType: 'boolean' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                conversation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'conversation_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        community_reports: {
            primaryKey: {
                constraintName: 'community_reports_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'community_reports_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'community_reports_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                display: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'display',
                    tsType: 'boolean',
                },
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                class: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'class', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                comment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'comment',
                    tsType: 'string',
                },
                item_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'item_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        concierge_site_pages: {
            primaryKey: {
                constraintName: 'concierge_site_pages_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'concierge_site_pages_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                {
                    constraintName: 'concierge_site_pages_concierge_site_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['concierge_site_id'],
                },
                {
                    constraintName: 'concierge_site_pages_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'concierge_site_pages_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'concierge_site_pages_gapc_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_position_id'],
                },
                {
                    constraintName: 'concierge_site_pages_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                { constraintName: 'concierge_site_pages_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'concierge_site_pages_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'concierge_sites',
                    alias: 'concierge_site',
                    joins: [{ fromColumn: 'concierge_site_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'gapc_position_',
                    joins: [{ fromColumn: 'gapc_position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_imports',
                    alias: 'external_api_imports',
                    joins: [{ fromColumn: 'id', toColumn: 'concierge_site_page_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                store_import_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_import_type',
                    tsType: 'number',
                },
                page: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'page', tsType: 'number' },
                price_multiplier: {
                    dbType: 'float8',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'price_multiplier',
                    tsType: 'number',
                },
                max_pages: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'max_pages',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                brand_new: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'brand_new',
                    tsType: 'boolean',
                },
                combined_shipping: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'combined_shipping',
                    tsType: 'boolean',
                },
                shipping_charge_once: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'shipping_charge_once',
                    tsType: 'boolean',
                },
                listing_type: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'listing_type',
                    tsType: 'number',
                },
                deleted_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deleted_at',
                    tsType: 'Date',
                },
                vehicle_year_min: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_year_min',
                    tsType: 'number',
                },
                vehicle_year_max: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_year_max',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                concierge_site_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'concierge_site_id',
                    tsType: 'string',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                url: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'url', tsType: 'string' },
                page_url_query: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'page_url_query',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                vehicle_make: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_make',
                    tsType: 'string',
                },
                vehicle_model: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_model',
                    tsType: 'string',
                },
                vehicle_submodel: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_submodel',
                    tsType: 'string',
                },
                vehicle_engine: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_engine',
                    tsType: 'string',
                },
                vehicle_trim: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_trim',
                    tsType: 'string',
                },
                part_category: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_category',
                    tsType: 'string',
                },
                part_subcategory: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_subcategory',
                    tsType: 'string',
                },
                part_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type',
                    tsType: 'string',
                },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                gapc_position: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_position',
                    tsType: 'string',
                },
                gapc_position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_position_id',
                    tsType: 'string',
                },
                cookie_value_1: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cookie_value_1',
                    tsType: 'string',
                },
                uvdb_base_vehicle_ids: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_ids',
                    tsType: 'string',
                },
                uvdb_engine_config_ids: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_config_ids',
                    tsType: 'string',
                },
                uvdb_submodel_ids: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_ids',
                    tsType: 'string',
                },
                uvdb_vehicle_config_ids: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_config_ids',
                    tsType: 'string',
                },
                vcdb_vehicle_ids: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_vehicle_ids',
                    tsType: 'string',
                },
            },
            softDelete: {
                dbType: 'timestamp',
                columnDefault: null,
                nullable: true,
                columnName: 'deleted_at',
                tsType: 'Date',
            },
            enums: {},
        },
        concierge_sites: {
            primaryKey: { constraintName: 'concierge_sites_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'concierge_sites_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'concierge_site_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                price_change: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'price_change',
                    tsType: 'number',
                },
                category_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                default_stock: {
                    dbType: 'int4',
                    columnDefault: '5',
                    nullable: false,
                    columnName: 'default_stock',
                    tsType: 'number',
                },
                always_force_sync: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'always_force_sync',
                    tsType: 'boolean',
                },
                filter_product_reviews_max_rating: {
                    dbType: 'int4',
                    columnDefault: '5',
                    nullable: false,
                    columnName: 'filter_product_reviews_max_rating',
                    tsType: 'number',
                },
                page_number_query_increment_value: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'page_number_query_increment_value',
                    tsType: 'number',
                },
                allow_duplicates: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'allow_duplicates',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                base_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'base_url',
                    tsType: 'string',
                },
                test_page_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'test_page_url',
                    tsType: 'string',
                },
                page_number_query: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'page_number_query',
                    tsType: 'string',
                },
                filter_browse_box: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_browse_box',
                    tsType: 'string',
                },
                filter_browse_link: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_browse_link',
                    tsType: 'string',
                },
                filter_browse_stock: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_browse_stock',
                    tsType: 'string',
                },
                filter_browse_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_browse_name',
                    tsType: 'string',
                },
                filter_browse_price: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_browse_price',
                    tsType: 'string',
                },
                filter_browse_display_price: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_browse_display_price',
                    tsType: 'string',
                },
                filter_product_description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_product_description',
                    tsType: 'string',
                },
                filter_product_images: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'filter_product_images',
                    tsType: 'string',
                },
                filter_product_properties: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_properties',
                    tsType: 'string',
                },
                filter_product_properties_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_properties_name',
                    tsType: 'string',
                },
                filter_product_properties_value: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_properties_value',
                    tsType: 'string',
                },
                filter_product_reviews: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_reviews',
                    tsType: 'string',
                },
                filter_product_reviews_title: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_reviews_title',
                    tsType: 'string',
                },
                filter_product_reviews_username: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_reviews_username',
                    tsType: 'string',
                },
                filter_product_reviews_date: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_reviews_date',
                    tsType: 'string',
                },
                filter_product_reviews_rating: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_reviews_rating',
                    tsType: 'string',
                },
                filter_product_reviews_text: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_reviews_text',
                    tsType: 'string',
                },
                filter_product_gtin14: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_gtin14',
                    tsType: 'string',
                },
                filter_product_mpn: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_mpn',
                    tsType: 'string',
                },
                filter_product_brand: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_brand',
                    tsType: 'string',
                },
                filter_product_model: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_model',
                    tsType: 'string',
                },
                filter_product_stock: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_stock',
                    tsType: 'string',
                },
                description_regex: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description_regex',
                    tsType: 'string',
                },
                filter_browse_stock_custom: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_browse_stock_custom',
                    tsType: 'string',
                },
                page_number_query_custom_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'page_number_query_custom_url',
                    tsType: 'string',
                },
                filter_product_location: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_location',
                    tsType: 'string',
                },
                filter_product_seller: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_seller',
                    tsType: 'string',
                },
                filter_product_condition: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_condition',
                    tsType: 'string',
                },
                vehicle_selector_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_selector_type',
                    tsType: 'string',
                },
                filter_vehicle_selector_makes: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_vehicle_selector_makes',
                    tsType: 'string',
                },
                filter_vehicle_selector_models: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_vehicle_selector_models',
                    tsType: 'string',
                },
                filter_vehicle_selector_years: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_vehicle_selector_years',
                    tsType: 'string',
                },
                filter_vehicle_selector_series: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_vehicle_selector_series',
                    tsType: 'string',
                },
                filter_vehicle_selector_engines: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_vehicle_selector_engines',
                    tsType: 'string',
                },
                filter_vehicle_selector_submodels: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_vehicle_selector_submodels',
                    tsType: 'string',
                },
                filter_part_category: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_part_category',
                    tsType: 'string',
                },
                filter_part_subcategory: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_part_subcategory',
                    tsType: 'string',
                },
                filter_part_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_part_type',
                    tsType: 'string',
                },
                filter_fitment_notes: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_fitment_notes',
                    tsType: 'string',
                },
                filter_product_sku: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_product_sku',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        conversation_guest_user: {
            primaryKey: {
                constraintName: 'conversation_guest_user_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'conversation_guest_user_conversation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['conversation_id'],
                },
                {
                    constraintName: 'conversation_guest_user_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'conversation_guest_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'conversations',
                    alias: 'conversation',
                    joins: [{ fromColumn: 'conversation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                last_read: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'last_read',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                conversation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'conversation_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        conversation_user: {
            primaryKey: {
                constraintName: 'conversation_user_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'conversation_user_conversation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['conversation_id'],
                },
                { constraintName: 'conversation_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'conversation_user_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'conversations',
                    alias: 'conversation',
                    joins: [{ fromColumn: 'conversation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                last_read: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'last_read',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                conversation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'conversation_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        conversations: {
            primaryKey: { constraintName: 'conversations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'conversations_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'conversations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'conversations_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'chat_sessions',
                    alias: 'chat_sessions',
                    joins: [{ fromColumn: 'id', toColumn: 'conversation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'conversation_guest_user',
                    alias: 'conversation_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'conversation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'conversation_user',
                    alias: 'conversation_users',
                    joins: [{ fromColumn: 'id', toColumn: 'conversation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'messages',
                    alias: 'messages',
                    joins: [{ fromColumn: 'id', toColumn: 'conversation_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                app_notification_sent: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'app_notification_sent',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        countries: {
            primaryKey: { constraintName: 'countries_pkey', constraintType: 'PRIMARY KEY', columnNames: ['num_code'] },
            keys: [
                {
                    constraintName: 'countries_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                { constraintName: 'countries_pkey', constraintType: 'PRIMARY KEY', columnNames: ['num_code'] },
            ],
            uniqueKeyCombinations: [['num_code']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_i18n_countries',
                    alias: 'gapc_i18n_countries',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_users',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_addresses',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipping_rules',
                    alias: 'store_shipping_rules',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'user_addresses',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'users',
                    alias: 'users',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_i18n_countries',
                    alias: 'uvdb_i18n_countries',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'num_code', toColumn: 'country_code' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                num_code: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'num_code',
                    tsType: 'number',
                },
                is_imperial: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_imperial',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                alpha_2_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'alpha_2_code',
                    tsType: 'string',
                },
                alpha_3_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'alpha_3_code',
                    tsType: 'string',
                },
                en_short_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'en_short_name',
                    tsType: 'string',
                },
                nationality: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'nationality',
                    tsType: 'string',
                },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        currencies: {
            primaryKey: { constraintName: 'currencies_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'currencies_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'currencies_latest_exchange_rate_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['latest_exchange_rate_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'currency_exchange_rates',
                    alias: 'latest_exchange_rate',
                    joins: [{ fromColumn: 'latest_exchange_rate_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'countries',
                    alias: 'countries',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'currency_exchange_rates',
                    alias: 'base_currency_currency_exchange_rates',
                    joins: [{ fromColumn: 'id', toColumn: 'base_currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'currency_exchange_rates',
                    alias: 'currency_currency_exchange_rates',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'orders',
                    alias: 'orders',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_vouchers',
                    alias: 'user_vouchers',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'users',
                    alias: 'users',
                    joins: [{ fromColumn: 'id', toColumn: 'currency_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                currency_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_name',
                    tsType: 'string',
                },
                currency_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_code',
                    tsType: 'string',
                },
                currency_symbol: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_symbol',
                    tsType: 'string',
                },
                latest_exchange_rate_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'latest_exchange_rate_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        currency_exchange_rates: {
            primaryKey: {
                constraintName: 'currency_exchange_rates_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'currency_exchange_rates_base_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['base_currency_id'],
                },
                {
                    constraintName: 'currency_exchange_rates_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                { constraintName: 'currency_exchange_rates_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'currencies',
                    alias: 'base_currency',
                    joins: [{ fromColumn: 'base_currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'currencies',
                    alias: 'currencies',
                    joins: [{ fromColumn: 'id', toColumn: 'latest_exchange_rate_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                rate: { dbType: 'numeric', columnDefault: null, nullable: false, columnName: 'rate', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                base_currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'base_currency_id',
                    tsType: 'string',
                },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        data_changelogs: {
            primaryKey: { constraintName: 'data_changelogs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'data_changelogs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'data_changelogs_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'data_changelogs_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'data_migrations',
                    alias: 'data_migrations',
                    joins: [{ fromColumn: 'id', toColumn: 'data_changelog_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        data_gapc_part_type_links: {
            primaryKey: {
                constraintName: 'data_gapc_part_type_links_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'data_gapc_part_type_links_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                id: {
                    dbType: 'int8',
                    columnDefault: "nextval('data_gapc_part_type_links_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'id',
                    tsType: 'number',
                },
                part_type_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_id',
                    tsType: 'number',
                },
                score: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'score', tsType: 'number' },
                hop_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop_count',
                    tsType: 'number',
                },
                hop1_score: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop1_score',
                    tsType: 'number',
                },
                hop2_score: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop2_score',
                    tsType: 'number',
                },
                hop3_score: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop3_score',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                hop1_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop1_name',
                    tsType: 'string',
                },
                hop2_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop2_name',
                    tsType: 'string',
                },
                hop3_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'hop3_name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        data_migrations: {
            primaryKey: { constraintName: 'data_migrations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'data_migrations_data_changelog_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['data_changelog_id'],
                },
                { constraintName: 'data_migrations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'data_changelogs',
                    alias: 'data_changelog',
                    joins: [{ fromColumn: 'data_changelog_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                data_source: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'data_source',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                data_changelog_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'data_changelog_id',
                    tsType: 'string',
                },
                table_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'table_name',
                    tsType: 'string',
                },
                column_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'column_name',
                    tsType: 'string',
                },
                action: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'action',
                    tsType: 'string',
                },
                primary_key_column_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'primary_key_column_name',
                    tsType: 'string',
                },
                primary_key_before: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'primary_key_before',
                    tsType: 'string',
                },
                primary_key_after: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'primary_key_after',
                    tsType: 'string',
                },
                column_value_before: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'column_value_before',
                    tsType: 'string',
                },
                column_value_after: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'column_value_after',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        data_products_to_gapc_parts: {
            primaryKey: {
                constraintName: 'data_products_to_gapc_parts_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'data_products_to_gapc_parts_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                {
                    constraintName: 'data_products_to_gapc_parts_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'data_products_to_gapc_parts_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                score: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'score',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                part_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_number',
                    tsType: 'string',
                },
                brand_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brand_name',
                    tsType: 'string',
                },
                barcode: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'barcode',
                    tsType: 'string',
                },
                gapc_part_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        days_in_week: {
            primaryKey: { constraintName: 'days_in_week_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'days_in_week_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'store_address_days_in_week',
                    alias: 'store_address_days_in_weeks',
                    joins: [{ fromColumn: 'id', toColumn: 'days_in_week_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_online_days_in_week',
                    alias: 'store_online_days_in_weeks',
                    joins: [{ fromColumn: 'id', toColumn: 'days_in_week_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        elastic_migrations: {
            primaryKey: {
                constraintName: 'elastic_migrations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'elastic_migrations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                batch: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'batch', tsType: 'number' },
                id: {
                    dbType: 'int8',
                    columnDefault: "nextval('elastic_migrations_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'id',
                    tsType: 'number',
                },
                migration: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'migration',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        email_domain_blacklist: {
            primaryKey: {
                constraintName: 'email_domain_blacklist_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'email_domain_blacklist_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'email_domain_blacklist_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                domain: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'domain',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                note: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'note', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        email_notification_history: {
            primaryKey: {
                constraintName: 'email_notification_history_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'email_notification_history_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'email_notification_history_listing_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['listing_id'],
                },
                {
                    constraintName: 'email_notification_history_to_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['to'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'listing',
                    joins: [{ fromColumn: 'listing_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                { toTable: 'users', alias: 'to_', joins: [{ fromColumn: 'to', toColumn: 'id' }], type: 'belongsTo' },
            ],
            columns: {
                seen: { dbType: 'bool', columnDefault: null, nullable: true, columnName: 'seen', tsType: 'boolean' },
                action: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'action', tsType: 'number' },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                to: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'to', tsType: 'string' },
                email: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'email', tsType: 'string' },
                template: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'template',
                    tsType: 'string',
                },
                listing_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'listing_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        external_api_implementations: {
            primaryKey: {
                constraintName: 'external_api_implementations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'external_api_implementations_external_api_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['external_api_id'],
                },
                {
                    constraintName: 'external_api_implementations_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'external_api_implementations_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'external_api_implementations_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'external_apis',
                    alias: 'external_api',
                    joins: [{ fromColumn: 'external_api_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_imports',
                    alias: 'external_api_imports',
                    joins: [{ fromColumn: 'id', toColumn: 'external_api_implementation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_settings_implementation',
                    alias: 'external_api_settings_implementations',
                    joins: [{ fromColumn: 'id', toColumn: 'implementation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'orders',
                    alias: 'orders',
                    joins: [{ fromColumn: 'id', toColumn: 'external_api_implementation_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                enabled: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'enabled',
                    tsType: 'boolean',
                },
                key_datetime1: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'key_datetime1',
                    tsType: 'Date',
                },
                key_datetime2: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'key_datetime2',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                shop_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shop_url',
                    tsType: 'string',
                },
                key: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'key', tsType: 'string' },
                key2: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'key2', tsType: 'string' },
                key3: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'key3', tsType: 'string' },
                key_large: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'key_large',
                    tsType: 'string',
                },
                external_api_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_api_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                name_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'name_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        external_api_imports: {
            primaryKey: {
                constraintName: 'external_api_imports_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'external_api_imports_api_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['api_id'],
                },
                {
                    constraintName: 'external_api_imports_concierge_site_page_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['concierge_site_page_id'],
                },
                {
                    constraintName: 'external_api_imports_external_api_implementation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['external_api_implementation_id'],
                },
                { constraintName: 'external_api_imports_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'external_api_imports_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'external_api_imports_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'external_api_imports_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'external_apis',
                    alias: 'api',
                    joins: [{ fromColumn: 'api_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_page',
                    joins: [{ fromColumn: 'concierge_site_page_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_implementations',
                    alias: 'external_api_implementation',
                    joins: [{ fromColumn: 'external_api_implementation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                success: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'success',
                    tsType: 'boolean',
                },
                external_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'number',
                },
                external_variant_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_variant_id',
                    tsType: 'number',
                },
                stock_updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stock_updated_at',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                external_inventory_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_inventory_id',
                    tsType: 'number',
                },
                update_state: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'update_state',
                    tsType: 'number',
                },
                source_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'source_type',
                    tsType: 'number',
                },
                source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'source_id',
                    tsType: 'number',
                },
                force_update: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'force_update',
                    tsType: 'boolean',
                },
                price_cost: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_cost',
                    tsType: 'number',
                },
                price_ratio: {
                    dbType: 'float8',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'price_ratio',
                    tsType: 'number',
                },
                status: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'status', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                api_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'api_id',
                    tsType: 'string',
                },
                external_uuid: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_uuid',
                    tsType: 'string',
                },
                response: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'response',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                external_inventory_uuid: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_inventory_uuid',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                custom_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'custom_url',
                    tsType: 'string',
                },
                source_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'source_url',
                    tsType: 'string',
                },
                source_alias: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'source_alias',
                    tsType: 'string',
                },
                external_api_implementation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_api_implementation_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                concierge_site_page_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'concierge_site_page_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        external_api_settings: {
            primaryKey: {
                constraintName: 'external_api_settings_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'external_api_settings_external_api_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['external_api_id'],
                },
                { constraintName: 'external_api_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'external_apis',
                    alias: 'external_api',
                    joins: [{ fromColumn: 'external_api_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_settings_implementation',
                    alias: 'external_api_settings_implementations',
                    joins: [{ fromColumn: 'id', toColumn: 'setting_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_settings_options',
                    alias: 'external_api_settings_options',
                    joins: [{ fromColumn: 'id', toColumn: 'setting_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                class: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'class', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                external_api_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'external_api_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        external_api_settings_implementation: {
            primaryKey: {
                constraintName: 'external_api_settings_implementation_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'external_api_settings_implementation_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'external_api_settings_implementation_implementation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['implementation_id'],
                },
                {
                    constraintName: 'external_api_settings_implementation_option_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['option_id'],
                },
                {
                    constraintName: 'external_api_settings_implementation_setting_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['setting_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'external_api_implementations',
                    alias: 'implementation',
                    joins: [{ fromColumn: 'implementation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_settings_options',
                    alias: 'option',
                    joins: [{ fromColumn: 'option_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_settings',
                    alias: 'setting',
                    joins: [{ fromColumn: 'setting_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                setting_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'setting_id',
                    tsType: 'string',
                },
                implementation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'implementation_id',
                    tsType: 'string',
                },
                option_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'option_id',
                    tsType: 'string',
                },
                value: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'value', tsType: 'string' },
                type: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'type', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        external_api_settings_options: {
            primaryKey: {
                constraintName: 'external_api_settings_options_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'external_api_settings_options_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'external_api_settings_options_setting_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['setting_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'external_api_settings',
                    alias: 'setting',
                    joins: [{ fromColumn: 'setting_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_settings_implementation',
                    alias: 'external_api_settings_implementations',
                    joins: [{ fromColumn: 'id', toColumn: 'option_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                setting_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'setting_id',
                    tsType: 'string',
                },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        external_apis: {
            primaryKey: { constraintName: 'external_apis_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'external_apis_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'external_api_implementations',
                    alias: 'external_api_implementations',
                    joins: [{ fromColumn: 'id', toColumn: 'external_api_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_imports',
                    alias: 'external_api_imports',
                    joins: [{ fromColumn: 'id', toColumn: 'api_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_settings',
                    alias: 'external_api_settings',
                    joins: [{ fromColumn: 'id', toColumn: 'external_api_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                category: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'category',
                    tsType: 'number',
                },
                class: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'class', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                url: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'url', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                key: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'key', tsType: 'string' },
                key2: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'key2', tsType: 'string' },
                key3: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'key3', tsType: 'string' },
                key4: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'key4', tsType: 'string' },
                logo_large: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'logo_large',
                    tsType: 'string',
                },
                logo_small: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'logo_small',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                rules: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'rules', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        failed_jobs: {
            primaryKey: { constraintName: 'failed_jobs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'failed_jobs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                id: {
                    dbType: 'int8',
                    columnDefault: "nextval('failed_jobs_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'id',
                    tsType: 'number',
                },
                failed_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: false,
                    columnName: 'failed_at',
                    tsType: 'Date',
                },
                connection: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'connection',
                    tsType: 'string',
                },
                queue: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'queue', tsType: 'string' },
                payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'payload',
                    tsType: 'string',
                },
                exception: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'exception',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        federated_search_terms: {
            primaryKey: {
                constraintName: 'federated_search_terms_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'federated_search_terms_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                secondhand: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'secondhand',
                    tsType: 'boolean',
                },
                popularity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'popularity',
                    tsType: 'number',
                },
                product_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'number',
                },
                category_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'number',
                },
                store_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'number',
                },
                manual_edit_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'manual_edit_count',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                blacklisted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'blacklisted',
                    tsType: 'boolean',
                },
                analytics_search_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'analytics_search_id',
                    tsType: 'number',
                },
                keyword_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'keyword_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                full_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'full_name',
                    tsType: 'string',
                },
                image_thumb: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'image_thumb',
                    tsType: 'string',
                },
                category_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_type',
                    tsType: 'string',
                },
                search_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'search_type',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        file_import_feeds: {
            primaryKey: {
                constraintName: 'file_import_feeds_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'file_import_feeds_gapc_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_brand_id'],
                },
                { constraintName: 'file_import_feeds_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'file_import_feeds_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
                {
                    constraintName: 'file_import_feeds_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'file_import_feeds_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_brands',
                    alias: 'gapc_brand',
                    joins: [{ fromColumn: 'gapc_brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'import_logs',
                    alias: 'import_logs',
                    joins: [{ fromColumn: 'id', toColumn: 'file_import_feed_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                process_period_s: {
                    dbType: 'int4',
                    columnDefault: '86400',
                    nullable: false,
                    columnName: 'process_period_s',
                    tsType: 'number',
                },
                import_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_type',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                last_processed_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'last_processed_at',
                    tsType: 'Date',
                },
                percent_complete: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'percent_complete',
                    tsType: 'number',
                },
                count_items_success: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'count_items_success',
                    tsType: 'number',
                },
                count_items_error: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'count_items_error',
                    tsType: 'number',
                },
                count_items_total: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'count_items_total',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                file_path: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'file_path',
                    tsType: 'string',
                },
                settings: {
                    dbType: 'text',
                    columnDefault: "'{}'::text",
                    nullable: true,
                    columnName: 'settings',
                    tsType: 'string',
                },
                transformer: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transformer',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                gapc_brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_brand_id',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                transformer_alias: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transformer_alias',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_attribute_options: {
            primaryKey: {
                constraintName: 'gapc_attribute_options_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_attribute_options_gapc_attribute_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_attribute_id'],
                },
                { constraintName: 'gapc_attribute_options_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_attributes',
                    alias: 'gapc_attribute',
                    joins: [{ fromColumn: 'gapc_attribute_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_attribute_values',
                    alias: 'gapc_attribute_values',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_attribute_option_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                position: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'position',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                gapc_attribute_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_attribute_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_attribute_values: {
            primaryKey: {
                constraintName: 'gapc_attribute_values_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_attribute_values_gapc_attribute_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_attribute_id'],
                },
                {
                    constraintName: 'gapc_attribute_values_gapc_attribute_option_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_attribute_option_id'],
                },
                {
                    constraintName: 'gapc_attribute_values_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                {
                    constraintName: 'gapc_attribute_values_gapc_uom_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_uom_id'],
                },
                { constraintName: 'gapc_attribute_values_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_attributes',
                    alias: 'gapc_attribute',
                    joins: [{ fromColumn: 'gapc_attribute_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_attribute_options',
                    alias: 'gapc_attribute_option',
                    joins: [{ fromColumn: 'gapc_attribute_option_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_uoms',
                    alias: 'gapc_uom',
                    joins: [{ fromColumn: 'gapc_uom_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                is_draft: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_draft',
                    tsType: 'boolean',
                },
                boolean_value: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'boolean_value',
                    tsType: 'boolean',
                },
                numeric_value: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'numeric_value',
                    tsType: 'number',
                },
                numeric_min_value: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'numeric_min_value',
                    tsType: 'number',
                },
                numeric_max_value: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'numeric_max_value',
                    tsType: 'number',
                },
                date_value: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'date_value',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_attribute_option_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_attribute_option_id',
                    tsType: 'string',
                },
                gapc_uom_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_uom_id',
                    tsType: 'string',
                },
                gapc_attribute_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_attribute_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_attributes: {
            primaryKey: { constraintName: 'gapc_attributes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'gapc_attributes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_attribute_options',
                    alias: 'gapc_attribute_options',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_attribute_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_attribute_values',
                    alias: 'gapc_attribute_values',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_attribute_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_type_gapc_attributes',
                    alias: 'gapc_part_type_gapc_attributes',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_attribute_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                padb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'padb_id',
                    tsType: 'number',
                },
                min_length: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'min_length',
                    tsType: 'number',
                },
                max_length: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'max_length',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                data_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'data_type',
                    tsType: 'string',
                },
                meta_format: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'meta_format',
                    tsType: 'string',
                },
                meta_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'meta_type',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_brands: {
            primaryKey: { constraintName: 'gapc_brands_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_brands_approved_by_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['approved_by_user_id'],
                },
                { constraintName: 'gapc_brands_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_brands_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_id'],
                },
                { constraintName: 'gapc_brands_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'approved_by_user',
                    joins: [{ fromColumn: 'approved_by_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'parent',
                    joins: [{ fromColumn: 'parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'file_import_feeds',
                    alias: 'file_import_feeds',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_brand_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'gapc_brands',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'brand_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'brand_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_tyres',
                    alias: 'gapc_tyres',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_brand_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_wheels',
                    alias: 'gapc_wheels',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_brand_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_audit_data',
                    alias: 'product_audit_datas',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_brand_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_brand_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                is_oem: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_oem',
                    tsType: 'boolean',
                },
                is_oes: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_oes',
                    tsType: 'boolean',
                },
                is_manufacturer: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_manufacturer',
                    tsType: 'boolean',
                },
                is_alias: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_alias',
                    tsType: 'boolean',
                },
                revision_date: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'revision_date',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                is_aaia: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'is_aaia',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_id',
                    tsType: 'string',
                },
                aaia_brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aaia_brand_id',
                    tsType: 'string',
                },
                line_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'line_name',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                aaia_brand_owner_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aaia_brand_owner_id',
                    tsType: 'string',
                },
                brandowner: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brandowner',
                    tsType: 'string',
                },
                parentid: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parentid',
                    tsType: 'string',
                },
                parent_company_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_company_name',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                approved_by_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'approved_by_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_categories: {
            primaryKey: { constraintName: 'gapc_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'gapc_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_categories_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'categories',
                    alias: 'categories',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_codes',
                    alias: 'gapc_part_codes',
                    joins: [{ fromColumn: 'id', toColumn: 'category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_audit_data',
                    alias: 'product_audit_datas',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_specialities',
                    alias: 'store_specialities',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_diagrams',
                    alias: 'uvdb_diagrams',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_category_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                pcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'pcdb_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_config_fitments: {
            primaryKey: {
                constraintName: 'gapc_config_fitments_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_config_fitments_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'gapc_config_fitments_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_config_fitments_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_aspiration_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_base_vehicle_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_length_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_num_doors_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_abs_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_system_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_cylinder_head_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_drive_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_base_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_designation_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_mfr_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_version_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_vin_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_brake_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_spring_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_control_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_design_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_ignition_system_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_mfr_body_code_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_model_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_origin_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_origin_region_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_brake_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_spring_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_restriction1_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_restriction1_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_restriction2_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_restriction2_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_restriction3_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_restriction3_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_series_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_series_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_steering_side_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_side_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_system_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_submodel_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_base_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_control_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_elec_control_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_elec_control_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_code_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_num_speeds_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_type_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_valves_id'],
                },
                {
                    constraintName: 'gapc_config_fitments_uvdb_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'uvdb_aspiration',
                    joins: [{ fromColumn: 'uvdb_aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicle',
                    joins: [{ fromColumn: 'uvdb_base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'uvdb_bed_length',
                    joins: [{ fromColumn: 'uvdb_bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'uvdb_bed_type',
                    joins: [{ fromColumn: 'uvdb_bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'uvdb_body_num_doors',
                    joins: [{ fromColumn: 'uvdb_body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'uvdb_body_type',
                    joins: [{ fromColumn: 'uvdb_body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'uvdb_brake_abs',
                    joins: [{ fromColumn: 'uvdb_brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'uvdb_brake_system',
                    joins: [{ fromColumn: 'uvdb_brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'uvdb_cylinder_head_type',
                    joins: [{ fromColumn: 'uvdb_cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'uvdb_drive_type',
                    joins: [{ fromColumn: 'uvdb_drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'uvdb_engine_base',
                    joins: [{ fromColumn: 'uvdb_engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'uvdb_engine_designation',
                    joins: [{ fromColumn: 'uvdb_engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_engine_mfr',
                    joins: [{ fromColumn: 'uvdb_engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'uvdb_engine_version',
                    joins: [{ fromColumn: 'uvdb_engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'uvdb_engine_vin',
                    joins: [{ fromColumn: 'uvdb_engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_front_brake_type',
                    joins: [{ fromColumn: 'uvdb_front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_front_spring_type',
                    joins: [{ fromColumn: 'uvdb_front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'uvdb_fuel_delivery_subtype',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'uvdb_fuel_delivery_type',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'uvdb_fuel_system_control_type',
                    joins: [{ fromColumn: 'uvdb_fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'uvdb_fuel_system_design',
                    joins: [{ fromColumn: 'uvdb_fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'uvdb_fuel_type',
                    joins: [{ fromColumn: 'uvdb_fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'uvdb_ignition_system_type',
                    joins: [{ fromColumn: 'uvdb_ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'uvdb_mfr_body_code',
                    joins: [{ fromColumn: 'uvdb_mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_model',
                    joins: [{ fromColumn: 'uvdb_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'uvdb_origin_region',
                    joins: [{ fromColumn: 'uvdb_origin_region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_rear_brake_type',
                    joins: [{ fromColumn: 'uvdb_rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_rear_spring_type',
                    joins: [{ fromColumn: 'uvdb_rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'uvdb_restriction1',
                    joins: [{ fromColumn: 'uvdb_restriction1_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'uvdb_restriction2',
                    joins: [{ fromColumn: 'uvdb_restriction2_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'uvdb_restriction3',
                    joins: [{ fromColumn: 'uvdb_restriction3_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'uvdb_series',
                    joins: [{ fromColumn: 'uvdb_series_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_sides',
                    alias: 'uvdb_steering_side',
                    joins: [{ fromColumn: 'uvdb_steering_side_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'uvdb_steering_system',
                    joins: [{ fromColumn: 'uvdb_steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'uvdb_steering_type',
                    joins: [{ fromColumn: 'uvdb_steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodel',
                    joins: [{ fromColumn: 'uvdb_submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_base',
                    joins: [{ fromColumn: 'uvdb_transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'uvdb_transmission_control_type',
                    joins: [{ fromColumn: 'uvdb_transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'uvdb_transmission_elec_control',
                    joins: [{ fromColumn: 'uvdb_transmission_elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmission',
                    joins: [{ fromColumn: 'uvdb_transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'uvdb_transmission_mfr_code',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_transmission_mfr',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'uvdb_transmission_num_speeds',
                    joins: [{ fromColumn: 'uvdb_transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'uvdb_transmission_type',
                    joins: [{ fromColumn: 'uvdb_transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'uvdb_valves',
                    joins: [{ fromColumn: 'uvdb_valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'uvdb_wheel_base',
                    joins: [{ fromColumn: 'uvdb_wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                uvdb_from_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_from_year_id',
                    tsType: 'number',
                },
                uvdb_from_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_from_month_id',
                    tsType: 'number',
                },
                uvdb_to_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_to_year_id',
                    tsType: 'number',
                },
                uvdb_to_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_to_month_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
                uvdb_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_model_id',
                    tsType: 'string',
                },
                uvdb_base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_id',
                    tsType: 'string',
                },
                uvdb_submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_id',
                    tsType: 'string',
                },
                uvdb_aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_aspiration_id',
                    tsType: 'string',
                },
                uvdb_engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_designation_id',
                    tsType: 'string',
                },
                uvdb_engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_mfr_id',
                    tsType: 'string',
                },
                uvdb_engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_vin_id',
                    tsType: 'string',
                },
                uvdb_engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_version_id',
                    tsType: 'string',
                },
                uvdb_valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_valves_id',
                    tsType: 'string',
                },
                uvdb_engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_base_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_control_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_design_id',
                    tsType: 'string',
                },
                uvdb_ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_ignition_system_type_id',
                    tsType: 'string',
                },
                uvdb_cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_cylinder_head_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_type_id',
                    tsType: 'string',
                },
                uvdb_drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_drive_type_id',
                    tsType: 'string',
                },
                uvdb_mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_mfr_body_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_control_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_id',
                    tsType: 'string',
                },
                uvdb_transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_num_speeds_id',
                    tsType: 'string',
                },
                uvdb_transmission_elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_elec_control_id',
                    tsType: 'string',
                },
                uvdb_transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_id',
                    tsType: 'string',
                },
                uvdb_transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_base_id',
                    tsType: 'string',
                },
                uvdb_front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_spring_type_id',
                    tsType: 'string',
                },
                uvdb_rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_spring_type_id',
                    tsType: 'string',
                },
                uvdb_steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_system_id',
                    tsType: 'string',
                },
                uvdb_steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_type_id',
                    tsType: 'string',
                },
                uvdb_front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_brake_type_id',
                    tsType: 'string',
                },
                uvdb_rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_brake_type_id',
                    tsType: 'string',
                },
                uvdb_brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_abs_id',
                    tsType: 'string',
                },
                uvdb_brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_system_id',
                    tsType: 'string',
                },
                uvdb_body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_type_id',
                    tsType: 'string',
                },
                uvdb_body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_num_doors_id',
                    tsType: 'string',
                },
                uvdb_bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_length_id',
                    tsType: 'string',
                },
                uvdb_bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_type_id',
                    tsType: 'string',
                },
                uvdb_wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_wheel_base_id',
                    tsType: 'string',
                },
                uvdb_steering_side_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_side_id',
                    tsType: 'string',
                },
                uvdb_series_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_series_id',
                    tsType: 'string',
                },
                uvdb_origin_region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_origin_region_id',
                    tsType: 'string',
                },
                uvdb_restriction1_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction1_id',
                    tsType: 'string',
                },
                uvdb_restriction2_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction2_id',
                    tsType: 'string',
                },
                uvdb_restriction3_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction3_id',
                    tsType: 'string',
                },
                hash: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'hash', tsType: 'string' },
                fitment_hash: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'fitment_hash',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_defined_fitments: {
            primaryKey: {
                constraintName: 'gapc_defined_fitments_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_defined_fitments_approved_by_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['approved_by_user_id'],
                },
                {
                    constraintName: 'gapc_defined_fitments_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'gapc_defined_fitments_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_defined_fitments_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_defined_fitments_uvdb_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'approved_by_user',
                    joins: [{ fromColumn: 'approved_by_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definition',
                    joins: [{ fromColumn: 'uvdb_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                uvdb_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_definition_id',
                    tsType: 'string',
                },
                approved_by_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'approved_by_user_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_draft_config_fitments: {
            primaryKey: {
                constraintName: 'gapc_draft_config_fitments_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_draft_config_fitments_gapc_part_draft_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_draft_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_aspiration_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_base_vehicle_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_length_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_num_doors_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_abs_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_system_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_cylinder_head_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_drive_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_base_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_designation_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_mfr_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_version_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_vin_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_brake_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_spring_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_fuel_system_control_type_i_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_control_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_design_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_ignition_system_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_mfr_body_code_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_model_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_brake_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_spring_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_system_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_submodel_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_base_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_control_type__fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_control_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_elec_control__fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_elec_control_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_code_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_num_speeds_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_type_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_valves_id'],
                },
                {
                    constraintName: 'gapc_draft_config_fitments_uvdb_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_draft',
                    joins: [{ fromColumn: 'gapc_part_draft_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'uvdb_aspiration',
                    joins: [{ fromColumn: 'uvdb_aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicle',
                    joins: [{ fromColumn: 'uvdb_base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'uvdb_bed_length',
                    joins: [{ fromColumn: 'uvdb_bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'uvdb_bed_type',
                    joins: [{ fromColumn: 'uvdb_bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'uvdb_body_num_doors',
                    joins: [{ fromColumn: 'uvdb_body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'uvdb_body_type',
                    joins: [{ fromColumn: 'uvdb_body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'uvdb_brake_abs',
                    joins: [{ fromColumn: 'uvdb_brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'uvdb_brake_system',
                    joins: [{ fromColumn: 'uvdb_brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'uvdb_cylinder_head_type',
                    joins: [{ fromColumn: 'uvdb_cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'uvdb_drive_type',
                    joins: [{ fromColumn: 'uvdb_drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'uvdb_engine_base',
                    joins: [{ fromColumn: 'uvdb_engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'uvdb_engine_designation',
                    joins: [{ fromColumn: 'uvdb_engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_engine_mfr',
                    joins: [{ fromColumn: 'uvdb_engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'uvdb_engine_version',
                    joins: [{ fromColumn: 'uvdb_engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'uvdb_engine_vin',
                    joins: [{ fromColumn: 'uvdb_engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_front_brake_type',
                    joins: [{ fromColumn: 'uvdb_front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_front_spring_type',
                    joins: [{ fromColumn: 'uvdb_front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'uvdb_fuel_delivery_subtype',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'uvdb_fuel_delivery_type',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'uvdb_fuel_system_control_type',
                    joins: [{ fromColumn: 'uvdb_fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'uvdb_fuel_system_design',
                    joins: [{ fromColumn: 'uvdb_fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'uvdb_fuel_type',
                    joins: [{ fromColumn: 'uvdb_fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'uvdb_ignition_system_type',
                    joins: [{ fromColumn: 'uvdb_ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'uvdb_mfr_body_code',
                    joins: [{ fromColumn: 'uvdb_mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_model',
                    joins: [{ fromColumn: 'uvdb_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_rear_brake_type',
                    joins: [{ fromColumn: 'uvdb_rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_rear_spring_type',
                    joins: [{ fromColumn: 'uvdb_rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'uvdb_steering_system',
                    joins: [{ fromColumn: 'uvdb_steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'uvdb_steering_type',
                    joins: [{ fromColumn: 'uvdb_steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodel',
                    joins: [{ fromColumn: 'uvdb_submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_base',
                    joins: [{ fromColumn: 'uvdb_transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'uvdb_transmission_control_type',
                    joins: [{ fromColumn: 'uvdb_transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'uvdb_transmission_elec_control',
                    joins: [{ fromColumn: 'uvdb_transmission_elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmission',
                    joins: [{ fromColumn: 'uvdb_transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'uvdb_transmission_mfr_code',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_transmission_mfr',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'uvdb_transmission_num_speeds',
                    joins: [{ fromColumn: 'uvdb_transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'uvdb_transmission_type',
                    joins: [{ fromColumn: 'uvdb_transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'uvdb_valves',
                    joins: [{ fromColumn: 'uvdb_valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'uvdb_wheel_base',
                    joins: [{ fromColumn: 'uvdb_wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_part_draft_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_draft_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
                uvdb_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_model_id',
                    tsType: 'string',
                },
                uvdb_base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_id',
                    tsType: 'string',
                },
                uvdb_submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_id',
                    tsType: 'string',
                },
                uvdb_aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_aspiration_id',
                    tsType: 'string',
                },
                uvdb_engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_designation_id',
                    tsType: 'string',
                },
                uvdb_engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_mfr_id',
                    tsType: 'string',
                },
                uvdb_engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_vin_id',
                    tsType: 'string',
                },
                uvdb_engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_version_id',
                    tsType: 'string',
                },
                uvdb_valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_valves_id',
                    tsType: 'string',
                },
                uvdb_engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_base_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_control_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_design_id',
                    tsType: 'string',
                },
                uvdb_ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_ignition_system_type_id',
                    tsType: 'string',
                },
                uvdb_cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_cylinder_head_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_type_id',
                    tsType: 'string',
                },
                uvdb_drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_drive_type_id',
                    tsType: 'string',
                },
                uvdb_mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_mfr_body_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_control_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_id',
                    tsType: 'string',
                },
                uvdb_transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_num_speeds_id',
                    tsType: 'string',
                },
                uvdb_transmission_elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_elec_control_id',
                    tsType: 'string',
                },
                uvdb_transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_id',
                    tsType: 'string',
                },
                uvdb_transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_base_id',
                    tsType: 'string',
                },
                uvdb_front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_spring_type_id',
                    tsType: 'string',
                },
                uvdb_rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_spring_type_id',
                    tsType: 'string',
                },
                uvdb_steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_system_id',
                    tsType: 'string',
                },
                uvdb_steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_type_id',
                    tsType: 'string',
                },
                uvdb_front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_brake_type_id',
                    tsType: 'string',
                },
                uvdb_rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_brake_type_id',
                    tsType: 'string',
                },
                uvdb_brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_abs_id',
                    tsType: 'string',
                },
                uvdb_brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_system_id',
                    tsType: 'string',
                },
                uvdb_body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_type_id',
                    tsType: 'string',
                },
                uvdb_body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_num_doors_id',
                    tsType: 'string',
                },
                uvdb_bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_length_id',
                    tsType: 'string',
                },
                uvdb_bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_type_id',
                    tsType: 'string',
                },
                uvdb_wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_wheel_base_id',
                    tsType: 'string',
                },
                hash: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'hash', tsType: 'string' },
                fitment_hash: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'fitment_hash',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_entity_resolutions: {
            primaryKey: {
                constraintName: 'gapc_entity_resolutions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'gapc_entity_resolutions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_entity_resolutions_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_entity_resolutions_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                match_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'match_type',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                value: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'value', tsType: 'string' },
                entity_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'entity_type',
                    tsType: 'string',
                },
                entity_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'entity_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_fitment_group_configs: {
            primaryKey: {
                constraintName: 'gapc_fitment_group_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_fitment_group_configs_gapc_fitment_group_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_fitment_group_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_aspiration_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_base_vehicle_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_length_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_num_doors_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_abs_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_system_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_cylinder_head_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_drive_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_base_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_designation_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_mfr_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_version_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_vin_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_brake_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_spring_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_fuel_system_control_type_i_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_control_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_design_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_ignition_system_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_mfr_body_code_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_model_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_origin_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_origin_region_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_brake_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_spring_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_restriction1_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_restriction1_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_restriction2_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_restriction2_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_restriction3_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_restriction3_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_series_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_series_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_steering_side_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_side_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_system_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_submodel_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_base_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_control_type__fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_control_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_elec_control__fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_elec_control_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_code_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_num_speeds_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_type_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_valves_id'],
                },
                {
                    constraintName: 'gapc_fitment_group_configs_uvdb_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_fitment_groups',
                    alias: 'gapc_fitment_group',
                    joins: [{ fromColumn: 'gapc_fitment_group_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'uvdb_aspiration',
                    joins: [{ fromColumn: 'uvdb_aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicle',
                    joins: [{ fromColumn: 'uvdb_base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'uvdb_bed_length',
                    joins: [{ fromColumn: 'uvdb_bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'uvdb_bed_type',
                    joins: [{ fromColumn: 'uvdb_bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'uvdb_body_num_doors',
                    joins: [{ fromColumn: 'uvdb_body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'uvdb_body_type',
                    joins: [{ fromColumn: 'uvdb_body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'uvdb_brake_abs',
                    joins: [{ fromColumn: 'uvdb_brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'uvdb_brake_system',
                    joins: [{ fromColumn: 'uvdb_brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'uvdb_cylinder_head_type',
                    joins: [{ fromColumn: 'uvdb_cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'uvdb_drive_type',
                    joins: [{ fromColumn: 'uvdb_drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'uvdb_engine_base',
                    joins: [{ fromColumn: 'uvdb_engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'uvdb_engine_designation',
                    joins: [{ fromColumn: 'uvdb_engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_engine_mfr',
                    joins: [{ fromColumn: 'uvdb_engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'uvdb_engine_version',
                    joins: [{ fromColumn: 'uvdb_engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'uvdb_engine_vin',
                    joins: [{ fromColumn: 'uvdb_engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_front_brake_type',
                    joins: [{ fromColumn: 'uvdb_front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_front_spring_type',
                    joins: [{ fromColumn: 'uvdb_front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'uvdb_fuel_delivery_subtype',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'uvdb_fuel_delivery_type',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'uvdb_fuel_system_control_type',
                    joins: [{ fromColumn: 'uvdb_fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'uvdb_fuel_system_design',
                    joins: [{ fromColumn: 'uvdb_fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'uvdb_fuel_type',
                    joins: [{ fromColumn: 'uvdb_fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'uvdb_ignition_system_type',
                    joins: [{ fromColumn: 'uvdb_ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'uvdb_mfr_body_code',
                    joins: [{ fromColumn: 'uvdb_mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_model',
                    joins: [{ fromColumn: 'uvdb_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'uvdb_origin_region',
                    joins: [{ fromColumn: 'uvdb_origin_region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_rear_brake_type',
                    joins: [{ fromColumn: 'uvdb_rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_rear_spring_type',
                    joins: [{ fromColumn: 'uvdb_rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'uvdb_restriction1',
                    joins: [{ fromColumn: 'uvdb_restriction1_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'uvdb_restriction2',
                    joins: [{ fromColumn: 'uvdb_restriction2_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'uvdb_restriction3',
                    joins: [{ fromColumn: 'uvdb_restriction3_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'uvdb_series',
                    joins: [{ fromColumn: 'uvdb_series_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_sides',
                    alias: 'uvdb_steering_side',
                    joins: [{ fromColumn: 'uvdb_steering_side_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'uvdb_steering_system',
                    joins: [{ fromColumn: 'uvdb_steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'uvdb_steering_type',
                    joins: [{ fromColumn: 'uvdb_steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodel',
                    joins: [{ fromColumn: 'uvdb_submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_base',
                    joins: [{ fromColumn: 'uvdb_transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'uvdb_transmission_control_type',
                    joins: [{ fromColumn: 'uvdb_transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'uvdb_transmission_elec_control',
                    joins: [{ fromColumn: 'uvdb_transmission_elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmission',
                    joins: [{ fromColumn: 'uvdb_transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'uvdb_transmission_mfr_code',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_transmission_mfr',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'uvdb_transmission_num_speeds',
                    joins: [{ fromColumn: 'uvdb_transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'uvdb_transmission_type',
                    joins: [{ fromColumn: 'uvdb_transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'uvdb_valves',
                    joins: [{ fromColumn: 'uvdb_valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'uvdb_wheel_base',
                    joins: [{ fromColumn: 'uvdb_wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                uvdb_from_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_from_year_id',
                    tsType: 'number',
                },
                uvdb_from_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_from_month_id',
                    tsType: 'number',
                },
                uvdb_to_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_to_year_id',
                    tsType: 'number',
                },
                uvdb_to_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_to_month_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_fitment_group_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_fitment_group_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
                uvdb_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_model_id',
                    tsType: 'string',
                },
                uvdb_base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_id',
                    tsType: 'string',
                },
                uvdb_submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_id',
                    tsType: 'string',
                },
                uvdb_aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_aspiration_id',
                    tsType: 'string',
                },
                uvdb_engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_designation_id',
                    tsType: 'string',
                },
                uvdb_engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_mfr_id',
                    tsType: 'string',
                },
                uvdb_engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_vin_id',
                    tsType: 'string',
                },
                uvdb_engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_version_id',
                    tsType: 'string',
                },
                uvdb_valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_valves_id',
                    tsType: 'string',
                },
                uvdb_engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_base_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_control_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_design_id',
                    tsType: 'string',
                },
                uvdb_ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_ignition_system_type_id',
                    tsType: 'string',
                },
                uvdb_cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_cylinder_head_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_type_id',
                    tsType: 'string',
                },
                uvdb_drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_drive_type_id',
                    tsType: 'string',
                },
                uvdb_mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_mfr_body_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_control_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_id',
                    tsType: 'string',
                },
                uvdb_transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_num_speeds_id',
                    tsType: 'string',
                },
                uvdb_transmission_elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_elec_control_id',
                    tsType: 'string',
                },
                uvdb_transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_id',
                    tsType: 'string',
                },
                uvdb_transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_base_id',
                    tsType: 'string',
                },
                uvdb_front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_spring_type_id',
                    tsType: 'string',
                },
                uvdb_rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_spring_type_id',
                    tsType: 'string',
                },
                uvdb_steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_system_id',
                    tsType: 'string',
                },
                uvdb_steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_type_id',
                    tsType: 'string',
                },
                uvdb_front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_brake_type_id',
                    tsType: 'string',
                },
                uvdb_rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_brake_type_id',
                    tsType: 'string',
                },
                uvdb_brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_abs_id',
                    tsType: 'string',
                },
                uvdb_brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_system_id',
                    tsType: 'string',
                },
                uvdb_body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_type_id',
                    tsType: 'string',
                },
                uvdb_body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_num_doors_id',
                    tsType: 'string',
                },
                uvdb_bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_length_id',
                    tsType: 'string',
                },
                uvdb_bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_type_id',
                    tsType: 'string',
                },
                uvdb_wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_wheel_base_id',
                    tsType: 'string',
                },
                uvdb_steering_side_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_side_id',
                    tsType: 'string',
                },
                uvdb_series_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_series_id',
                    tsType: 'string',
                },
                uvdb_origin_region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_origin_region_id',
                    tsType: 'string',
                },
                uvdb_restriction1_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction1_id',
                    tsType: 'string',
                },
                uvdb_restriction2_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction2_id',
                    tsType: 'string',
                },
                uvdb_restriction3_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction3_id',
                    tsType: 'string',
                },
                hash: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'hash', tsType: 'string' },
                fitment_hash: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'fitment_hash',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_fitment_groups: {
            primaryKey: {
                constraintName: 'gapc_fitment_groups_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'gapc_fitment_groups_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_fitment_groups_uvdb_diagram_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_diagram_id'],
                },
                {
                    constraintName: 'gapc_fitment_groups_uvdb_oe_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_oe_vehicle_definition_id'],
                },
                {
                    constraintName: 'gapc_fitment_groups_uvdb_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_diagrams',
                    alias: 'uvdb_diagram',
                    joins: [{ fromColumn: 'uvdb_diagram_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definition',
                    joins: [{ fromColumn: 'uvdb_oe_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definition',
                    joins: [{ fromColumn: 'uvdb_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_fitment_group_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_to_fitment_group',
                    alias: 'gapc_part_to_fitment_groups',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_fitment_group_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                original_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_name',
                    tsType: 'string',
                },
                uvdb_diagram_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_diagram_id',
                    tsType: 'string',
                },
                uvdb_oe_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_oe_vehicle_definition_id',
                    tsType: 'string',
                },
                uvdb_draft_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_draft_vehicle_definition_id',
                    tsType: 'string',
                },
                uvdb_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_definition_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_i18n: {
            primaryKey: { constraintName: 'gapc_i18n_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'gapc_i18n_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_i18n_countries',
                    alias: 'gapc_i18n_countries',
                    joins: [{ fromColumn: 'id', toColumn: 'i18n_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                table_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'table_id',
                    tsType: 'string',
                },
                table_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'table_name',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_i18n_countries: {
            primaryKey: {
                constraintName: 'gapc_i18n_countries_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_i18n_countries_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'gapc_i18n_countries_i18n_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['i18n_id'],
                },
                { constraintName: 'gapc_i18n_countries_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_i18n',
                    alias: 'i18n',
                    joins: [{ fromColumn: 'i18n_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                i18n_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'i18n_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_images: {
            primaryKey: { constraintName: 'gapc_images_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_images_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'gapc_images_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_images_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                { constraintName: 'gapc_images_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                number: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'number', tsType: 'number' },
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                url: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'url', tsType: 'string' },
                original_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_url',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_medias: {
            primaryKey: { constraintName: 'gapc_medias_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_medias_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'gapc_medias_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                value: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'value', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_codes: {
            primaryKey: { constraintName: 'gapc_part_codes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_part_codes_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'gapc_part_codes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_part_codes_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['part_type_id'],
                },
                {
                    constraintName: 'gapc_part_codes_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['position_id'],
                },
                {
                    constraintName: 'gapc_part_codes_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['subcategory_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'part_type',
                    joins: [{ fromColumn: 'part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'position',
                    joins: [{ fromColumn: 'position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'subcategory',
                    joins: [{ fromColumn: 'subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                revision_date: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'revision_date',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'part_type_id',
                    tsType: 'string',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'subcategory_id',
                    tsType: 'string',
                },
                position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'position_id',
                    tsType: 'string',
                },
                cached_partterminologyname: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cached_partterminologyname',
                    tsType: 'string',
                },
                cached_position: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cached_position',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                cleaned_position: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cleaned_position',
                    tsType: 'string',
                },
                cleaned_title: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cleaned_title',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_drafts: {
            primaryKey: { constraintName: 'gapc_part_drafts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_part_drafts_approved_by_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['approved_by_user_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brand_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_gapc_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_parent_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'gapc_part_drafts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_part_drafts_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['part_type_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['position_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['subcategory_id'],
                },
                {
                    constraintName: 'gapc_part_drafts_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'approved_by_user',
                    joins: [{ fromColumn: 'approved_by_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'brand',
                    joins: [{ fromColumn: 'brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parent',
                    joins: [{ fromColumn: 'gapc_parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'parent',
                    joins: [{ fromColumn: 'parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'part_type',
                    joins: [{ fromColumn: 'part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'position',
                    joins: [{ fromColumn: 'position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'subcategory',
                    joins: [{ fromColumn: 'subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_draft_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                epid: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'epid', tsType: 'number' },
                quantity_per_packing_unit: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'quantity_per_packing_unit',
                    tsType: 'number',
                },
                packing_unit: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'packing_unit',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                has_fitment: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'has_fitment',
                    tsType: 'boolean',
                },
                fit_match_failed: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'fit_match_failed',
                    tsType: 'boolean',
                },
                is_universal: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_universal',
                    tsType: 'boolean',
                },
                width_mm: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'width_mm',
                    tsType: 'number',
                },
                height_mm: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'height_mm',
                    tsType: 'number',
                },
                length_mm: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'length_mm',
                    tsType: 'number',
                },
                weight_g: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'weight_g',
                    tsType: 'number',
                },
                avg_value_usd: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'avg_value_usd',
                    tsType: 'number',
                },
                is_oem: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_oem',
                    tsType: 'boolean',
                },
                is_performance: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_performance',
                    tsType: 'boolean',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                part_type_integrity_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_integrity_level',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_id',
                    tsType: 'string',
                },
                gapc_parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_parent_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                original_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_name',
                    tsType: 'string',
                },
                original_mpn: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_mpn',
                    tsType: 'string',
                },
                mpn: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'mpn', tsType: 'string' },
                diagram_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'diagram_code',
                    tsType: 'string',
                },
                gtin14: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'gtin14', tsType: 'string' },
                brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brand_id',
                    tsType: 'string',
                },
                part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_id',
                    tsType: 'string',
                },
                subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'subcategory_id',
                    tsType: 'string',
                },
                part_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_name',
                    tsType: 'string',
                },
                subcategory_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'subcategory_name',
                    tsType: 'string',
                },
                category_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_name',
                    tsType: 'string',
                },
                position_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'position_name',
                    tsType: 'string',
                },
                brand_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brand_name',
                    tsType: 'string',
                },
                external_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_category_id',
                    tsType: 'string',
                },
                replaced_by_mpns: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'replaced_by_mpns',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                approved_by_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'approved_by_user_id',
                    tsType: 'string',
                },
                fitment_notes: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fitment_notes',
                    tsType: 'string',
                },
                position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'position_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_interchange: {
            primaryKey: {
                constraintName: 'gapc_part_interchange_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_part_interchange_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                {
                    constraintName: 'gapc_part_interchange_gapc_part_interchange_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_interchange_id'],
                },
                { constraintName: 'gapc_part_interchange_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_part_interchange_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part_interchange',
                    joins: [{ fromColumn: 'gapc_part_interchange_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                gapc_part_interchange_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_interchange_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_to_fitment_group: {
            primaryKey: {
                constraintName: 'gapc_part_to_fitment_group_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_part_to_fitment_group_gapc_fitment_group_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_fitment_group_id'],
                },
                {
                    constraintName: 'gapc_part_to_fitment_group_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                {
                    constraintName: 'gapc_part_to_fitment_group_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_fitment_groups',
                    alias: 'gapc_fitment_group',
                    joins: [{ fromColumn: 'gapc_fitment_group_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                gapc_fitment_group_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_fitment_group_id',
                    tsType: 'string',
                },
                diagram_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'diagram_code',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_type_descriptions: {
            primaryKey: {
                constraintName: 'gapc_part_type_descriptions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_part_type_descriptions_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'description_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_type_gapc_attributes: {
            primaryKey: {
                constraintName: 'gapc_part_type_gapc_attributes_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'gapc_part_type_gapc_attributes_gapc_attribute_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_attribute_id'],
                },
                {
                    constraintName: 'gapc_part_type_gapc_attributes_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'gapc_part_type_gapc_attributes_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_attributes',
                    alias: 'gapc_attribute',
                    joins: [{ fromColumn: 'gapc_attribute_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                gapc_attribute_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_attribute_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_part_types: {
            primaryKey: { constraintName: 'gapc_part_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_part_types_description_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['description_id'],
                },
                { constraintName: 'gapc_part_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_part_types_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_part_type_descriptions',
                    alias: 'description',
                    joins: [{ fromColumn: 'description_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'categories',
                    alias: 'categories',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_codes',
                    alias: 'gapc_part_codes',
                    joins: [{ fromColumn: 'id', toColumn: 'part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_type_gapc_attributes',
                    alias: 'gapc_part_type_gapc_attributes',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_related_part_types',
                    alias: 'part_type_gapc_related_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_related_part_types',
                    alias: 'related_part_type_gapc_related_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'related_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_audit_data',
                    alias: 'product_audit_datas',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_specialities',
                    alias: 'store_specialities',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_diagram_gapc_part_types',
                    alias: 'uvdb_diagram_gapc_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                pcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'pcdb_id',
                    tsType: 'number',
                },
                ebay_us_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ebay_us_id',
                    tsType: 'number',
                },
                ebay_uk_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ebay_uk_id',
                    tsType: 'number',
                },
                revision_date: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'revision_date',
                    tsType: 'Date',
                },
                width_mm: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'width_mm',
                    tsType: 'number',
                },
                height_mm: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'height_mm',
                    tsType: 'number',
                },
                length_mm: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'length_mm',
                    tsType: 'number',
                },
                weight_g: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'weight_g',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                base_fitment_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'base_fitment_type',
                    tsType: 'number',
                },
                complete_fitment_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'complete_fitment_type',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                unspsc_taxonomy: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'unspsc_taxonomy',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description_id',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_parts: {
            primaryKey: { constraintName: 'gapc_parts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_parts_approved_by_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['approved_by_user_id'],
                },
                {
                    constraintName: 'gapc_parts_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brand_id'],
                },
                { constraintName: 'gapc_parts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_parts_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_id'],
                },
                {
                    constraintName: 'gapc_parts_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['part_type_id'],
                },
                {
                    constraintName: 'gapc_parts_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['position_id'],
                },
                {
                    constraintName: 'gapc_parts_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'gapc_parts_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['subcategory_id'],
                },
                { constraintName: 'gapc_parts_tyre_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['tyre_id'] },
                { constraintName: 'gapc_parts_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'gapc_parts_wheel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['wheel_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'approved_by_user',
                    joins: [{ fromColumn: 'approved_by_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'brand',
                    joins: [{ fromColumn: 'brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'parent',
                    joins: [{ fromColumn: 'parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'part_type',
                    joins: [{ fromColumn: 'part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'position',
                    joins: [{ fromColumn: 'position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'subcategory',
                    joins: [{ fromColumn: 'subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_tyres',
                    alias: 'tyre',
                    joins: [{ fromColumn: 'tyre_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_wheels',
                    alias: 'wheel',
                    joins: [{ fromColumn: 'wheel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'data_products_to_gapc_parts',
                    alias: 'data_products_to_gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_attribute_values',
                    alias: 'gapc_attribute_values',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_defined_fitments',
                    alias: 'gapc_defined_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_images',
                    alias: 'gapc_images',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_medias',
                    alias: 'gapc_medias',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_parent_gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_parent_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_interchange',
                    alias: 'gapc_part_gapc_part_interchanges',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_interchange',
                    alias: 'gapc_part_interchange_gapc_part_interchanges',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_interchange_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_to_fitment_group',
                    alias: 'gapc_part_to_fitment_groups',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'import_logs',
                    alias: 'import_logs',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'parts_to_base_vehicle',
                    alias: 'parts_to_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_part_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                is_draft: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_draft',
                    tsType: 'boolean',
                },
                epid: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'epid', tsType: 'number' },
                article_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'article_id',
                    tsType: 'number',
                },
                is_oem: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_oem',
                    tsType: 'boolean',
                },
                is_performance: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_performance',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                has_fitment: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'has_fitment',
                    tsType: 'boolean',
                },
                fitment_state: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fitment_state',
                    tsType: 'number',
                },
                fit_match_failed: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'fit_match_failed',
                    tsType: 'boolean',
                },
                is_universal: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_universal',
                    tsType: 'boolean',
                },
                width_mm: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'width_mm',
                    tsType: 'number',
                },
                height_mm: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'height_mm',
                    tsType: 'number',
                },
                length_mm: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'length_mm',
                    tsType: 'number',
                },
                weight_g: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'weight_g',
                    tsType: 'number',
                },
                avg_value_usd: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'avg_value_usd',
                    tsType: 'number',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                packing_unit: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'packing_unit',
                    tsType: 'number',
                },
                quantity_per_packing_unit: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'quantity_per_packing_unit',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                part_type_integrity_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_integrity_level',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_id',
                    tsType: 'string',
                },
                original_parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_parent_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                original_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_name',
                    tsType: 'string',
                },
                original_mpn: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_mpn',
                    tsType: 'string',
                },
                mpn: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'mpn', tsType: 'string' },
                diagram_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'diagram_code',
                    tsType: 'string',
                },
                gtin14: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'gtin14', tsType: 'string' },
                brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brand_id',
                    tsType: 'string',
                },
                part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_id',
                    tsType: 'string',
                },
                subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'subcategory_id',
                    tsType: 'string',
                },
                draft_part_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_part_type_name',
                    tsType: 'string',
                },
                draft_subcategory_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_subcategory_name',
                    tsType: 'string',
                },
                draft_category_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_category_name',
                    tsType: 'string',
                },
                draft_position_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_position_name',
                    tsType: 'string',
                },
                draft_brand_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_brand_name',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                approved_by_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'approved_by_user_id',
                    tsType: 'string',
                },
                fitment_notes: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fitment_notes',
                    tsType: 'string',
                },
                position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'position_id',
                    tsType: 'string',
                },
                wheel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'wheel_id',
                    tsType: 'string',
                },
                tyre_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tyre_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_positions: {
            primaryKey: { constraintName: 'gapc_positions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'gapc_positions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_position_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_codes',
                    alias: 'gapc_part_codes',
                    joins: [{ fromColumn: 'id', toColumn: 'position_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'position_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'position_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_audit_data',
                    alias: 'product_audit_datas',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_position_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_diagram_gapc_part_types',
                    alias: 'uvdb_diagram_gapc_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_position_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_position_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                pcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'pcdb_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        gapc_related_part_types: {
            primaryKey: {
                constraintName: 'gapc_related_part_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'gapc_related_part_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_related_part_types_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['part_type_id'],
                },
                {
                    constraintName: 'gapc_related_part_types_related_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['related_part_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_part_types',
                    alias: 'part_type',
                    joins: [{ fromColumn: 'part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'related_part_type',
                    joins: [{ fromColumn: 'related_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_type_id',
                    tsType: 'string',
                },
                related_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'related_part_type_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        gapc_subcategories: {
            primaryKey: {
                constraintName: 'gapc_subcategories_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'gapc_subcategories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'gapc_subcategories_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'categories',
                    alias: 'categories',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_codes',
                    alias: 'gapc_part_codes',
                    joins: [{ fromColumn: 'id', toColumn: 'subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_audit_data',
                    alias: 'product_audit_datas',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_specialities',
                    alias: 'store_specialities',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_diagram_gapc_part_types',
                    alias: 'uvdb_diagram_gapc_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_diagrams',
                    alias: 'uvdb_diagrams',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_subcategory_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                pcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'pcdb_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_tyres: {
            primaryKey: { constraintName: 'gapc_tyres_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_tyres_gapc_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_brand_id'],
                },
                { constraintName: 'gapc_tyres_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'gapc_tyres_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_brands',
                    alias: 'gapc_brand',
                    joins: [{ fromColumn: 'gapc_brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'tyre_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                epid: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'epid', tsType: 'number' },
                measured_diameter_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'measured_diameter_inch',
                    tsType: 'number',
                },
                measured_width_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'measured_width_inch',
                    tsType: 'number',
                },
                section_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'section_width',
                    tsType: 'number',
                },
                rim_diameter_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'rim_diameter_inch',
                    tsType: 'number',
                },
                rim_width_min_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'rim_width_min_inch',
                    tsType: 'number',
                },
                rim_width_max_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'rim_width_max_inch',
                    tsType: 'number',
                },
                ratio: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'ratio', tsType: 'number' },
                load_index: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'load_index',
                    tsType: 'number',
                },
                speed_rating_number: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'speed_rating_number',
                    tsType: 'number',
                },
                tread_depth: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tread_depth',
                    tsType: 'number',
                },
                tread_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tread_width',
                    tsType: 'number',
                },
                max_pressure_psi: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'max_pressure_psi',
                    tsType: 'number',
                },
                max_load_lbs: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'max_load_lbs',
                    tsType: 'number',
                },
                revs_per_mile: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'revs_per_mile',
                    tsType: 'number',
                },
                weight_kg: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'weight_kg',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                generated_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'generated_name',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                load_range: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'load_range',
                    tsType: 'string',
                },
                sidewall: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sidewall',
                    tsType: 'string',
                },
                speed_rating: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'speed_rating',
                    tsType: 'string',
                },
                tire_size: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tire_size',
                    tsType: 'string',
                },
                tire_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tire_type',
                    tsType: 'string',
                },
                model_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_name',
                    tsType: 'string',
                },
                p_metric: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'p_metric',
                    tsType: 'string',
                },
                product_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_code',
                    tsType: 'string',
                },
                utqg: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'utqg', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                gapc_brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_brand_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        gapc_uoms: {
            primaryKey: { constraintName: 'gapc_uoms_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'gapc_uoms_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_attribute_values',
                    alias: 'gapc_attribute_values',
                    joins: [{ fromColumn: 'id', toColumn: 'gapc_uom_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        gapc_vehicle_colors: {
            primaryKey: {
                constraintName: 'gapc_vehicle_colors_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'gapc_vehicle_colors_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_color_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        gapc_wheels: {
            primaryKey: { constraintName: 'gapc_wheels_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'gapc_wheels_gapc_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_brand_id'],
                },
                { constraintName: 'gapc_wheels_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'gapc_wheels_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_brands',
                    alias: 'gapc_brand',
                    joins: [{ fromColumn: 'gapc_brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'wheel_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                epid: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'epid', tsType: 'number' },
                diameter_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'diameter_inch',
                    tsType: 'number',
                },
                width_inch: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'width_inch',
                    tsType: 'number',
                },
                offset_mm: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'offset_mm',
                    tsType: 'number',
                },
                bore_size_mm: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'bore_size_mm',
                    tsType: 'number',
                },
                max_load_kg: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'max_load_kg',
                    tsType: 'number',
                },
                weight_kg: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'weight_kg',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                generated_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'generated_name',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                bolt_pattern: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'bolt_pattern',
                    tsType: 'string',
                },
                finish: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'finish', tsType: 'string' },
                model_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_name',
                    tsType: 'string',
                },
                product_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_code',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                gapc_brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_brand_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        guest_users: {
            primaryKey: { constraintName: 'guest_users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'guest_users_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'guest_users_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                {
                    constraintName: 'guest_users_default_shipping_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['default_shipping_address_id'],
                },
                { constraintName: 'guest_users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'guest_users_linked_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['linked_user_id'],
                },
                {
                    constraintName: 'guest_users_owner_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['owner_user_id'],
                },
                {
                    constraintName: 'guest_users_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'default_shipping_address',
                    joins: [{ fromColumn: 'default_shipping_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'linked_user',
                    joins: [{ fromColumn: 'linked_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'owner_user',
                    joins: [{ fromColumn: 'owner_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'analytics_categories',
                    alias: 'analytics_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_products',
                    alias: 'analytics_products',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_searches',
                    alias: 'analytics_searches',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_stores',
                    alias: 'analytics_stores',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'carts',
                    alias: 'carts',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'conversation_guest_user',
                    alias: 'conversation_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'conversations',
                    alias: 'conversations',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_guest_user',
                    alias: 'internal_tag_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'messages',
                    alias: 'messages',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'notifications',
                    alias: 'notifications',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'orders',
                    alias: 'orders',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_watchlist_guest_user',
                    alias: 'product_watchlist_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_favourites',
                    alias: 'store_favourites',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_invoices',
                    alias: 'store_invoices',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_buyer_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_buyer_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'user_addresses',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_devices',
                    alias: 'user_devices',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'guest_user_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: '1', nullable: false, columnName: 'type', tsType: 'number' },
                beta_tester: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'beta_tester',
                    tsType: 'boolean',
                },
                referrer_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'referrer_id',
                    tsType: 'number',
                },
                activated: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'activated',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                accepts_marketing: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'accepts_marketing',
                    tsType: 'boolean',
                },
                verified_email: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'verified_email',
                    tsType: 'boolean',
                },
                external_spend: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_spend',
                    tsType: 'number',
                },
                store_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_count',
                    tsType: 'number',
                },
                new_preference: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'new_preference',
                    tsType: 'number',
                },
                lng: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lng', tsType: 'number' },
                lat: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lat', tsType: 'number' },
                sent_email_count: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'sent_email_count',
                    tsType: 'number',
                },
                invited: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'invited',
                    tsType: 'boolean',
                },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                source: { dbType: 'int4', columnDefault: '1', nullable: true, columnName: 'source', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                owner_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'owner_user_id',
                    tsType: 'string',
                },
                email: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'email', tsType: 'string' },
                referrer_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'referrer_url',
                    tsType: 'string',
                },
                first_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'first_name',
                    tsType: 'string',
                },
                last_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'last_name',
                    tsType: 'string',
                },
                cookie_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cookie_id',
                    tsType: 'string',
                },
                external_state: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_state',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                ga_client_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ga_client_id',
                    tsType: 'string',
                },
                linked_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'linked_user_id',
                    tsType: 'string',
                },
                location_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'location_name',
                    tsType: 'string',
                },
                sendgrid_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_id',
                    tsType: 'string',
                },
                mobile_phone: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mobile_phone',
                    tsType: 'string',
                },
                logo_image: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'logo_image',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                website: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'website',
                    tsType: 'string',
                },
                company: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'company',
                    tsType: 'string',
                },
                default_shipping_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'default_shipping_address_id',
                    tsType: 'string',
                },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
                ip_address: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ip_address',
                    tsType: 'string',
                },
                origin: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'origin', tsType: 'string' },
                other_store_ids: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'other_store_ids',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        i18n_categories: {
            primaryKey: { constraintName: 'i18n_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'i18n_categories_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'i18n_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        images: {
            primaryKey: { constraintName: 'images_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'images_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'images_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                { constraintName: 'images_store_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['store_id'] },
                { constraintName: 'images_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'images_products',
                    alias: 'images_products',
                    joins: [{ fromColumn: 'id', toColumn: 'image_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'images_to_vehicle_instances',
                    alias: 'images_to_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'image_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'main_image_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'main_image_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                number: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'number',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                source_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'source_type',
                    tsType: 'number',
                },
                width: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'width', tsType: 'number' },
                height: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'height', tsType: 'number' },
                whiteness_score: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'whiteness_score',
                    tsType: 'number',
                },
                is_duplicate: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_duplicate',
                    tsType: 'boolean',
                },
                is_stock: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_stock',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                url: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'url', tsType: 'string' },
                original_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_url',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                source: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'source', tsType: 'string' },
                file_hash: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'file_hash',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        images_products: {
            primaryKey: { constraintName: 'images_products_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'images_products_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'images_products_image_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['image_id'],
                },
                {
                    constraintName: 'images_products_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'images',
                    alias: 'image',
                    joins: [{ fromColumn: 'image_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                is_stock: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_stock',
                    tsType: 'boolean',
                },
                number: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'number', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                image_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'image_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        images_to_vehicle_instances: {
            primaryKey: {
                constraintName: 'images_to_vehicle_instances_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'images_to_vehicle_instances_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'images_to_vehicle_instances_image_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['image_id'],
                },
                {
                    constraintName: 'images_to_vehicle_instances_vehicle_instance_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_instance_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'images',
                    alias: 'image',
                    joins: [{ fromColumn: 'image_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instance',
                    joins: [{ fromColumn: 'vehicle_instance_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                is_stock: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_stock',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_instance_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_instance_id',
                    tsType: 'string',
                },
                image_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'image_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        import_logs: {
            primaryKey: { constraintName: 'import_logs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'import_logs_file_import_feed_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['file_import_feed_id'],
                },
                {
                    constraintName: 'import_logs_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'import_logs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'import_logs_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'file_import_feeds',
                    alias: 'file_import_feed',
                    joins: [{ fromColumn: 'file_import_feed_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                severity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'severity',
                    tsType: 'number',
                },
                row: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'row', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                group: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'group', tsType: 'string' },
                col: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'col', tsType: 'string' },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                file_import_feed_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'file_import_feed_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        internal_tag_category: {
            primaryKey: {
                constraintName: 'internal_tag_category_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'internal_tag_category_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'internal_tag_category_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'internal_tag_category_internal_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['internal_tag_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'internal_tags',
                    alias: 'internal_tag',
                    joins: [{ fromColumn: 'internal_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                score: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'score', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                confidence: {
                    dbType: 'int4',
                    columnDefault: '10',
                    nullable: false,
                    columnName: 'confidence',
                    tsType: 'number',
                },
                blacklisted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'blacklisted',
                    tsType: 'boolean',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                internal_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'internal_tag_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        internal_tag_guest_user: {
            primaryKey: {
                constraintName: 'internal_tag_guest_user_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'internal_tag_guest_user_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'internal_tag_guest_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'internal_tag_guest_user_internal_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['internal_tag_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'internal_tags',
                    alias: 'internal_tag',
                    joins: [{ fromColumn: 'internal_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                blacklisted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'blacklisted',
                    tsType: 'boolean',
                },
                score: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'score', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                confidence: {
                    dbType: 'int4',
                    columnDefault: '10',
                    nullable: false,
                    columnName: 'confidence',
                    tsType: 'number',
                },
                manually_selected: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'manually_selected',
                    tsType: 'boolean',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                internal_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'internal_tag_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        internal_tag_product: {
            primaryKey: {
                constraintName: 'internal_tag_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'internal_tag_product_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'internal_tag_product_internal_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['internal_tag_id'],
                },
                {
                    constraintName: 'internal_tag_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'internal_tags',
                    alias: 'internal_tag',
                    joins: [{ fromColumn: 'internal_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                score: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'score', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                confidence: {
                    dbType: 'int4',
                    columnDefault: '10',
                    nullable: false,
                    columnName: 'confidence',
                    tsType: 'number',
                },
                blacklisted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'blacklisted',
                    tsType: 'boolean',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                internal_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'internal_tag_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        internal_tag_user: {
            primaryKey: {
                constraintName: 'internal_tag_user_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'internal_tag_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'internal_tag_user_internal_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['internal_tag_id'],
                },
                {
                    constraintName: 'internal_tag_user_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'internal_tags',
                    alias: 'internal_tag',
                    joins: [{ fromColumn: 'internal_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                score: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'score', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                confidence: {
                    dbType: 'int4',
                    columnDefault: '10',
                    nullable: false,
                    columnName: 'confidence',
                    tsType: 'number',
                },
                blacklisted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'blacklisted',
                    tsType: 'boolean',
                },
                manually_selected: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'manually_selected',
                    tsType: 'boolean',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                internal_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'internal_tag_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        internal_tags: {
            primaryKey: { constraintName: 'internal_tags_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'internal_tags_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'internal_tags_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'internal_tags_parent_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_category_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'categories',
                    alias: 'parent_category',
                    joins: [{ fromColumn: 'parent_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'internal_tag_category',
                    alias: 'internal_tag_categorys',
                    joins: [{ fromColumn: 'id', toColumn: 'internal_tag_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_guest_user',
                    alias: 'internal_tag_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'internal_tag_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_product',
                    alias: 'internal_tag_products',
                    joins: [{ fromColumn: 'id', toColumn: 'internal_tag_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_user',
                    alias: 'internal_tag_users',
                    joins: [{ fromColumn: 'id', toColumn: 'internal_tag_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                dominance: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'dominance',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                is_interest: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'is_interest',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                text: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'text', tsType: 'string' },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                parent_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_category_id',
                    tsType: 'string',
                },
                thumb_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'thumb_url',
                    tsType: 'string',
                },
                large_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'large_url',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                sendgrid_list_1: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_list_1',
                    tsType: 'string',
                },
                sendgrid_list_2: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_list_2',
                    tsType: 'string',
                },
                sendgrid_list_3: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_list_3',
                    tsType: 'string',
                },
                sendgrid_list_4: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_list_4',
                    tsType: 'string',
                },
                headline: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'headline',
                    tsType: 'string',
                },
                tagline: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tagline',
                    tsType: 'string',
                },
                important: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'important',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        invoice_line_items: {
            primaryKey: {
                constraintName: 'invoice_line_items_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'invoice_line_items_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'invoice_line_items_order_line_item_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_line_item_id'],
                },
                {
                    constraintName: 'invoice_line_items_store_invoice_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_invoice_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_item',
                    joins: [{ fromColumn: 'order_line_item_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_invoices',
                    alias: 'store_invoice',
                    joins: [{ fromColumn: 'store_invoice_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                quantity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'quantity',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                order_line_item_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_line_item_id',
                    tsType: 'string',
                },
                store_invoice_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_invoice_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        jobs: {
            primaryKey: { constraintName: 'jobs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'jobs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                id: {
                    dbType: 'int8',
                    columnDefault: "nextval('jobs_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'id',
                    tsType: 'number',
                },
                attempts: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'attempts',
                    tsType: 'number',
                },
                reserved_at: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'reserved_at',
                    tsType: 'number',
                },
                available_at: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'available_at',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'created_at',
                    tsType: 'number',
                },
                queue: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'queue', tsType: 'string' },
                payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'payload',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        keywords: {
            primaryKey: { constraintName: 'keywords_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'keywords_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'keywords_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'category_keyword',
                    alias: 'category_keywords',
                    joins: [{ fromColumn: 'id', toColumn: 'keyword_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        local_storage_location_product: {
            primaryKey: {
                constraintName: 'local_storage_location_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'local_storage_location_product_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'local_storage_location_product_local_storage_location_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['local_storage_location_id'],
                },
                {
                    constraintName: 'local_storage_location_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'local_storage_locations',
                    alias: 'local_storage_location',
                    joins: [{ fromColumn: 'local_storage_location_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                local_storage_location_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'local_storage_location_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        local_storage_locations: {
            primaryKey: {
                constraintName: 'local_storage_locations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'local_storage_locations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'local_storage_locations_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'local_storage_locations_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'local_storage_location_product',
                    alias: 'local_storage_location_products',
                    joins: [{ fromColumn: 'id', toColumn: 'local_storage_location_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_inventory',
                    alias: 'product_inventorys',
                    joins: [{ fromColumn: 'id', toColumn: 'local_storage_location_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        messages: {
            primaryKey: { constraintName: 'messages_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'messages_conversation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['conversation_id'],
                },
                {
                    constraintName: 'messages_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'messages_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'messages_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                { constraintName: 'messages_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'conversations',
                    alias: 'conversation',
                    joins: [{ fromColumn: 'conversation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                seen_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'seen_at',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                email_reminder_sent: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'email_reminder_sent',
                    tsType: 'number',
                },
                source: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'source', tsType: 'number' },
                app_notification_sent: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'app_notification_sent',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'message',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                conversation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'conversation_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        migrations: {
            primaryKey: { constraintName: 'migrations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'migrations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                id: {
                    dbType: 'int8',
                    columnDefault: "nextval('migrations_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'id',
                    tsType: 'number',
                },
                batch: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'batch', tsType: 'number' },
                migration: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'migration',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        model_validations: {
            primaryKey: {
                constraintName: 'model_validations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'model_validations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'model_validations_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                severity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'severity',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'alias', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                validationable_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'validationable_id',
                    tsType: 'string',
                },
                validationable_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'validationable_type',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        notes: {
            primaryKey: { constraintName: 'notes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'notes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'notes_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                text: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'text', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                noteable_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'noteable_id',
                    tsType: 'string',
                },
                noteable_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'noteable_type',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        notifications: {
            primaryKey: { constraintName: 'notifications_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'notifications_from_fkey', constraintType: 'FOREIGN KEY', columnNames: ['from'] },
                {
                    constraintName: 'notifications_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'notifications_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'notifications_listing_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['listing_id'],
                },
                { constraintName: 'notifications_to_fkey', constraintType: 'FOREIGN KEY', columnNames: ['to'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'from_',
                    joins: [{ fromColumn: 'from', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'listing',
                    joins: [{ fromColumn: 'listing_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                { toTable: 'users', alias: 'to_', joins: [{ fromColumn: 'to', toColumn: 'id' }], type: 'belongsTo' },
            ],
            columns: {
                seen: { dbType: 'bool', columnDefault: null, nullable: false, columnName: 'seen', tsType: 'boolean' },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                action: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'action',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                email_status: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'email_status',
                    tsType: 'number',
                },
                device_notification_sent: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'device_notification_sent',
                    tsType: 'boolean',
                },
                notification_suggestion_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'notification_suggestion_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                from: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'from', tsType: 'string' },
                to: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'to', tsType: 'string' },
                image: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'image', tsType: 'string' },
                link: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'link', tsType: 'string' },
                message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'message',
                    tsType: 'string',
                },
                listing_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'listing_id',
                    tsType: 'string',
                },
                title: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'title', tsType: 'string' },
                app_deeplink: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'app_deeplink',
                    tsType: 'string',
                },
                app_deeplink_payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'app_deeplink_payload',
                    tsType: 'string',
                },
                status: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'status', tsType: 'string' },
                email_link: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'email_link',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        order_line_items: {
            primaryKey: { constraintName: 'order_line_items_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'order_line_items_carrier_service_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['carrier_service_id'],
                },
                {
                    constraintName: 'order_line_items_carrier_service_option_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['carrier_service_option_id'],
                },
                {
                    constraintName: 'order_line_items_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'order_line_items_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'order_line_items_order_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_id'],
                },
                {
                    constraintName: 'order_line_items_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'order_line_items_product_inventory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_inventory_id'],
                },
                {
                    constraintName: 'order_line_items_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
                {
                    constraintName: 'order_line_items_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'order_line_items_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'shipping_carrier_services',
                    alias: 'carrier_service',
                    joins: [{ fromColumn: 'carrier_service_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'shipping_carrier_options',
                    alias: 'carrier_service_option',
                    joins: [{ fromColumn: 'carrier_service_option_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'orders',
                    alias: 'order',
                    joins: [{ fromColumn: 'order_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_inventory',
                    alias: 'product_inventory',
                    joins: [{ fromColumn: 'product_inventory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'invoice_line_items',
                    alias: 'invoice_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'order_line_item_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'shipment_line_items',
                    alias: 'shipment_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'order_line_item_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_return_line_items',
                    alias: 'store_return_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'order_line_item_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                price: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'price', tsType: 'number' },
                quantity: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'quantity',
                    tsType: 'number',
                },
                status: { dbType: 'int4', columnDefault: '1', nullable: false, columnName: 'status', tsType: 'number' },
                custom_shipping_option_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'custom_shipping_option_id',
                    tsType: 'number',
                },
                shipping_type: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'shipping_type',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                price_variation: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_variation',
                    tsType: 'number',
                },
                price_shipping: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_shipping',
                    tsType: 'number',
                },
                price_base: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_base',
                    tsType: 'number',
                },
                price_discount: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_discount',
                    tsType: 'number',
                },
                price_stripe_fee: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_stripe_fee',
                    tsType: 'number',
                },
                price_allgoods_fee: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'price_allgoods_fee',
                    tsType: 'number',
                },
                tracking_vendor_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tracking_vendor_id',
                    tsType: 'number',
                },
                shipping_status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipping_status',
                    tsType: 'number',
                },
                is_pickup: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_pickup',
                    tsType: 'boolean',
                },
                shipped_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipped_at',
                    tsType: 'Date',
                },
                recieved_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'recieved_at',
                    tsType: 'Date',
                },
                order_currency_multiplier: {
                    dbType: 'numeric',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_currency_multiplier',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                order_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_id',
                    tsType: 'string',
                },
                tracking_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'tracking_number',
                    tsType: 'string',
                },
                stripe_transfer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stripe_transfer_id',
                    tsType: 'string',
                },
                tracking_vendor_custom: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tracking_vendor_custom',
                    tsType: 'string',
                },
                product_inventory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_inventory_id',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                carrier_service_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'carrier_service_id',
                    tsType: 'string',
                },
                carrier_service_option_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'carrier_service_option_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        orders: {
            primaryKey: { constraintName: 'orders_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'orders_billing_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['billing_address_id'],
                },
                {
                    constraintName: 'orders_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                {
                    constraintName: 'orders_external_api_implementation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['external_api_implementation_id'],
                },
                {
                    constraintName: 'orders_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'orders_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'orders_shipping_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['shipping_address_id'],
                },
                { constraintName: 'orders_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'orders_voucher_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['voucher_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'user_addresses',
                    alias: 'billing_address',
                    joins: [{ fromColumn: 'billing_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'external_api_implementations',
                    alias: 'external_api_implementation',
                    joins: [{ fromColumn: 'external_api_implementation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'shipping_address',
                    joins: [{ fromColumn: 'shipping_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_vouchers',
                    alias: 'voucher',
                    joins: [{ fromColumn: 'voucher_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'order_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_invoices',
                    alias: 'store_invoices',
                    joins: [{ fromColumn: 'id', toColumn: 'order_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_returns',
                    alias: 'store_returns',
                    joins: [{ fromColumn: 'id', toColumn: 'order_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'order_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                total_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'total_price',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                voucher_value: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'voucher_value',
                    tsType: 'number',
                },
                total_discount_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'total_discount_price',
                    tsType: 'number',
                },
                subtotal_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'subtotal_price',
                    tsType: 'number',
                },
                total_line_items_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'total_line_items_price',
                    tsType: 'number',
                },
                source: { dbType: 'int4', columnDefault: '1', nullable: false, columnName: 'source', tsType: 'number' },
                price_refunded: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'price_refunded',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                shipping_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipping_address_id',
                    tsType: 'string',
                },
                billing_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'billing_address_id',
                    tsType: 'string',
                },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
                external_api_implementation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_api_implementation_id',
                    tsType: 'string',
                },
                tracking_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tracking_number',
                    tsType: 'string',
                },
                card_last4: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'card_last4',
                    tsType: 'string',
                },
                token: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'token', tsType: 'string' },
                delivery_instructions: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'delivery_instructions',
                    tsType: 'string',
                },
                voucher_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'voucher_id',
                    tsType: 'string',
                },
                card_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'card_type',
                    tsType: 'string',
                },
                client_ip_address: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'client_ip_address',
                    tsType: 'string',
                },
                client_user_agent: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'client_user_agent',
                    tsType: 'string',
                },
                vehicle_identifier: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_identifier',
                    tsType: 'string',
                },
                stripe_charge_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stripe_charge_id',
                    tsType: 'string',
                },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        part_request_responses: {
            primaryKey: {
                constraintName: 'part_request_responses_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'part_request_responses_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'part_request_responses_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'part_request_responses_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                total_discount: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'total_discount',
                    tsType: 'number',
                },
                estimated_ship_time_hours: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'estimated_ship_time_hours',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                note: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'note', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        part_requests: {
            primaryKey: { constraintName: 'part_requests_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'part_requests_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'part_requests_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'part_requests_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                {
                    constraintName: 'part_requests_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'part_requests_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'part_requests_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'part_requests_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'part_requests_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'part_requests_uvdb_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_base_vehicle_id'],
                },
                {
                    constraintName: 'part_requests_uvdb_engine_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_config_id'],
                },
                {
                    constraintName: 'part_requests_uvdb_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_submodel_id'],
                },
                {
                    constraintName: 'part_requests_uvdb_vehicle_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_config_id'],
                },
                {
                    constraintName: 'part_requests_uvdb_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicle',
                    joins: [{ fromColumn: 'uvdb_base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_config',
                    joins: [{ fromColumn: 'uvdb_engine_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodel',
                    joins: [{ fromColumn: 'uvdb_submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_config',
                    joins: [{ fromColumn: 'uvdb_vehicle_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definition',
                    joins: [{ fromColumn: 'uvdb_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_part_request_responses',
                    alias: 'product_part_request_responses',
                    joins: [{ fromColumn: 'id', toColumn: 'part_request_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_part_requests',
                    alias: 'store_part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'part_request_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                status: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'status', tsType: 'number' },
                type: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'type', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                mpn: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'mpn', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                uvdb_base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_id',
                    tsType: 'string',
                },
                uvdb_engine_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_config_id',
                    tsType: 'string',
                },
                uvdb_submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_id',
                    tsType: 'string',
                },
                uvdb_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_definition_id',
                    tsType: 'string',
                },
                uvdb_vehicle_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_config_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                vehicle_identifier: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_identifier',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        parts_to_base_vehicle: {
            primaryKey: {
                constraintName: 'parts_to_base_vehicle_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'parts_to_base_vehicle_approved_by_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['approved_by_user_id'],
                },
                {
                    constraintName: 'parts_to_base_vehicle_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'parts_to_base_vehicle_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'parts_to_base_vehicle_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'parts_to_base_vehicle_uvdb_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_base_vehicle_id'],
                },
                {
                    constraintName: 'parts_to_base_vehicle_uvdb_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'approved_by_user',
                    joins: [{ fromColumn: 'approved_by_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicle',
                    joins: [{ fromColumn: 'uvdb_base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicles',
                    alias: 'uvdb_vehicle',
                    joins: [{ fromColumn: 'uvdb_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                uvdb_base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_id',
                    tsType: 'string',
                },
                uvdb_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_id',
                    tsType: 'string',
                },
                approved_by_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'approved_by_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        password_resets: {
            primaryKey: { constraintName: 'password_resets_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'password_resets_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                id: {
                    dbType: 'int8',
                    columnDefault: "nextval('password_resets_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'id',
                    tsType: 'number',
                },
                email: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'email', tsType: 'string' },
                token: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'token', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_audit_data: {
            primaryKey: {
                constraintName: 'product_audit_data_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_audit_data_gapc_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_brand_id'],
                },
                {
                    constraintName: 'product_audit_data_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'product_audit_data_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'product_audit_data_gapc_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_position_id'],
                },
                {
                    constraintName: 'product_audit_data_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                { constraintName: 'product_audit_data_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_audit_data_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_brands',
                    alias: 'gapc_brand',
                    joins: [{ fromColumn: 'gapc_brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category_',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type_',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'gapc_position_',
                    joins: [{ fromColumn: 'gapc_position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory_',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'audit_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                is_performance: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_performance',
                    tsType: 'boolean',
                },
                is_oem: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_oem',
                    tsType: 'boolean',
                },
                price: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'price', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                product_resolved: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_resolved',
                    tsType: 'boolean',
                },
                part_resolved: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'part_resolved',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'message',
                    tsType: 'string',
                },
                location: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'location',
                    tsType: 'string',
                },
                seller: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'seller', tsType: 'string' },
                brand: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'brand', tsType: 'string' },
                shipping: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipping',
                    tsType: 'string',
                },
                images: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'images', tsType: 'string' },
                gtin14: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'gtin14', tsType: 'string' },
                part_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_number',
                    tsType: 'string',
                },
                part_number_clean: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'part_number_clean',
                    tsType: 'string',
                },
                fitment_notes: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fitment_notes',
                    tsType: 'string',
                },
                filter_condition: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_condition',
                    tsType: 'string',
                },
                filter_group: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'filter_group',
                    tsType: 'string',
                },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                gapc_brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_brand_id',
                    tsType: 'string',
                },
                gapc_category: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category',
                    tsType: 'string',
                },
                gapc_subcategory: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory',
                    tsType: 'string',
                },
                gapc_part_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type',
                    tsType: 'string',
                },
                gapc_position: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_position',
                    tsType: 'string',
                },
                gapc_position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_position_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                gapc_vehicle_vin_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_vehicle_vin_number',
                    tsType: 'string',
                },
                uvdb_engine_vin_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_vin_number',
                    tsType: 'string',
                },
                uvdb_engine_designation: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_designation',
                    tsType: 'string',
                },
                uvdb_engine_liter: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_liter',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_code',
                    tsType: 'string',
                },
                uvdb_transmission_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_type',
                    tsType: 'string',
                },
                uvdb_body_num_doors: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_num_doors',
                    tsType: 'string',
                },
                uvdb_body_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_type',
                    tsType: 'string',
                },
                gapc_wheel_offset_mm: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_wheel_offset_mm',
                    tsType: 'string',
                },
                gapc_wheel_width_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_wheel_width_inch',
                    tsType: 'string',
                },
                gapc_wheel_bolt_pattern: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_wheel_bolt_pattern',
                    tsType: 'string',
                },
                gapc_wheel_diameter_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_wheel_diameter_inch',
                    tsType: 'string',
                },
                gapc_tyre_ratio: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_tyre_ratio',
                    tsType: 'string',
                },
                gapc_tyre_section_width_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_tyre_section_width_inch',
                    tsType: 'string',
                },
                gapc_tyre_rim_diameter_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_tyre_rim_diameter_inch',
                    tsType: 'string',
                },
                gapc_tyre_measured_diameter_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_tyre_measured_diameter_inch',
                    tsType: 'string',
                },
                width: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'width', tsType: 'string' },
                length: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'length', tsType: 'string' },
                height: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'height', tsType: 'string' },
                weight: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'weight', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_descriptions: {
            primaryKey: {
                constraintName: 'product_descriptions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_descriptions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_descriptions_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                media_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'media_url',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_filter_option_product: {
            primaryKey: {
                constraintName: 'product_filter_option_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_filter_option_product_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'product_filter_option_product_product_filter_option_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_filter_option_id'],
                },
                {
                    constraintName: 'product_filter_option_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_filter_options',
                    alias: 'product_filter_option',
                    joins: [{ fromColumn: 'product_filter_option_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                custom_value: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'custom_value',
                    tsType: 'string',
                },
                product_filter_option_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_filter_option_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_filter_options: {
            primaryKey: {
                constraintName: 'product_filter_options_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_filter_options_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_filter_options_product_filter_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_filter_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_filters',
                    alias: 'product_filter',
                    joins: [{ fromColumn: 'product_filter_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_filter_option_product',
                    alias: 'product_filter_option_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_filter_option_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_filters',
                    alias: 'product_filters',
                    joins: [{ fromColumn: 'id', toColumn: 'default_filter_option_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                position: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'position',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                product_filter_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_filter_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_filters: {
            primaryKey: { constraintName: 'product_filters_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'product_filters_default_filter_option_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['default_filter_option_id'],
                },
                { constraintName: 'product_filters_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_filter_options',
                    alias: 'default_filter_option',
                    joins: [{ fromColumn: 'default_filter_option_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_filter_options',
                    alias: 'product_filter_options',
                    joins: [{ fromColumn: 'id', toColumn: 'product_filter_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                position: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'position',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                type: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'type', tsType: 'string' },
                display_class: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'display_class',
                    tsType: 'string',
                },
                default_filter_option_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'default_filter_option_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_footers: {
            primaryKey: { constraintName: 'product_footers_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'product_footers_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_footers_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'product_footers_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_footer_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                text: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'text', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_import_mapper: {
            primaryKey: {
                constraintName: 'product_import_mapper_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_import_mapper_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                external_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'number',
                },
                external_category_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_category_id',
                    tsType: 'number',
                },
                category_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'category_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                external_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_name',
                    tsType: 'string',
                },
                external_path: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_path',
                    tsType: 'string',
                },
                full_external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'full_external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_inventory: {
            primaryKey: {
                constraintName: 'product_inventory_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_inventory_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_inventory_local_storage_location_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['local_storage_location_id'],
                },
                {
                    constraintName: 'product_inventory_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_inventory_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'local_storage_locations',
                    alias: 'local_storage_location',
                    joins: [{ fromColumn: 'local_storage_location_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'product_inventory_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustment_product',
                    alias: 'stock_adjustment_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_inventory_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                batch_tracked: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'batch_tracked',
                    tsType: 'boolean',
                },
                quantity: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'quantity',
                    tsType: 'number',
                },
                cost_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cost_price',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                shipping_surcharge_percent: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_surcharge_percent',
                    tsType: 'number',
                },
                shipping_surcharge_cents: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_surcharge_cents',
                    tsType: 'number',
                },
                preparation_time_s: {
                    dbType: 'int4',
                    columnDefault: '3600',
                    nullable: false,
                    columnName: 'preparation_time_s',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                barcode: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'barcode',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                local_storage_location_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'local_storage_location_id',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_part_request_responses: {
            primaryKey: {
                constraintName: 'product_part_request_responses_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_part_request_responses_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'product_part_request_responses_part_request_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['part_request_id'],
                },
                {
                    constraintName: 'product_part_request_responses_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'part_requests',
                    alias: 'part_request',
                    joins: [{ fromColumn: 'part_request_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                discount: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'discount',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                part_request_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'part_request_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_price_history: {
            primaryKey: {
                constraintName: 'product_price_history_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_price_history_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_price_history_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'price',
                    tsType: 'number',
                },
                display_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'display_price',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                previous_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'previous_price',
                    tsType: 'number',
                },
                previous_display_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'previous_display_price',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_questions: {
            primaryKey: {
                constraintName: 'product_questions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_questions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_questions_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_questions_product_question_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_question_id'],
                },
                {
                    constraintName: 'product_questions_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_questions',
                    alias: 'product_question',
                    joins: [{ fromColumn: 'product_question_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_questions',
                    alias: 'product_questions',
                    joins: [{ fromColumn: 'id', toColumn: 'product_question_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                text: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'text', tsType: 'string' },
                product_question_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_question_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_review_product_review_tag: {
            primaryKey: {
                constraintName: 'product_review_product_review_tag_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_review_product_review_tag_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'product_review_product_review_tag_product_review_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_review_id'],
                },
                {
                    constraintName: 'product_review_product_review_tag_product_review_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_review_tag_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_reviews',
                    alias: 'product_review',
                    joins: [{ fromColumn: 'product_review_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_review_tags',
                    alias: 'product_review_tag',
                    joins: [{ fromColumn: 'product_review_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                product_review_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_review_id',
                    tsType: 'string',
                },
                product_review_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_review_tag_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_review_tag_counts: {
            primaryKey: {
                constraintName: 'product_review_tag_counts_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_review_tag_counts_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'product_review_tag_counts_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_review_tag_counts_product_review_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_review_tag_id'],
                },
                {
                    constraintName: 'product_review_tag_counts_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_review_tags',
                    alias: 'product_review_tag',
                    joins: [{ fromColumn: 'product_review_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                yes_count: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'yes_count',
                    tsType: 'number',
                },
                no_count: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'no_count',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                product_review_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_review_tag_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_review_tags: {
            primaryKey: {
                constraintName: 'product_review_tags_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'product_review_tags_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_review_product_review_tag',
                    alias: 'product_review_product_review_tags',
                    joins: [{ fromColumn: 'id', toColumn: 'product_review_tag_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_review_tag_counts',
                    alias: 'product_review_tag_counts',
                    joins: [{ fromColumn: 'id', toColumn: 'product_review_tag_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_reviews: {
            primaryKey: { constraintName: 'product_reviews_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'product_reviews_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_reviews_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_reviews_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'product_reviews_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_review_product_review_tag',
                    alias: 'product_review_product_review_tags',
                    joins: [{ fromColumn: 'id', toColumn: 'product_review_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                rating: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'rating',
                    tsType: 'number',
                },
                type: { dbType: 'int4', columnDefault: '1', nullable: false, columnName: 'type', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                details: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'details',
                    tsType: 'string',
                },
                title: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'title', tsType: 'string' },
                image: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'image', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                source: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'source', tsType: 'string' },
                username: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'username',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        product_search_phrases: {
            primaryKey: {
                constraintName: 'product_search_phrases_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_search_phrases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_search_phrases_product',
                    alias: 'product_search_phrases_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_search_phrase_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                text: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'text', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_search_phrases_product: {
            primaryKey: {
                constraintName: 'product_search_phrases_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_search_phrases_product_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'product_search_phrases_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_search_phrases_product_product_search_phrase_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_search_phrase_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_search_phrases',
                    alias: 'product_search_phrase',
                    joins: [{ fromColumn: 'product_search_phrase_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                product_search_phrase_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_search_phrase_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_shipping_option: {
            primaryKey: {
                constraintName: 'product_shipping_option_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_shipping_option_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_shipping_option_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_shipping_option_shipping_option_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['shipping_option_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'shipping_options',
                    alias: 'shipping_option',
                    joins: [{ fromColumn: 'shipping_option_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                shipping_option_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipping_option_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_tag_product: {
            primaryKey: {
                constraintName: 'product_tag_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_tag_product_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_tag_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_tag_product_product_tag_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_tag_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_tags',
                    alias: 'product_tag',
                    joins: [{ fromColumn: 'product_tag_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                product_tag_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_tag_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_tags: {
            primaryKey: { constraintName: 'product_tags_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'product_tags_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_tag_product',
                    alias: 'product_tag_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_tag_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                text: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'text', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_watchlist_guest_user: {
            primaryKey: {
                constraintName: 'product_watchlist_guest_user_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'product_watchlist_guest_user_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                {
                    constraintName: 'product_watchlist_guest_user_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'product_watchlist_guest_user_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        product_watchlist_user: {
            primaryKey: {
                constraintName: 'product_watchlist_user_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'product_watchlist_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'product_watchlist_user_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'product_watchlist_user_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        products: {
            primaryKey: { constraintName: 'products_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'products_audit_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['audit_id'] },
                {
                    constraintName: 'products_gapc_part_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_id'],
                },
                { constraintName: 'products_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'products_main_image_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['main_image_id'],
                },
                {
                    constraintName: 'products_product_footer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_footer_id'],
                },
                {
                    constraintName: 'products_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
                { constraintName: 'products_store_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['store_id'] },
                {
                    constraintName: 'products_user_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_address_id'],
                },
                { constraintName: 'products_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'products_vehicle_instance_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_instance_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'product_audit_data',
                    alias: 'audit',
                    joins: [{ fromColumn: 'audit_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_part',
                    joins: [{ fromColumn: 'gapc_part_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'images',
                    alias: 'main_image',
                    joins: [{ fromColumn: 'main_image_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_footers',
                    alias: 'product_footer',
                    joins: [{ fromColumn: 'product_footer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'user_address',
                    joins: [{ fromColumn: 'user_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instance',
                    joins: [{ fromColumn: 'vehicle_instance_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'analytics_products',
                    alias: 'analytics_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'carts',
                    alias: 'carts',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'category_product',
                    alias: 'category_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'data_products_to_gapc_parts',
                    alias: 'data_products_to_gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'email_notification_history',
                    alias: 'email_notification_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'listing_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_imports',
                    alias: 'external_api_imports',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'images',
                    alias: 'images',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'images_products',
                    alias: 'images_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'import_logs',
                    alias: 'import_logs',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_product',
                    alias: 'internal_tag_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'local_storage_location_product',
                    alias: 'local_storage_location_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'messages',
                    alias: 'messages',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'notifications',
                    alias: 'notifications',
                    joins: [{ fromColumn: 'id', toColumn: 'listing_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_descriptions',
                    alias: 'product_descriptions',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_filter_option_product',
                    alias: 'product_filter_option_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_inventory',
                    alias: 'product_inventorys',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_part_request_responses',
                    alias: 'product_part_request_responses',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_price_history',
                    alias: 'product_price_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_questions',
                    alias: 'product_questions',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_review_tag_counts',
                    alias: 'product_review_tag_counts',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_reviews',
                    alias: 'product_reviews',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_search_phrases_product',
                    alias: 'product_search_phrases_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_shipping_option',
                    alias: 'product_shipping_options',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_tag_product',
                    alias: 'product_tag_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_watchlist_guest_user',
                    alias: 'product_watchlist_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_watchlist_user',
                    alias: 'product_watchlist_users',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustment_product',
                    alias: 'stock_adjustment_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_folders_product',
                    alias: 'store_folders_products',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_newsfeed',
                    alias: 'store_newsfeeds',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_notification_history',
                    alias: 'store_notification_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'listing_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_notifications',
                    alias: 'store_notifications',
                    joins: [{ fromColumn: 'id', toColumn: 'listing_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_feedbacks',
                    alias: 'user_feedbacks',
                    joins: [{ fromColumn: 'id', toColumn: 'product_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_notification_history',
                    alias: 'user_notification_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'listing_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                shipping_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'shipping_type',
                    tsType: 'number',
                },
                stock: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'stock', tsType: 'number' },
                listing_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'listing_type',
                    tsType: 'number',
                },
                price: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'price', tsType: 'number' },
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                purchase_status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'purchase_status',
                    tsType: 'number',
                },
                condition: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'condition',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                synced_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'synced_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                quality: {
                    dbType: 'int4',
                    columnDefault: '10',
                    nullable: false,
                    columnName: 'quality',
                    tsType: 'number',
                },
                views: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'views', tsType: 'number' },
                impressions: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'impressions',
                    tsType: 'number',
                },
                display_price: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'display_price',
                    tsType: 'number',
                },
                featured_status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'featured_status',
                    tsType: 'number',
                },
                health_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'health_level',
                    tsType: 'number',
                },
                listing_group_id: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'listing_group_id',
                    tsType: 'number',
                },
                audit_level: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'audit_level',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                main_image_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'main_image_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                sku: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'sku', tsType: 'string' },
                barcode: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'barcode',
                    tsType: 'string',
                },
                unspsc_taxonomy: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'unspsc_taxonomy',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                user_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_address_id',
                    tsType: 'string',
                },
                csv_import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'csv_import_id',
                    tsType: 'string',
                },
                product_footer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_footer_id',
                    tsType: 'string',
                },
                gapc_part_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_id',
                    tsType: 'string',
                },
                vehicle_instance_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_instance_id',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                audit_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'audit_id',
                    tsType: 'string',
                },
                name_generated: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'name_generated',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        related_categories: {
            primaryKey: {
                constraintName: 'related_categories_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'related_categories_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'related_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'related_categories_related_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['related_category_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'categories',
                    alias: 'related_category',
                    joins: [{ fromColumn: 'related_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                rank: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'rank', tsType: 'number' },
                status: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'status', tsType: 'number' },
                directly_related: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'directly_related',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                related_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'related_category_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        shipment_line_items: {
            primaryKey: {
                constraintName: 'shipment_line_items_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'shipment_line_items_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'shipment_line_items_order_line_item_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_line_item_id'],
                },
                {
                    constraintName: 'shipment_line_items_store_shipment_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_shipment_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_item',
                    joins: [{ fromColumn: 'order_line_item_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'store_shipment',
                    joins: [{ fromColumn: 'store_shipment_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                quantity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'quantity',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                order_line_item_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_line_item_id',
                    tsType: 'string',
                },
                store_shipment_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_shipment_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        shipping_carrier_options: {
            primaryKey: {
                constraintName: 'shipping_carrier_options_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'shipping_carrier_options_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'carrier_service_option_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                min_delivery_s: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'min_delivery_s',
                    tsType: 'number',
                },
                max_delivery_s: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'max_delivery_s',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                service_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'service_name',
                    tsType: 'string',
                },
                service_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'service_type',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        shipping_carrier_services: {
            primaryKey: {
                constraintName: 'shipping_carrier_services_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'shipping_carrier_services_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'carrier_service_inventory',
                    alias: 'carrier_service_inventorys',
                    joins: [{ fromColumn: 'id', toColumn: 'shipping_carrier_service_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'carrier_service_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                service_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'service_code',
                    tsType: 'string',
                },
                format: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'format',
                    tsType: 'string',
                },
                carrier_service_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'carrier_service_type',
                    tsType: 'string',
                },
                callback_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'callback_url',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        shipping_options: {
            primaryKey: { constraintName: 'shipping_options_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'shipping_options_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'shipping_options_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_shipping_option',
                    alias: 'product_shipping_options',
                    joins: [{ fromColumn: 'id', toColumn: 'shipping_option_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                cost: { dbType: 'float8', columnDefault: null, nullable: false, columnName: 'cost', tsType: 'number' },
                class: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'class', tsType: 'number' },
                display: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'display',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        site_health_reports: {
            primaryKey: {
                constraintName: 'site_health_reports_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'site_health_reports_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'site_health_reports_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'site_health_reports',
                    alias: 'parent',
                    joins: [{ fromColumn: 'parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'site_health_reports',
                    alias: 'site_health_reports',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                status: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'status', tsType: 'number' },
                attempted: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'attempted',
                    tsType: 'number',
                },
                succeeded: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'succeeded',
                    tsType: 'number',
                },
                failed: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'failed',
                    tsType: 'number',
                },
                expected_next_run: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'expected_next_run',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                site_health_reportable_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'site_health_reportable_id',
                    tsType: 'string',
                },
                site_health_reportable_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'site_health_reportable_type',
                    tsType: 'string',
                },
                parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_id',
                    tsType: 'string',
                },
                function: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'function',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                response: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'response',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        sitemaps: {
            primaryKey: { constraintName: 'sitemaps_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'sitemaps_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                cached_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cached_at',
                    tsType: 'Date',
                },
                state: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                index: { dbType: 'int4', columnDefault: '1', nullable: false, columnName: 'index', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                url: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'url', tsType: 'string' },
                sitemapable_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sitemapable_id',
                    tsType: 'string',
                },
                sitemapable_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sitemapable_type',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        stock_adjustment_product: {
            primaryKey: {
                constraintName: 'stock_adjustment_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'stock_adjustment_product_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'stock_adjustment_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'stock_adjustment_product_product_inventory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_inventory_id'],
                },
                {
                    constraintName: 'stock_adjustment_product_stock_adjustment_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['stock_adjustment_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'product_inventory',
                    alias: 'product_inventory',
                    joins: [{ fromColumn: 'product_inventory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stock_adjustments',
                    alias: 'stock_adjustment',
                    joins: [{ fromColumn: 'stock_adjustment_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                quantity_change: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'quantity_change',
                    tsType: 'number',
                },
                quantity_available_before: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'quantity_available_before',
                    tsType: 'number',
                },
                cost_per_item: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cost_per_item',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                stock_adjustment_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'stock_adjustment_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                supplier_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_code',
                    tsType: 'string',
                },
                product_inventory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_inventory_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        stock_adjustment_reasons: {
            primaryKey: {
                constraintName: 'stock_adjustment_reasons_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'stock_adjustment_reasons_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'stock_adjustment_reasons_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'stock_adjustment_reasons_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stock_adjustments',
                    alias: 'stock_adjustments',
                    joins: [{ fromColumn: 'id', toColumn: 'stock_adjustment_reason_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                default_quantity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'default_quantity',
                    tsType: 'number',
                },
                is_default: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_default',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'alias', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        stock_adjustments: {
            primaryKey: {
                constraintName: 'stock_adjustments_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'stock_adjustments_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'stock_adjustments_stock_adjustment_reason_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['stock_adjustment_reason_id'],
                },
                {
                    constraintName: 'stock_adjustments_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
                {
                    constraintName: 'stock_adjustments_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'stock_adjustments_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stock_adjustment_reasons',
                    alias: 'stock_adjustment_reason',
                    joins: [{ fromColumn: 'stock_adjustment_reason_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stock_adjustment_product',
                    alias: 'stock_adjustment_products',
                    joins: [{ fromColumn: 'id', toColumn: 'stock_adjustment_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                stock_adjustment_reason_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'stock_adjustment_reason_id',
                    tsType: 'string',
                },
                session_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'session_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_address_days_in_week: {
            primaryKey: {
                constraintName: 'store_address_days_in_week_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'store_address_days_in_week_days_in_week_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['days_in_week_id'],
                },
                {
                    constraintName: 'store_address_days_in_week_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'store_address_days_in_week_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'days_in_week',
                    alias: 'days_in_week',
                    joins: [{ fromColumn: 'days_in_week_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                selected: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'selected',
                    tsType: 'boolean',
                },
                start_time_local: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'start_time_local',
                    tsType: 'number',
                },
                end_time_local: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'end_time_local',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                days_in_week_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'days_in_week_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_addresses: {
            primaryKey: { constraintName: 'store_addresses_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'store_addresses_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                { constraintName: 'store_addresses_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_addresses_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'carrier_service_inventory',
                    alias: 'carrier_service_inventorys',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'file_import_feeds',
                    alias: 'file_import_feeds',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_inventory',
                    alias: 'product_inventorys',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustments',
                    alias: 'stock_adjustments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_address_days_in_week',
                    alias: 'store_address_days_in_weeks',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_returns',
                    alias: 'store_returns',
                    joins: [{ fromColumn: 'id', toColumn: 'return_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'id', toColumn: 'default_shipping_address_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                status: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'status', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                lng: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lng', tsType: 'number' },
                lat: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lat', tsType: 'number' },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                can_pickup: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'can_pickup',
                    tsType: 'boolean',
                },
                shipping_surcharge_percent: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_surcharge_percent',
                    tsType: 'number',
                },
                shipping_surcharge_cents: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'shipping_surcharge_cents',
                    tsType: 'number',
                },
                preparation_time_s: {
                    dbType: 'float8',
                    columnDefault: '3600',
                    nullable: false,
                    columnName: 'preparation_time_s',
                    tsType: 'number',
                },
                is_shipping: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_shipping',
                    tsType: 'boolean',
                },
                is_billing: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_billing',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                unit: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'unit', tsType: 'string' },
                street_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'street_number',
                    tsType: 'string',
                },
                street_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'street_name',
                    tsType: 'string',
                },
                suburb: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'suburb', tsType: 'string' },
                city: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'city', tsType: 'string' },
                state: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'state', tsType: 'string' },
                postcode: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'postcode',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_categories: {
            primaryKey: { constraintName: 'store_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'store_categories_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['category_id'],
                },
                { constraintName: 'store_categories_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_categories_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'category',
                    joins: [{ fromColumn: 'category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                show: { dbType: 'bool', columnDefault: null, nullable: true, columnName: 'show', tsType: 'boolean' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'category_id',
                    tsType: 'string',
                },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_favourites: {
            primaryKey: { constraintName: 'store_favourites_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'store_favourites_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'store_favourites_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_favourites_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_favourites_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_folders: {
            primaryKey: { constraintName: 'store_folders_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'store_folders_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_folders_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_folders_product',
                    alias: 'store_folders_products',
                    joins: [{ fromColumn: 'id', toColumn: 'store_folder_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                order: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'order', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_folders_product: {
            primaryKey: {
                constraintName: 'store_folders_product_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_folders_product_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_folders_product_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'store_folders_product_store_folder_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_folder_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_folders',
                    alias: 'store_folder',
                    joins: [{ fromColumn: 'store_folder_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                store_folder_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_folder_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_invoices: {
            primaryKey: { constraintName: 'store_invoices_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'store_invoices_buyer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['buyer_id'],
                },
                {
                    constraintName: 'store_invoices_guest_buyer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_buyer_id'],
                },
                { constraintName: 'store_invoices_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_invoices_order_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_id'],
                },
                {
                    constraintName: 'store_invoices_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_invoices_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'buyer',
                    joins: [{ fromColumn: 'buyer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_buyer',
                    joins: [{ fromColumn: 'guest_buyer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'orders',
                    alias: 'order',
                    joins: [{ fromColumn: 'order_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'invoice_line_items',
                    alias: 'invoice_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'store_invoice_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                issued_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'issued_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                customer_message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'customer_message',
                    tsType: 'string',
                },
                order_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                buyer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'buyer_id',
                    tsType: 'string',
                },
                guest_buyer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_buyer_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_newsfeed: {
            primaryKey: { constraintName: 'store_newsfeed_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'store_newsfeed_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_newsfeed_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'store_newsfeed_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_newsfeed_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                likes: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'likes', tsType: 'number' },
                views: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'views', tsType: 'number' },
                type: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'type', tsType: 'number' },
                status: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'status', tsType: 'number' },
                display: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'display',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                destination: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'destination',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                post: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'post', tsType: 'string' },
                link: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'link', tsType: 'string' },
                image_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'image_url',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'product_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_notification_history: {
            primaryKey: {
                constraintName: 'store_notification_history_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'store_notification_history_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'store_notification_history_listing_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['listing_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'listing',
                    joins: [{ fromColumn: 'listing_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                from: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'from', tsType: 'number' },
                to: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'to', tsType: 'number' },
                seen: { dbType: 'bool', columnDefault: null, nullable: true, columnName: 'seen', tsType: 'boolean' },
                action: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'action', tsType: 'number' },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                email_status: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'email_status',
                    tsType: 'number',
                },
                device_notification_sent: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'device_notification_sent',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                image: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'image', tsType: 'string' },
                link: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'link', tsType: 'string' },
                message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'message',
                    tsType: 'string',
                },
                listing_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'listing_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_notifications: {
            primaryKey: {
                constraintName: 'store_notifications_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_notifications_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_notifications_listing_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['listing_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'listing',
                    joins: [{ fromColumn: 'listing_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                from: { dbType: 'int8', columnDefault: null, nullable: false, columnName: 'from', tsType: 'number' },
                to: { dbType: 'int8', columnDefault: null, nullable: false, columnName: 'to', tsType: 'number' },
                seen: { dbType: 'bool', columnDefault: null, nullable: false, columnName: 'seen', tsType: 'boolean' },
                action: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'action',
                    tsType: 'number',
                },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                email_status: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'email_status',
                    tsType: 'number',
                },
                device_notification_sent: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'device_notification_sent',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                image: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'image', tsType: 'string' },
                link: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'link', tsType: 'string' },
                message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'message',
                    tsType: 'string',
                },
                listing_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'listing_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_offers: {
            primaryKey: { constraintName: 'store_offers_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'store_offers_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_offers_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'id', toColumn: 'store_offer_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                free_shipping: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'free_shipping',
                    tsType: 'boolean',
                },
                percentage_discount: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'percentage_discount',
                    tsType: 'number',
                },
                price_discount: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'price_discount',
                    tsType: 'number',
                },
                shipping_discount: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'shipping_discount',
                    tsType: 'number',
                },
                fixed_shipping: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'fixed_shipping',
                    tsType: 'number',
                },
                price_required: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'price_required',
                    tsType: 'number',
                },
                quantity_required: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'quantity_required',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                rule_option: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rule_option',
                    tsType: 'number',
                },
                offer_option: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'offer_option',
                    tsType: 'number',
                },
                offer_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'offer_type',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                promo_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'promo_code',
                    tsType: 'string',
                },
                quantity_limit: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'quantity_limit',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_online_days_in_week: {
            primaryKey: {
                constraintName: 'store_online_days_in_week_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'store_online_days_in_week_days_in_week_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['days_in_week_id'],
                },
                {
                    constraintName: 'store_online_days_in_week_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'store_online_days_in_week_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'days_in_week',
                    alias: 'days_in_week',
                    joins: [{ fromColumn: 'days_in_week_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                selected: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'selected',
                    tsType: 'boolean',
                },
                start_time_local: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'start_time_local',
                    tsType: 'number',
                },
                end_time_local: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'end_time_local',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                days_in_week_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'days_in_week_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_open_weekly: {
            primaryKey: {
                constraintName: 'store_open_weekly_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_open_weekly_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_open_weekly_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                day_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'day_id',
                    tsType: 'number',
                },
                start: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'start', tsType: 'number' },
                end: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'end', tsType: 'number' },
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_part_requests: {
            primaryKey: {
                constraintName: 'store_part_requests_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_part_requests_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_part_requests_part_request_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['part_request_id'],
                },
                {
                    constraintName: 'store_part_requests_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'part_requests',
                    alias: 'part_request',
                    joins: [{ fromColumn: 'part_request_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                part_request_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'part_request_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_policies: {
            primaryKey: { constraintName: 'store_policies_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'store_policies_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'store_store_policies',
                    alias: 'store_store_policies',
                    joins: [{ fromColumn: 'id', toColumn: 'store_policy_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'id', toColumn: 'default_store_policy_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                policy_type_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'policy_type_id',
                    tsType: 'number',
                },
                contact_made_days: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'contact_made_days',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                shipping_paid_by: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipping_paid_by',
                    tsType: 'string',
                },
                return_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'return_type',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_return_line_items: {
            primaryKey: {
                constraintName: 'store_return_line_items_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_return_line_items_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_return_line_items_order_line_item_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_line_item_id'],
                },
                {
                    constraintName: 'store_return_line_items_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_return_line_items_store_return_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_return_id'],
                },
                {
                    constraintName: 'store_return_line_items_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_item',
                    joins: [{ fromColumn: 'order_line_item_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_returns',
                    alias: 'store_return',
                    joins: [{ fromColumn: 'store_return_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                reason_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'reason_id',
                    tsType: 'number',
                },
                refund_amount: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'refund_amount',
                    tsType: 'number',
                },
                is_full_refund: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_full_refund',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                quantity: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'quantity',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                request_message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'request_message',
                    tsType: 'string',
                },
                response_message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'response_message',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                order_line_item_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_line_item_id',
                    tsType: 'string',
                },
                store_return_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_return_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_return_policies: {
            primaryKey: {
                constraintName: 'store_return_policies_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_return_policies_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_return_policies_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                accepted: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'accepted',
                    tsType: 'boolean',
                },
                contact_limit_days: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'contact_limit_days',
                    tsType: 'number',
                },
                shipping_paid_by: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'shipping_paid_by',
                    tsType: 'number',
                },
                replacement_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'replacement_type',
                    tsType: 'number',
                },
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_returns: {
            primaryKey: { constraintName: 'store_returns_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'store_returns_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_returns_order_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_id'],
                },
                {
                    constraintName: 'store_returns_return_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['return_address_id'],
                },
                {
                    constraintName: 'store_returns_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_returns_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'orders',
                    alias: 'order',
                    joins: [{ fromColumn: 'order_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'return_address',
                    joins: [{ fromColumn: 'return_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_return_line_items',
                    alias: 'store_return_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'store_return_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                returned_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'returned_at',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                received_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'received_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                customer_message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'customer_message',
                    tsType: 'string',
                },
                return_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'return_address_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                order_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_settings: {
            primaryKey: { constraintName: 'store_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'store_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'store_store_settings',
                    alias: 'store_store_settings',
                    joins: [{ fromColumn: 'id', toColumn: 'store_settings_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                class: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'class', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'alias', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_shipments: {
            primaryKey: { constraintName: 'store_shipments_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'store_shipments_buyer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['buyer_id'],
                },
                {
                    constraintName: 'store_shipments_guest_buyer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_buyer_id'],
                },
                { constraintName: 'store_shipments_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_shipments_order_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['order_id'],
                },
                {
                    constraintName: 'store_shipments_store_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_address_id'],
                },
                {
                    constraintName: 'store_shipments_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_shipments_user_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_address_id'],
                },
                {
                    constraintName: 'store_shipments_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'buyer',
                    joins: [{ fromColumn: 'buyer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_buyer',
                    joins: [{ fromColumn: 'guest_buyer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'orders',
                    alias: 'order',
                    joins: [{ fromColumn: 'order_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_address',
                    joins: [{ fromColumn: 'store_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'user_address',
                    joins: [{ fromColumn: 'user_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'shipment_line_items',
                    alias: 'shipment_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'store_shipment_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                status: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'status',
                    tsType: 'number',
                },
                packed_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'packed_at',
                    tsType: 'Date',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                shipped_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'shipped_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                tracking_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tracking_number',
                    tsType: 'string',
                },
                customer_message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'customer_message',
                    tsType: 'string',
                },
                order_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'order_id',
                    tsType: 'string',
                },
                user_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_address_id',
                    tsType: 'string',
                },
                store_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_address_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                buyer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'buyer_id',
                    tsType: 'string',
                },
                guest_buyer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_buyer_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_shipping_rules: {
            primaryKey: {
                constraintName: 'store_shipping_rules_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'store_shipping_rules_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                { constraintName: 'store_shipping_rules_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_shipping_rules_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                price: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'price', tsType: 'number' },
                min_weight_kg: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'min_weight_kg',
                    tsType: 'number',
                },
                max_weight_kg: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'max_weight_kg',
                    tsType: 'number',
                },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_specialities: {
            primaryKey: {
                constraintName: 'store_specialities_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'store_specialities_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'store_specialities_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'store_specialities_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                { constraintName: 'store_specialities_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_specialities_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_specialities_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
                {
                    constraintName: 'store_specialities_uvdb_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_model_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_model',
                    joins: [{ fromColumn: 'uvdb_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
                uvdb_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_model_id',
                    tsType: 'string',
                },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_store_policies: {
            primaryKey: {
                constraintName: 'store_store_policies_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_store_policies_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_store_policies_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_store_policies_store_policy_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_policy_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_policies',
                    alias: 'store_policy',
                    joins: [{ fromColumn: 'store_policy_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                store_policy_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_policy_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_store_settings: {
            primaryKey: {
                constraintName: 'store_store_settings_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_store_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_store_settings_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_store_settings_store_settings_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_settings_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_settings',
                    alias: 'store_settings',
                    joins: [{ fromColumn: 'store_settings_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                checked: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'checked',
                    tsType: 'boolean',
                },
                store_settings_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_settings_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                value: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'value', tsType: 'string' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_store_subscription: {
            primaryKey: {
                constraintName: 'store_store_subscription_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'store_store_subscription_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_store_subscription_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_store_subscription_store_subscription_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_subscription_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_subscriptions',
                    alias: 'store_subscription',
                    joins: [{ fromColumn: 'store_subscription_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                monthly: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'monthly',
                    tsType: 'number',
                },
                annually: {
                    dbType: 'float8',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'annually',
                    tsType: 'number',
                },
                trial_expires: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'trial_expires',
                    tsType: 'Date',
                },
                notification_status: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'notification_status',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                active: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'active',
                    tsType: 'boolean',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                store_subscription_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_subscription_id',
                    tsType: 'string',
                },
                admin_notes: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'admin_notes',
                    tsType: 'string',
                },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_subscriptions: {
            primaryKey: {
                constraintName: 'store_subscriptions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'store_subscriptions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'store_store_subscription',
                    alias: 'store_store_subscriptions',
                    joins: [{ fromColumn: 'id', toColumn: 'store_subscription_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                annually: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'annually',
                    tsType: 'number',
                },
                monthly: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'monthly',
                    tsType: 'number',
                },
                trial: { dbType: 'bool', columnDefault: null, nullable: false, columnName: 'trial', tsType: 'boolean' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                percentage: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'percentage',
                    tsType: 'number',
                },
                base_subscription: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'base_subscription',
                    tsType: 'boolean',
                },
                trial_length_days: {
                    dbType: 'int4',
                    columnDefault: '14',
                    nullable: false,
                    columnName: 'trial_length_days',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                access_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'access_code',
                    tsType: 'string',
                },
                group_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'group_name',
                    tsType: 'string',
                },
                access_group: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'access_group',
                    tsType: 'string',
                },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                bullet_points: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bullet_points',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        store_user: {
            primaryKey: { constraintName: 'store_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'store_user_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_user_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                { constraintName: 'store_user_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        store_uvdb_makes: {
            primaryKey: { constraintName: 'store_uvdb_makes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'store_uvdb_makes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'store_uvdb_makes_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'store_uvdb_makes_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        stores: {
            primaryKey: { constraintName: 'stores_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'stores_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'stores_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                {
                    constraintName: 'stores_default_shipping_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['default_shipping_address_id'],
                },
                {
                    constraintName: 'stores_default_store_policy_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['default_store_policy_id'],
                },
                { constraintName: 'stores_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'stores_primary_manager_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['primary_manager_id'],
                },
                {
                    constraintName: 'stores_store_offer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_offer_id'],
                },
                {
                    constraintName: 'stores_user_card_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_card_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'default_shipping_address',
                    joins: [{ fromColumn: 'default_shipping_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_policies',
                    alias: 'default_store_policy',
                    joins: [{ fromColumn: 'default_store_policy_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'primary_manager',
                    joins: [{ fromColumn: 'primary_manager_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'store_offers',
                    alias: 'store_offer',
                    joins: [{ fromColumn: 'store_offer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_cards',
                    alias: 'user_card',
                    joins: [{ fromColumn: 'user_card_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'analytics_stores',
                    alias: 'analytics_stores',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'api_access_keys',
                    alias: 'api_access_keys',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'carts',
                    alias: 'carts',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'concierge_site_pages',
                    alias: 'concierge_site_pages',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'data_changelogs',
                    alias: 'data_changelogs',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_implementations',
                    alias: 'external_api_implementations',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_imports',
                    alias: 'external_api_imports',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'file_import_feeds',
                    alias: 'file_import_feeds',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_defined_fitments',
                    alias: 'gapc_defined_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_entity_resolutions',
                    alias: 'gapc_entity_resolutions',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_images',
                    alias: 'gapc_images',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_interchange',
                    alias: 'gapc_part_interchanges',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'images',
                    alias: 'images',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'local_storage_locations',
                    alias: 'local_storage_locations',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_request_responses',
                    alias: 'part_request_responses',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'parts_to_base_vehicle',
                    alias: 'parts_to_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_audit_data',
                    alias: 'product_audit_datas',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_footers',
                    alias: 'product_footers',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_review_tag_counts',
                    alias: 'product_review_tag_counts',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_reviews',
                    alias: 'product_reviews',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustment_reasons',
                    alias: 'stock_adjustment_reasons',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustments',
                    alias: 'stock_adjustments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_addresses',
                    alias: 'store_addresses',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_categories',
                    alias: 'store_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_favourites',
                    alias: 'store_favourites',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_folders',
                    alias: 'store_folders',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_invoices',
                    alias: 'store_invoices',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_newsfeed',
                    alias: 'store_newsfeeds',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_offers',
                    alias: 'store_offers',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_online_days_in_week',
                    alias: 'store_online_days_in_weeks',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_open_weekly',
                    alias: 'store_open_weeklys',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_part_requests',
                    alias: 'store_part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_return_line_items',
                    alias: 'store_return_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_return_policies',
                    alias: 'store_return_policies',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_returns',
                    alias: 'store_returns',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipping_rules',
                    alias: 'store_shipping_rules',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_specialities',
                    alias: 'store_specialities',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_store_policies',
                    alias: 'store_store_policies',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_store_settings',
                    alias: 'store_store_settings',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_store_subscription',
                    alias: 'store_store_subscriptions',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_user',
                    alias: 'store_users',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_uvdb_makes',
                    alias: 'store_uvdb_makes',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_accounts',
                    alias: 'user_accounts',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_vouchers',
                    alias: 'user_vouchers',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'users',
                    alias: 'users',
                    joins: [{ fromColumn: 'id', toColumn: 'active_store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_entity_resolutions',
                    alias: 'uvdb_entity_resolutions',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'store_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                business_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'business_type',
                    tsType: 'number',
                },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                status: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'status', tsType: 'number' },
                ship_time_days: {
                    dbType: 'int4',
                    columnDefault: '4',
                    nullable: false,
                    columnName: 'ship_time_days',
                    tsType: 'number',
                },
                subscription_status: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'subscription_status',
                    tsType: 'number',
                },
                trial_expires: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'trial_expires',
                    tsType: 'Date',
                },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
                primary_phone: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'primary_phone',
                    tsType: 'string',
                },
                website: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'website',
                    tsType: 'string',
                },
                business_email: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'business_email',
                    tsType: 'string',
                },
                legal_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'legal_name',
                    tsType: 'string',
                },
                logo: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'logo', tsType: 'string' },
                primary_manager_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'primary_manager_id',
                    tsType: 'string',
                },
                cover_image: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cover_image',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                stripe_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stripe_id',
                    tsType: 'string',
                },
                bank_account_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bank_account_number',
                    tsType: 'string',
                },
                payment_email: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'payment_email',
                    tsType: 'string',
                },
                media_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'media_url',
                    tsType: 'string',
                },
                store_offer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_offer_id',
                    tsType: 'string',
                },
                custom_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'custom_url',
                    tsType: 'string',
                },
                policies: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'policies',
                    tsType: 'string',
                },
                faqs: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'faqs', tsType: 'string' },
                sendgrid_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_id',
                    tsType: 'string',
                },
                user_card_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_card_id',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                default_shipping_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'default_shipping_address_id',
                    tsType: 'string',
                },
                default_store_policy_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'default_store_policy_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_accounts: {
            primaryKey: { constraintName: 'user_accounts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'user_accounts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_accounts_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'user_accounts_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                active: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'active',
                    tsType: 'boolean',
                },
                amount: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'amount',
                    tsType: 'number',
                },
                amount_reversed: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'amount_reversed',
                    tsType: 'number',
                },
                destination_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'destination_type',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_actionables: {
            primaryKey: { constraintName: 'user_actionables_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'user_actionables_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_actionables_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_user_actionable',
                    alias: 'user_user_actionables',
                    joins: [{ fromColumn: 'id', toColumn: 'user_actionable_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'type', tsType: 'number' },
                step: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'step', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                subtitle: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'subtitle',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                url: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'url', tsType: 'string' },
                payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'payload',
                    tsType: 'string',
                },
                image: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'image', tsType: 'string' },
                severity: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'severity',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_addresses: {
            primaryKey: { constraintName: 'user_addresses_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'user_addresses_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'user_addresses_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'user_addresses_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_addresses_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'default_shipping_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'orders',
                    alias: 'billing_address_orders',
                    joins: [{ fromColumn: 'id', toColumn: 'billing_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'orders',
                    alias: 'shipping_address_orders',
                    joins: [{ fromColumn: 'id', toColumn: 'shipping_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'user_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'user_address_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'users',
                    alias: 'users',
                    joins: [{ fromColumn: 'id', toColumn: 'default_shipping_address_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                type: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'type', tsType: 'number' },
                status: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'status', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                lng: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lng', tsType: 'number' },
                lat: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lat', tsType: 'number' },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                is_shipping: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_shipping',
                    tsType: 'boolean',
                },
                is_billing: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_billing',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                unit: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'unit', tsType: 'string' },
                street_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'street_number',
                    tsType: 'string',
                },
                street_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'street_name',
                    tsType: 'string',
                },
                suburb: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'suburb', tsType: 'string' },
                city: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'city', tsType: 'string' },
                state: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'state', tsType: 'string' },
                postcode: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'postcode',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                mobile_phone: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mobile_phone',
                    tsType: 'string',
                },
                company: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'company',
                    tsType: 'string',
                },
                external_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_cards: {
            primaryKey: { constraintName: 'user_cards_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'user_cards_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'user_cards_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'id', toColumn: 'user_card_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'users',
                    alias: 'users',
                    joins: [{ fromColumn: 'id', toColumn: 'primary_card_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                stripe_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'stripe_id',
                    tsType: 'string',
                },
                card_brand: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'card_brand',
                    tsType: 'string',
                },
                card_last_four: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'card_last_four',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_devices: {
            primaryKey: { constraintName: 'user_devices_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'user_devices_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'user_devices_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_devices_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'analytics_categories',
                    alias: 'analytics_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'user_device_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_products',
                    alias: 'analytics_products',
                    joins: [{ fromColumn: 'id', toColumn: 'user_device_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_searches',
                    alias: 'analytics_searches',
                    joins: [{ fromColumn: 'id', toColumn: 'user_device_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_stores',
                    alias: 'analytics_stores',
                    joins: [{ fromColumn: 'id', toColumn: 'user_device_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                active: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'active',
                    tsType: 'boolean',
                },
                connected: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'connected',
                    tsType: 'boolean',
                },
                device_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'device_type',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                device_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'device_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_email_history: {
            primaryKey: {
                constraintName: 'user_email_history_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'user_email_history_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_email_history_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                send_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'send_count',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'alias', tsType: 'string' },
                historyable_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'historyable_id',
                    tsType: 'string',
                },
                historyable_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'historyable_type',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_feedbacks: {
            primaryKey: { constraintName: 'user_feedbacks_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'user_feedbacks_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_feedbacks_placer_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['placer_id'],
                },
                {
                    constraintName: 'user_feedbacks_product_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['product_id'],
                },
                {
                    constraintName: 'user_feedbacks_reciever_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['reciever_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'placer',
                    joins: [{ fromColumn: 'placer_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'products',
                    alias: 'product',
                    joins: [{ fromColumn: 'product_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'reciever',
                    joins: [{ fromColumn: 'reciever_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                rating: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'rating',
                    tsType: 'number',
                },
                display: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'display',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                type: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'type', tsType: 'number' },
                real_rating: {
                    dbType: 'int4',
                    columnDefault: '50',
                    nullable: false,
                    columnName: 'real_rating',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                placer_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'placer_id',
                    tsType: 'string',
                },
                reciever_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'reciever_id',
                    tsType: 'string',
                },
                product_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'product_id',
                    tsType: 'string',
                },
                comment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'comment',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_notification_history: {
            primaryKey: {
                constraintName: 'user_notification_history_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'user_notification_history_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'user_notification_history_listing_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['listing_id'],
                },
                {
                    constraintName: 'user_notification_history_to_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['to'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'products',
                    alias: 'listing',
                    joins: [{ fromColumn: 'listing_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                { toTable: 'users', alias: 'to_', joins: [{ fromColumn: 'to', toColumn: 'id' }], type: 'belongsTo' },
            ],
            columns: {
                from: { dbType: 'int8', columnDefault: null, nullable: true, columnName: 'from', tsType: 'number' },
                seen: { dbType: 'bool', columnDefault: null, nullable: true, columnName: 'seen', tsType: 'boolean' },
                action: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'action', tsType: 'number' },
                state: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'state', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                email_status: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'email_status',
                    tsType: 'number',
                },
                device_notification_sent: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'device_notification_sent',
                    tsType: 'boolean',
                },
                app_opened: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'app_opened',
                    tsType: 'boolean',
                },
                original_notification_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_notification_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                to: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'to', tsType: 'string' },
                image: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'image', tsType: 'string' },
                link: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'link', tsType: 'string' },
                message: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'message',
                    tsType: 'string',
                },
                listing_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'listing_id',
                    tsType: 'string',
                },
                title: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'title', tsType: 'string' },
                app_deeplink: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'app_deeplink',
                    tsType: 'string',
                },
                app_deeplink_payload: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'app_deeplink_payload',
                    tsType: 'string',
                },
                status: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'status', tsType: 'string' },
                email_link: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'email_link',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_referrals: {
            primaryKey: { constraintName: 'user_referrals_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'user_referrals_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_referrals_referred_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['referred_user_id'],
                },
                {
                    constraintName: 'user_referrals_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'referred_user',
                    joins: [{ fromColumn: 'referred_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                referred_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'referred_user_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_settings: {
            primaryKey: { constraintName: 'user_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'user_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'user_user_settings',
                    alias: 'user_user_settings',
                    joins: [{ fromColumn: 'id', toColumn: 'user_settings_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                class: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'class', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                alias: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'alias', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        user_site_feedback: {
            primaryKey: {
                constraintName: 'user_site_feedback_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'user_site_feedback_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_site_feedback_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                archived: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'archived',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                raw_data_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'raw_data_url',
                    tsType: 'string',
                },
                image_url: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'image_url',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                browser: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'browser',
                    tsType: 'string',
                },
                platform: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'platform',
                    tsType: 'string',
                },
                version: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'version',
                    tsType: 'string',
                },
                user_agent: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_agent',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_user_actionable: {
            primaryKey: {
                constraintName: 'user_user_actionable_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'user_user_actionable_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_user_actionable_user_actionable_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_actionable_id'],
                },
                {
                    constraintName: 'user_user_actionable_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'user_actionables',
                    alias: 'user_actionable',
                    joins: [{ fromColumn: 'user_actionable_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                seen_count: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'seen_count',
                    tsType: 'number',
                },
                skip_count: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'skip_count',
                    tsType: 'number',
                },
                done_count: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'done_count',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                user_actionable_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_actionable_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        user_user_settings: {
            primaryKey: {
                constraintName: 'user_user_settings_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'user_user_settings_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_user_settings_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'user_user_settings_user_settings_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_settings_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_settings',
                    alias: 'user_settings',
                    joins: [{ fromColumn: 'user_settings_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                checked: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'checked',
                    tsType: 'boolean',
                },
                user_settings_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_settings_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                value: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'value', tsType: 'string' },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        user_vouchers: {
            primaryKey: { constraintName: 'user_vouchers_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'user_vouchers_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                { constraintName: 'user_vouchers_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'user_vouchers_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'user_vouchers_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'orders',
                    alias: 'orders',
                    joins: [{ fromColumn: 'id', toColumn: 'voucher_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                active: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'active',
                    tsType: 'boolean',
                },
                value_initial: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'value_initial',
                    tsType: 'number',
                },
                value_remaining: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'value_remaining',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                charge_allgoods_card: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'charge_allgoods_card',
                    tsType: 'boolean',
                },
                expires: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'expires',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                code: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'code', tsType: 'string' },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        users: {
            primaryKey: { constraintName: 'users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'users_active_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['active_store_id'],
                },
                {
                    constraintName: 'users_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'users_currency_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['currency_id'],
                },
                {
                    constraintName: 'users_default_shipping_address_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['default_shipping_address_id'],
                },
                { constraintName: 'users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'users_primary_card_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['primary_card_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'active_store',
                    joins: [{ fromColumn: 'active_store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'currencies',
                    alias: 'currency',
                    joins: [{ fromColumn: 'currency_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'default_shipping_address',
                    joins: [{ fromColumn: 'default_shipping_address_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'user_cards',
                    alias: 'primary_card',
                    joins: [{ fromColumn: 'primary_card_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'analytics_categories',
                    alias: 'analytics_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_products',
                    alias: 'analytics_products',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_searches',
                    alias: 'analytics_searches',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_stores',
                    alias: 'analytics_stores',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'analytics_users',
                    alias: 'analytics_users',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'api_access_keys',
                    alias: 'api_access_keys',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'carts',
                    alias: 'carts',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'categories',
                    alias: 'categories',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'category_suggestions',
                    alias: 'category_suggestions',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'chat_sessions',
                    alias: 'chat_sessions',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'community_reports',
                    alias: 'community_reports',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'conversation_user',
                    alias: 'conversation_users',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'conversations',
                    alias: 'conversations',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'data_changelogs',
                    alias: 'data_changelogs',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'email_domain_blacklist',
                    alias: 'email_domain_blacklists',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'email_notification_history',
                    alias: 'email_notification_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'to' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_implementations',
                    alias: 'external_api_implementations',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'external_api_imports',
                    alias: 'external_api_imports',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'file_import_feeds',
                    alias: 'file_import_feeds',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'approved_by_user_gapc_brands',
                    joins: [{ fromColumn: 'id', toColumn: 'approved_by_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'user_gapc_brands',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_defined_fitments',
                    alias: 'gapc_defined_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'approved_by_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_entity_resolutions',
                    alias: 'gapc_entity_resolutions',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_images',
                    alias: 'gapc_images',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'approved_by_user_gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'approved_by_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_drafts',
                    alias: 'user_gapc_part_drafts',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'approved_by_user_gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'approved_by_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_parts',
                    alias: 'user_gapc_parts',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_tyres',
                    alias: 'gapc_tyres',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_wheels',
                    alias: 'gapc_wheels',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'guest_users',
                    alias: 'linked_user_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'linked_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'guest_users',
                    alias: 'owner_user_guest_users',
                    joins: [{ fromColumn: 'id', toColumn: 'owner_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'images',
                    alias: 'images',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'internal_tag_user',
                    alias: 'internal_tag_users',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'keywords',
                    alias: 'keywords',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'local_storage_locations',
                    alias: 'local_storage_locations',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'messages',
                    alias: 'messages',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'model_validations',
                    alias: 'model_validations',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'notes',
                    alias: 'notes',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'notifications',
                    alias: 'from_notifications',
                    joins: [{ fromColumn: 'id', toColumn: 'from' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'notifications',
                    alias: 'to_notifications',
                    joins: [{ fromColumn: 'id', toColumn: 'to' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'order_line_items',
                    alias: 'order_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'orders',
                    alias: 'orders',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_request_responses',
                    alias: 'part_request_responses',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'parts_to_base_vehicle',
                    alias: 'parts_to_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'approved_by_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_footers',
                    alias: 'product_footers',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_questions',
                    alias: 'product_questions',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_reviews',
                    alias: 'product_reviews',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'product_watchlist_user',
                    alias: 'product_watchlist_users',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'shipping_options',
                    alias: 'shipping_options',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustment_reasons',
                    alias: 'stock_adjustment_reasons',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stock_adjustments',
                    alias: 'stock_adjustments',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_favourites',
                    alias: 'store_favourites',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_invoices',
                    alias: 'buyer_store_invoices',
                    joins: [{ fromColumn: 'id', toColumn: 'buyer_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_invoices',
                    alias: 'user_store_invoices',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_newsfeed',
                    alias: 'store_newsfeeds',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_return_line_items',
                    alias: 'store_return_line_items',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_returns',
                    alias: 'store_returns',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'buyer_store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'buyer_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_shipments',
                    alias: 'user_store_shipments',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_user',
                    alias: 'store_users',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'stores',
                    alias: 'stores',
                    joins: [{ fromColumn: 'id', toColumn: 'primary_manager_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_accounts',
                    alias: 'user_accounts',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_actionables',
                    alias: 'user_actionables',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_addresses',
                    alias: 'user_addresses',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_cards',
                    alias: 'user_cards',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_devices',
                    alias: 'user_devices',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_email_history',
                    alias: 'user_email_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_feedbacks',
                    alias: 'placer_user_feedbacks',
                    joins: [{ fromColumn: 'id', toColumn: 'placer_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_feedbacks',
                    alias: 'reciever_user_feedbacks',
                    joins: [{ fromColumn: 'id', toColumn: 'reciever_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_notification_history',
                    alias: 'user_notification_historys',
                    joins: [{ fromColumn: 'id', toColumn: 'to' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_referrals',
                    alias: 'referred_user_user_referrals',
                    joins: [{ fromColumn: 'id', toColumn: 'referred_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_referrals',
                    alias: 'user_user_referrals',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_site_feedback',
                    alias: 'user_site_feedbacks',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_user_actionable',
                    alias: 'user_user_actionables',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_user_settings',
                    alias: 'user_user_settings',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'user_vouchers',
                    alias: 'user_vouchers',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'uvdb_engine_designations',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_entity_resolutions',
                    alias: 'uvdb_entity_resolutions',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_makes',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_models',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodels',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_wheel_configs',
                    alias: 'uvdb_wheel_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_wheels',
                    alias: 'uvdb_wheels',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'creator_user_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'creator_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'user_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'approved_by_user_vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'approved_by_user_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'user_vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'user_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                class: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'class', tsType: 'number' },
                type: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'type', tsType: 'number' },
                message_state: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'message_state',
                    tsType: 'number',
                },
                notification_state: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'notification_state',
                    tsType: 'number',
                },
                login_attempts: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'login_attempts',
                    tsType: 'number',
                },
                lang: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'lang', tsType: 'number' },
                timeout: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'timeout',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                trial_ends_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'trial_ends_at',
                    tsType: 'Date',
                },
                age: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'age', tsType: 'number' },
                gender: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'gender', tsType: 'number' },
                view_restricted: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'view_restricted',
                    tsType: 'boolean',
                },
                auction_limit: {
                    dbType: 'int4',
                    columnDefault: '100',
                    nullable: false,
                    columnName: 'auction_limit',
                    tsType: 'number',
                },
                status: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'status', tsType: 'number' },
                lng: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lng', tsType: 'number' },
                lat: { dbType: 'numeric', columnDefault: null, nullable: true, columnName: 'lat', tsType: 'number' },
                points: { dbType: 'int4', columnDefault: '0', nullable: false, columnName: 'points', tsType: 'number' },
                new_preference: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'new_preference',
                    tsType: 'number',
                },
                verification_level: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'verification_level',
                    tsType: 'number',
                },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                active_store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'active_store_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                first_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'first_name',
                    tsType: 'string',
                },
                last_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'last_name',
                    tsType: 'string',
                },
                username: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'username',
                    tsType: 'string',
                },
                mobile_phone: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mobile_phone',
                    tsType: 'string',
                },
                activation_key: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'activation_key',
                    tsType: 'string',
                },
                default_shipping_address_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'default_shipping_address_id',
                    tsType: 'string',
                },
                logo_image: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'logo_image',
                    tsType: 'string',
                },
                email: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'email', tsType: 'string' },
                password: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'password',
                    tsType: 'string',
                },
                remember_token: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'remember_token',
                    tsType: 'string',
                },
                stripe_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stripe_id',
                    tsType: 'string',
                },
                card_brand: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'card_brand',
                    tsType: 'string',
                },
                card_last_four: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'card_last_four',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                external_username: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'external_username',
                    tsType: 'string',
                },
                sendgrid_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'sendgrid_id',
                    tsType: 'string',
                },
                social_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'social_id',
                    tsType: 'string',
                },
                social_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'social_type',
                    tsType: 'string',
                },
                social_token: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'social_token',
                    tsType: 'string',
                },
                social_token_2: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'social_token_2',
                    tsType: 'string',
                },
                location_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'location_name',
                    tsType: 'string',
                },
                ip_address: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ip_address',
                    tsType: 'string',
                },
                primary_card_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'primary_card_id',
                    tsType: 'string',
                },
                custom_config: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'custom_config',
                    tsType: 'string',
                },
                currency_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'currency_id',
                    tsType: 'string',
                },
                origin: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'origin', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_aspirations: {
            primaryKey: { constraintName: 'uvdb_aspirations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_aspirations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'aspiration_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_aspiration_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_base_to_vehicle_definition: {
            primaryKey: {
                constraintName: 'uvdb_base_to_vehicle_definition_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_base_to_vehicle_definition_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['base_vehicle_id'],
                },
                {
                    constraintName: 'uvdb_base_to_vehicle_definition_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_base_to_vehicle_definition_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'base_vehicle',
                    joins: [{ fromColumn: 'base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'base_vehicle_id',
                    tsType: 'string',
                },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_base_vehicle_to_region: {
            primaryKey: {
                constraintName: 'uvdb_base_vehicle_to_region_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_base_vehicle_to_region_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['base_vehicle_id'],
                },
                {
                    constraintName: 'uvdb_base_vehicle_to_region_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_base_vehicle_to_region_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'base_vehicle',
                    joins: [{ fromColumn: 'base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'base_vehicle_id',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'region_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_base_vehicle_to_wheel_config: {
            primaryKey: {
                constraintName: 'uvdb_base_vehicle_to_wheel_config_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_base_vehicle_to_wheel_config_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['base_vehicle_id'],
                },
                {
                    constraintName: 'uvdb_base_vehicle_to_wheel_config_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_base_vehicle_to_wheel_config_uvdb_wheel_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'base_vehicle',
                    joins: [{ fromColumn: 'base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_configs',
                    alias: 'uvdb_wheel_config',
                    joins: [{ fromColumn: 'uvdb_wheel_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                uvdb_wheel_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'uvdb_wheel_config_id',
                    tsType: 'string',
                },
                base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'base_vehicle_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_base_vehicles: {
            primaryKey: {
                constraintName: 'uvdb_base_vehicles_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_base_vehicles_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_base_vehicles_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_base_vehicles_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['model_id'],
                },
                {
                    constraintName: 'uvdb_base_vehicles_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
                {
                    constraintName: 'uvdb_base_vehicles_year_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['year_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'model',
                    joins: [{ fromColumn: 'model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_years',
                    alias: 'year',
                    joins: [{ fromColumn: 'year_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'parts_to_base_vehicle',
                    alias: 'parts_to_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_to_vehicle_definition',
                    alias: 'uvdb_base_to_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_vehicle_to_region',
                    alias: 'uvdb_base_vehicle_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_vehicle_to_wheel_config',
                    alias: 'uvdb_base_vehicle_to_wheel_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicles',
                    alias: 'uvdb_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'base_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_base_vehicle_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'year_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                vcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_id',
                    tsType: 'number',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_id',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_bed_configs: {
            primaryKey: { constraintName: 'uvdb_bed_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'uvdb_bed_configs_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_length_id'],
                },
                {
                    constraintName: 'uvdb_bed_configs_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_type_id'],
                },
                { constraintName: 'uvdb_bed_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'bed_length',
                    joins: [{ fromColumn: 'bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'bed_type',
                    joins: [{ fromColumn: 'bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_length_id',
                    tsType: 'string',
                },
                bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_bed_lengths: {
            primaryKey: { constraintName: 'uvdb_bed_lengths_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_bed_lengths_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_bed_configs',
                    alias: 'uvdb_bed_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_length_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_length_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                length: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'length',
                    tsType: 'string',
                },
                length_metric: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'length_metric',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_bed_types: {
            primaryKey: { constraintName: 'uvdb_bed_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_bed_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_bed_configs',
                    alias: 'uvdb_bed_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'bed_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_bed_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_body_num_doors: {
            primaryKey: {
                constraintName: 'uvdb_body_num_doors_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_body_num_doors_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_body_style_configs',
                    alias: 'uvdb_body_style_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'body_num_doors_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_num_doors_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_body_style_configs: {
            primaryKey: {
                constraintName: 'uvdb_body_style_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_body_style_configs_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_num_doors_id'],
                },
                {
                    constraintName: 'uvdb_body_style_configs_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_type_id'],
                },
                { constraintName: 'uvdb_body_style_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'body_num_doors',
                    joins: [{ fromColumn: 'body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'body_type',
                    joins: [{ fromColumn: 'body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'body_style_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_bodys',
                    alias: 'uvdb_vin_bodys',
                    joins: [{ fromColumn: 'id', toColumn: 'body_style_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_num_doors_id',
                    tsType: 'string',
                },
                body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_body_types: {
            primaryKey: { constraintName: 'uvdb_body_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_body_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_body_style_configs',
                    alias: 'uvdb_body_style_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'body_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_body_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                is_popular: {
                    dbType: 'bool',
                    columnDefault: 'true',
                    nullable: false,
                    columnName: 'is_popular',
                    tsType: 'boolean',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_brake_abs: {
            primaryKey: { constraintName: 'uvdb_brake_abs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_brake_abs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_brake_configs',
                    alias: 'uvdb_brake_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_abs_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_abs_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_brake_configs: {
            primaryKey: {
                constraintName: 'uvdb_brake_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_brake_configs_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_abs_id'],
                },
                {
                    constraintName: 'uvdb_brake_configs_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_system_id'],
                },
                {
                    constraintName: 'uvdb_brake_configs_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_brake_type_id'],
                },
                { constraintName: 'uvdb_brake_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_brake_configs_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_brake_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'brake_abs',
                    joins: [{ fromColumn: 'brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'brake_system',
                    joins: [{ fromColumn: 'brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'front_brake_type',
                    joins: [{ fromColumn: 'front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'rear_brake_type',
                    joins: [{ fromColumn: 'rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_brake_type_id',
                    tsType: 'string',
                },
                rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_brake_type_id',
                    tsType: 'string',
                },
                brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_system_id',
                    tsType: 'string',
                },
                brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_abs_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_brake_systems: {
            primaryKey: {
                constraintName: 'uvdb_brake_systems_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_brake_systems_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_brake_configs',
                    alias: 'uvdb_brake_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'brake_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_brake_system_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_brake_types: {
            primaryKey: { constraintName: 'uvdb_brake_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_brake_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_front_brake_type_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_rear_brake_type_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'uvdb_front_brake_type_gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'uvdb_rear_brake_type_gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_front_brake_type_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_rear_brake_type_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_brake_configs',
                    alias: 'front_brake_type_uvdb_brake_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_brake_configs',
                    alias: 'rear_brake_type_uvdb_brake_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'front_brake_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'rear_brake_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'front_brake_type_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'rear_brake_type_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'front_brake_type_uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'rear_brake_type_uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'uvdb_front_brake_type_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_brake_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'uvdb_rear_brake_type_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_brake_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_cylinder_head_types: {
            primaryKey: {
                constraintName: 'uvdb_cylinder_head_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_cylinder_head_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'cylinder_head_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_cylinder_head_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'cylinder_head_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_cylinder_head_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_designation_to_vehicle_definition: {
            primaryKey: {
                constraintName: 'uvdb_designation_to_vehicle_definition_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_designation_to_vehicle_definiti_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_designation_id'],
                },
                {
                    constraintName: 'uvdb_designation_to_vehicle_definition_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_designation_to_vehicle_definiti_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'engine_designation',
                    joins: [{ fromColumn: 'engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'engine_designation_id',
                    tsType: 'string',
                },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_diagram_gapc_part_types: {
            primaryKey: {
                constraintName: 'uvdb_diagram_gapc_part_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_diagram_gapc_part_types_diagram_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['diagram_id'],
                },
                {
                    constraintName: 'uvdb_diagram_gapc_part_types_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'uvdb_diagram_gapc_part_types_gapc_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_position_id'],
                },
                {
                    constraintName: 'uvdb_diagram_gapc_part_types_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                {
                    constraintName: 'uvdb_diagram_gapc_part_types_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_diagrams',
                    alias: 'diagram',
                    joins: [{ fromColumn: 'diagram_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'gapc_position',
                    joins: [{ fromColumn: 'gapc_position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                is_draft: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_draft',
                    tsType: 'boolean',
                },
                quantity_required: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'quantity_required',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                diagram_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'diagram_code',
                    tsType: 'string',
                },
                diagram_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'diagram_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                draft_part_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_part_type_name',
                    tsType: 'string',
                },
                draft_subcategory_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_subcategory_name',
                    tsType: 'string',
                },
                draft_position_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_position_name',
                    tsType: 'string',
                },
                gapc_position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_position_id',
                    tsType: 'string',
                },
                coordinates: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'coordinates',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_diagrams: {
            primaryKey: { constraintName: 'uvdb_diagrams_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'uvdb_diagrams_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'uvdb_diagrams_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                { constraintName: 'uvdb_diagrams_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_fitment_groups',
                    alias: 'gapc_fitment_groups',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_diagram_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_diagram_gapc_part_types',
                    alias: 'uvdb_diagram_gapc_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'diagram_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                is_draft: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'is_draft',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                url: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'url', tsType: 'string' },
                coordinates: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'coordinates',
                    tsType: 'string',
                },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                draft_category_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_category_name',
                    tsType: 'string',
                },
                draft_subcategory_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'draft_subcategory_name',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_drive_types: {
            primaryKey: { constraintName: 'uvdb_drive_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_drive_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_drive_types',
                    alias: 'uvdb_vin_drive_types',
                    joins: [{ fromColumn: 'id', toColumn: 'drive_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_drive_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_bases: {
            primaryKey: {
                constraintName: 'uvdb_engine_bases_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_engine_bases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_base_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                liter: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'liter', tsType: 'string' },
                cc: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'cc', tsType: 'string' },
                cid: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'cid', tsType: 'string' },
                cylinders: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cylinders',
                    tsType: 'string',
                },
                block_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'block_type',
                    tsType: 'string',
                },
                bore_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bore_inch',
                    tsType: 'string',
                },
                bore_mm: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bore_mm',
                    tsType: 'string',
                },
                stroke_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stroke_inch',
                    tsType: 'string',
                },
                stroke_mm: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'stroke_mm',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_config_to_region: {
            primaryKey: {
                constraintName: 'uvdb_engine_config_to_region_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_engine_config_to_region_engine_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_config_id'],
                },
                {
                    constraintName: 'uvdb_engine_config_to_region_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_engine_config_to_region_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'engine_config',
                    joins: [{ fromColumn: 'engine_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                engine_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'engine_config_id',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'region_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_configs: {
            primaryKey: {
                constraintName: 'uvdb_engine_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_engine_configs_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['aspiration_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['cylinder_head_type_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_base_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_engine_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_definition_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_designation_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_mfr_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_version_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_vin_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_fuel_delivery_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_config_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_type_id'],
                },
                { constraintName: 'uvdb_engine_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_engine_configs_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['ignition_system_type_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_power_output_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['power_output_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_replaced_by_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['replaced_by_id'],
                },
                {
                    constraintName: 'uvdb_engine_configs_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valves_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'aspiration',
                    joins: [{ fromColumn: 'aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'cylinder_head_type',
                    joins: [{ fromColumn: 'cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'engine_base',
                    joins: [{ fromColumn: 'engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'engine_definition',
                    joins: [{ fromColumn: 'engine_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'engine_designation',
                    joins: [{ fromColumn: 'engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'engine_mfr',
                    joins: [{ fromColumn: 'engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'engine_version',
                    joins: [{ fromColumn: 'engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'engine_vin',
                    joins: [{ fromColumn: 'engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_configs',
                    alias: 'fuel_delivery_config',
                    joins: [{ fromColumn: 'fuel_delivery_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'fuel_type',
                    joins: [{ fromColumn: 'fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'ignition_system_type',
                    joins: [{ fromColumn: 'ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_power_outputs',
                    alias: 'power_output',
                    joins: [{ fromColumn: 'power_output_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'replaced_by',
                    joins: [{ fromColumn: 'replaced_by_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'valves',
                    joins: [{ fromColumn: 'valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_config_to_region',
                    alias: 'uvdb_engine_config_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'replaced_by_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vinengine_engineconfig',
                    alias: 'uvdb_vinengine_engineconfigs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                tmp_cylinders: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_cylinders',
                    tsType: 'number',
                },
                tmp_cc: { dbType: 'int4', columnDefault: null, nullable: true, columnName: 'tmp_cc', tsType: 'number' },
                tmp_valves_per_engine: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_valves_per_engine',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name2: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name2', tsType: 'string' },
                tmp_designation: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_designation',
                    tsType: 'string',
                },
                tmp_vin: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_vin',
                    tsType: 'string',
                },
                tmp_block_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_block_type',
                    tsType: 'string',
                },
                tmp_liter: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_liter',
                    tsType: 'string',
                },
                tmp_mfr: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_mfr',
                    tsType: 'string',
                },
                tmp_cylinder_head_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_cylinder_head_type',
                    tsType: 'string',
                },
                tmp_aspiration: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_aspiration',
                    tsType: 'string',
                },
                tmp_fuel_system_design: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_fuel_system_design',
                    tsType: 'string',
                },
                tmp_fuel_system_control_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_fuel_system_control_type',
                    tsType: 'string',
                },
                tmp_fuel_delivery_sub_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_fuel_delivery_sub_type',
                    tsType: 'string',
                },
                tmp_fuel_delivery_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_fuel_delivery_type',
                    tsType: 'string',
                },
                tmp_fuel_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_fuel_type',
                    tsType: 'string',
                },
                tmp_ignition_system: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_ignition_system',
                    tsType: 'string',
                },
                tmp_cid: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_cid',
                    tsType: 'string',
                },
                tmp_version: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_version',
                    tsType: 'string',
                },
                tmp_engine_stroke_mm: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_engine_stroke_mm',
                    tsType: 'string',
                },
                tmp_engine_stroke_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_engine_stroke_inch',
                    tsType: 'string',
                },
                tmp_engine_bore_mm: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_engine_bore_mm',
                    tsType: 'string',
                },
                tmp_engine_bore_inch: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tmp_engine_bore_inch',
                    tsType: 'string',
                },
                engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_designation_id',
                    tsType: 'string',
                },
                engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_vin_id',
                    tsType: 'string',
                },
                valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'valves_id',
                    tsType: 'string',
                },
                engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_base_id',
                    tsType: 'string',
                },
                fuel_delivery_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_config_id',
                    tsType: 'string',
                },
                aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aspiration_id',
                    tsType: 'string',
                },
                cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cylinder_head_type_id',
                    tsType: 'string',
                },
                fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_type_id',
                    tsType: 'string',
                },
                ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ignition_system_type_id',
                    tsType: 'string',
                },
                engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_mfr_id',
                    tsType: 'string',
                },
                engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_version_id',
                    tsType: 'string',
                },
                power_output_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'power_output_id',
                    tsType: 'string',
                },
                engine_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_definition_id',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                replaced_by_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'replaced_by_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_definition_designations: {
            primaryKey: {
                constraintName: 'uvdb_engine_definition_designations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_engine_definition_designations_engine_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_definition_id'],
                },
                {
                    constraintName: 'uvdb_engine_definition_designations_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_designation_id'],
                },
                {
                    constraintName: 'uvdb_engine_definition_designations_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'engine_definition',
                    joins: [{ fromColumn: 'engine_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'engine_designation',
                    joins: [{ fromColumn: 'engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                engine_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_definition_id',
                    tsType: 'string',
                },
                engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_designation_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_definitions: {
            primaryKey: {
                constraintName: 'uvdb_engine_definitions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_engine_definitions_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['aspiration_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['base_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['cylinder_head_type_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_engine_detail_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_detail_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_type_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_control_type_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_design_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_type_id'],
                },
                { constraintName: 'uvdb_engine_definitions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_engine_definitions_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['ignition_system_type_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['mfr_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_power_output_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['power_output_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valves_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['version_id'],
                },
                {
                    constraintName: 'uvdb_engine_definitions_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vin_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'aspiration',
                    joins: [{ fromColumn: 'aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'base',
                    joins: [{ fromColumn: 'base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'cylinder_head_type',
                    joins: [{ fromColumn: 'cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_details',
                    alias: 'engine_detail',
                    joins: [{ fromColumn: 'engine_detail_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'fuel_delivery_subtype',
                    joins: [{ fromColumn: 'fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'fuel_delivery_type',
                    joins: [{ fromColumn: 'fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'fuel_system_control_type',
                    joins: [{ fromColumn: 'fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'fuel_system_design',
                    joins: [{ fromColumn: 'fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'fuel_type',
                    joins: [{ fromColumn: 'fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'ignition_system_type',
                    joins: [{ fromColumn: 'ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'mfr',
                    joins: [{ fromColumn: 'mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_power_outputs',
                    alias: 'power_output',
                    joins: [{ fromColumn: 'power_output_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'valves',
                    joins: [{ fromColumn: 'valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'version',
                    joins: [{ fromColumn: 'version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'vin',
                    joins: [{ fromColumn: 'vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definition_designations',
                    alias: 'uvdb_engine_definition_designations',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_definition_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                from: { dbType: 'timestamp', columnDefault: null, nullable: true, columnName: 'from', tsType: 'Date' },
                to: { dbType: 'timestamp', columnDefault: null, nullable: true, columnName: 'to', tsType: 'Date' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                original_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_name',
                    tsType: 'string',
                },
                mfr_id: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'mfr_id', tsType: 'string' },
                version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'version_id',
                    tsType: 'string',
                },
                power_output_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'power_output_id',
                    tsType: 'string',
                },
                base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'base_id',
                    tsType: 'string',
                },
                vin_id: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'vin_id', tsType: 'string' },
                valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'valves_id',
                    tsType: 'string',
                },
                cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cylinder_head_type_id',
                    tsType: 'string',
                },
                fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_type_id',
                    tsType: 'string',
                },
                fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_control_type_id',
                    tsType: 'string',
                },
                fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_design_id',
                    tsType: 'string',
                },
                aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aspiration_id',
                    tsType: 'string',
                },
                fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_type_id',
                    tsType: 'string',
                },
                ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ignition_system_type_id',
                    tsType: 'string',
                },
                engine_detail_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_detail_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_designations: {
            primaryKey: {
                constraintName: 'uvdb_engine_designations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_engine_designations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_engine_designations_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_designation_to_vehicle_definition',
                    alias: 'uvdb_designation_to_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definition_designations',
                    alias: 'uvdb_engine_definition_designations',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_designation_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_designation_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
                original_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_name',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_details: {
            primaryKey: {
                constraintName: 'uvdb_engine_details_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_engine_details_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_detail_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                main_bearing_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'main_bearing_count',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                power_kw_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'power_kw_max',
                    tsType: 'number',
                },
                power_ps_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'power_ps_max',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                compression: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'compression',
                    tsType: 'string',
                },
                cooling_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cooling_type',
                    tsType: 'string',
                },
                emission_normal: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'emission_normal',
                    tsType: 'string',
                },
                engine_management: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_management',
                    tsType: 'string',
                },
                valve_management: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'valve_management',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_power_outputs: {
            primaryKey: {
                constraintName: 'uvdb_engine_power_outputs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_engine_power_outputs_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'power_output_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'power_output_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'power_output_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                kw: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'kw', tsType: 'number' },
                ps: { dbType: 'float8', columnDefault: null, nullable: true, columnName: 'ps', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_engine_versions: {
            primaryKey: {
                constraintName: 'uvdb_engine_versions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_engine_versions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_version_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_version_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_entity_resolutions: {
            primaryKey: {
                constraintName: 'uvdb_entity_resolutions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_entity_resolutions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_entity_resolutions_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'uvdb_entity_resolutions_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                match_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'match_type',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                value: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'value', tsType: 'string' },
                entity_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'entity_type',
                    tsType: 'string',
                },
                entity_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'entity_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_fuel_delivery_configs: {
            primaryKey: {
                constraintName: 'uvdb_fuel_delivery_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_fuel_delivery_configs_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'uvdb_fuel_delivery_configs_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_type_id'],
                },
                {
                    constraintName: 'uvdb_fuel_delivery_configs_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_control_type_id'],
                },
                {
                    constraintName: 'uvdb_fuel_delivery_configs_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_design_id'],
                },
                {
                    constraintName: 'uvdb_fuel_delivery_configs_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'fuel_delivery_subtype',
                    joins: [{ fromColumn: 'fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'fuel_delivery_type',
                    joins: [{ fromColumn: 'fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'fuel_system_control_type',
                    joins: [{ fromColumn: 'fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'fuel_system_design',
                    joins: [{ fromColumn: 'fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'fuel_delivery_type_id',
                    tsType: 'string',
                },
                fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_control_type_id',
                    tsType: 'string',
                },
                fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_design_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_fuel_delivery_subtypes: {
            primaryKey: {
                constraintName: 'uvdb_fuel_delivery_subtypes_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_fuel_delivery_subtypes_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_fuel_delivery_configs',
                    alias: 'uvdb_fuel_delivery_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_fuel_delivery_subtype_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'fuel_delivery_subtype_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_subtype_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_fuel_delivery_types: {
            primaryKey: {
                constraintName: 'uvdb_fuel_delivery_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_fuel_delivery_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_fuel_delivery_configs',
                    alias: 'uvdb_fuel_delivery_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_fuel_delivery_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'fuel_delivery_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_delivery_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_fuel_system_control_types: {
            primaryKey: {
                constraintName: 'uvdb_fuel_system_control_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_fuel_system_control_types_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_fuel_delivery_configs',
                    alias: 'uvdb_fuel_delivery_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_fuel_system_control_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'fuel_system_control_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_control_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_fuel_system_designs: {
            primaryKey: {
                constraintName: 'uvdb_fuel_system_designs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_fuel_system_designs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_fuel_delivery_configs',
                    alias: 'uvdb_fuel_delivery_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_fuel_system_design_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'fuel_system_design_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_system_design_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_system_design_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_fuel_types: {
            primaryKey: { constraintName: 'uvdb_fuel_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_fuel_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_fuel_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'fuel_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'fuel_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_fuel_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_i18n: {
            primaryKey: { constraintName: 'uvdb_i18n_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_i18n_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_i18n_countries',
                    alias: 'uvdb_i18n_countries',
                    joins: [{ fromColumn: 'id', toColumn: 'i18n_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                table_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'table_id',
                    tsType: 'string',
                },
                table_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'table_name',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_i18n_countries: {
            primaryKey: {
                constraintName: 'uvdb_i18n_countries_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_i18n_countries_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'uvdb_i18n_countries_i18n_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['i18n_id'],
                },
                { constraintName: 'uvdb_i18n_countries_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_i18n',
                    alias: 'i18n',
                    joins: [{ fromColumn: 'i18n_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                i18n_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'i18n_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_ignition_system_types: {
            primaryKey: {
                constraintName: 'uvdb_ignition_system_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_ignition_system_types_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'engine_ignition_system_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'ignition_system_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'ignition_system_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_ignition_system_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_make_to_region: {
            primaryKey: {
                constraintName: 'uvdb_make_to_region_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_make_to_region_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_make_to_region_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_make_to_region_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'region_id',
                    tsType: 'string',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_make_to_vehicle_subtype: {
            primaryKey: {
                constraintName: 'uvdb_make_to_vehicle_subtype_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_make_to_vehicle_subtype_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_make_to_vehicle_subtype_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_make_to_vehicle_subtype_vehicle_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_subtype_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_subtypes',
                    alias: 'vehicle_subtype',
                    joins: [{ fromColumn: 'vehicle_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                vehicle_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_subtype_id',
                    tsType: 'string',
                },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_makes: {
            primaryKey: { constraintName: 'uvdb_makes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_makes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'uvdb_makes_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'uvdb_makes_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_specialities',
                    alias: 'store_specialities',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_uvdb_makes',
                    alias: 'store_uvdb_makes',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_make_to_region',
                    alias: 'uvdb_make_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_make_to_vehicle_subtype',
                    alias: 'uvdb_make_to_vehicle_subtypes',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_models',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'uvdb_series',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_bodys',
                    alias: 'uvdb_vin_bodys',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_drive_types',
                    alias: 'uvdb_vin_drive_types',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'uvdb_vin_engines',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_models',
                    alias: 'uvdb_vin_models',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_plants',
                    alias: 'uvdb_vin_plants',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_restraints',
                    alias: 'uvdb_vin_restraints',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_transmissions',
                    alias: 'uvdb_vin_transmissions',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_wmis',
                    alias: 'uvdb_vin_wmis',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_years',
                    alias: 'uvdb_vin_years',
                    joins: [{ fromColumn: 'id', toColumn: 'make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_make_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                vcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_id',
                    tsType: 'number',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_mfr_body_code_vehicle_definition: {
            primaryKey: {
                constraintName: 'uvdb_mfr_body_code_vehicle_definition_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_mfr_body_code_vehicle_definition_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_mfr_body_code_vehicle_definition_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['mfr_body_code_id'],
                },
                {
                    constraintName: 'uvdb_mfr_body_code_vehicle_definitio_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'mfr_body_code',
                    joins: [{ fromColumn: 'mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mfr_body_code_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_mfr_body_codes: {
            primaryKey: {
                constraintName: 'uvdb_mfr_body_codes_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_mfr_body_codes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_mfr_body_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_mfr_body_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_mfr_body_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_mfr_body_code_vehicle_definition',
                    alias: 'uvdb_mfr_body_code_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'mfr_body_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'mfr_body_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'mfr_body_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_mfr_body_code_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_mfrs: {
            primaryKey: { constraintName: 'uvdb_mfrs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_mfrs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_engine_mfr_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_transmission_mfr_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'uvdb_engine_mfr_gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'uvdb_transmission_mfr_gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_engine_mfr_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_transmission_mfr_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmissions',
                    joins: [{ fromColumn: 'id', toColumn: 'mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'engine_mfr_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'transmission_mfr_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'engine_mfr_uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'transmission_mfr_uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'uvdb_vin_engines',
                    joins: [{ fromColumn: 'id', toColumn: 'mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'uvdb_engine_mfr_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_mfr_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'uvdb_transmission_mfr_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_model_vehicle_definition: {
            primaryKey: {
                constraintName: 'uvdb_model_vehicle_definition_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_model_vehicle_definition_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_model_vehicle_definition_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['model_id'],
                },
                {
                    constraintName: 'uvdb_model_vehicle_definition_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_models',
                    alias: 'model',
                    joins: [{ fromColumn: 'model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_models: {
            primaryKey: { constraintName: 'uvdb_models_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_models_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'uvdb_models_make_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['make_id'] },
                { constraintName: 'uvdb_models_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'uvdb_models_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'store_specialities',
                    alias: 'store_specialities',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_model_vehicle_definition',
                    alias: 'uvdb_model_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_models',
                    alias: 'uvdb_vin_models',
                    joins: [{ fromColumn: 'id', toColumn: 'model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_model_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_model_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                vcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_id',
                    tsType: 'number',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_oe_vehicle_definition_to_region: {
            primaryKey: {
                constraintName: 'uvdb_oe_vehicle_definition_to_region_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_oe_vehicle_definition_to_region_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definition_to_reg_oe_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['oe_vehicle_definition_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definition_to_region_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'oe_vehicle_definition',
                    joins: [{ fromColumn: 'oe_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                oe_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'oe_vehicle_definition_id',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'region_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_oe_vehicle_definitions: {
            primaryKey: {
                constraintName: 'uvdb_oe_vehicle_definitions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['aspiration_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_length_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_num_doors_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_abs_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_system_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['cylinder_head_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['drive_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_base_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_cylinder_head_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_definition_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_fuel_delivery_subtype_i_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_fuel_delivery_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_fuel_system_control_typ_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_fuel_system_control_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_fuel_system_design_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_fuel_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_ignition_system_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_mfr_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_version_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_vin_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_brake_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_spring_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_control_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_design_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['ignition_system_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['model_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_brake_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_spring_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_series_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['series_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_steering_side_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_side_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_system_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_type_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['submodel_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_base_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valves_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
                {
                    constraintName: 'uvdb_oe_vehicle_definitions_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'aspiration',
                    joins: [{ fromColumn: 'aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'bed_length',
                    joins: [{ fromColumn: 'bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'bed_type',
                    joins: [{ fromColumn: 'bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'body_num_doors',
                    joins: [{ fromColumn: 'body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'body_type',
                    joins: [{ fromColumn: 'body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'brake_abs',
                    joins: [{ fromColumn: 'brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'brake_system',
                    joins: [{ fromColumn: 'brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'cylinder_head_type',
                    joins: [{ fromColumn: 'cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'drive_type',
                    joins: [{ fromColumn: 'drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'engine_base',
                    joins: [{ fromColumn: 'engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'engine_cylinder_head_type',
                    joins: [{ fromColumn: 'engine_cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'engine_definition',
                    joins: [{ fromColumn: 'engine_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'engine_fuel_delivery_subtype',
                    joins: [{ fromColumn: 'engine_fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'engine_fuel_delivery_type',
                    joins: [{ fromColumn: 'engine_fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'engine_fuel_system_control_type',
                    joins: [{ fromColumn: 'engine_fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'engine_fuel_system_design',
                    joins: [{ fromColumn: 'engine_fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'engine_fuel_type',
                    joins: [{ fromColumn: 'engine_fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'engine_ignition_system_type',
                    joins: [{ fromColumn: 'engine_ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'engine_mfr',
                    joins: [{ fromColumn: 'engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'engine_version',
                    joins: [{ fromColumn: 'engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'engine_vin',
                    joins: [{ fromColumn: 'engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'front_brake_type',
                    joins: [{ fromColumn: 'front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'front_spring_type',
                    joins: [{ fromColumn: 'front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'fuel_delivery_subtype',
                    joins: [{ fromColumn: 'fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'fuel_delivery_type',
                    joins: [{ fromColumn: 'fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'fuel_system_control_type',
                    joins: [{ fromColumn: 'fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'fuel_system_design',
                    joins: [{ fromColumn: 'fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'fuel_type',
                    joins: [{ fromColumn: 'fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'ignition_system_type',
                    joins: [{ fromColumn: 'ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'model',
                    joins: [{ fromColumn: 'model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'rear_brake_type',
                    joins: [{ fromColumn: 'rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'rear_spring_type',
                    joins: [{ fromColumn: 'rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'series',
                    joins: [{ fromColumn: 'series_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_sides',
                    alias: 'steering_side',
                    joins: [{ fromColumn: 'steering_side_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'steering_system',
                    joins: [{ fromColumn: 'steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'steering_type',
                    joins: [{ fromColumn: 'steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'submodel',
                    joins: [{ fromColumn: 'submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'transmission_base',
                    joins: [{ fromColumn: 'transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'transmission',
                    joins: [{ fromColumn: 'transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'valves',
                    joins: [{ fromColumn: 'valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'wheel_base',
                    joins: [{ fromColumn: 'wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_fitment_groups',
                    alias: 'gapc_fitment_groups',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_oe_vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definition_to_region',
                    alias: 'uvdb_oe_vehicle_definition_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'oe_vehicle_definition_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                from_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'from_year_id',
                    tsType: 'number',
                },
                from_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'from_month_id',
                    tsType: 'number',
                },
                to_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'to_year_id',
                    tsType: 'number',
                },
                to_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'to_month_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                uvdb_draft_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_draft_vehicle_definition_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                image: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'image', tsType: 'string' },
                badge: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'badge', tsType: 'string' },
                make_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_name',
                    tsType: 'string',
                },
                model_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_name',
                    tsType: 'string',
                },
                series_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'series_name',
                    tsType: 'string',
                },
                family_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'family_name',
                    tsType: 'string',
                },
                submodel_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'submodel_names',
                    tsType: 'string',
                },
                origin_region_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'origin_region_name',
                    tsType: 'string',
                },
                steering_side_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_side_name',
                    tsType: 'string',
                },
                transmission_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_name',
                    tsType: 'string',
                },
                body_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_type_name',
                    tsType: 'string',
                },
                doors_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'doors_name',
                    tsType: 'string',
                },
                trim_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'trim_name',
                    tsType: 'string',
                },
                drive_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'drive_type_name',
                    tsType: 'string',
                },
                mfr_body_code_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mfr_body_code_names',
                    tsType: 'string',
                },
                engine_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_name',
                    tsType: 'string',
                },
                engine_designation_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_designation_names',
                    tsType: 'string',
                },
                engine_from_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_from_name',
                    tsType: 'string',
                },
                engine_to_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_to_name',
                    tsType: 'string',
                },
                engine_mfr_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_mfr_name',
                    tsType: 'string',
                },
                engine_version_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_version_name',
                    tsType: 'string',
                },
                engine_power_output_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_power_output_name',
                    tsType: 'string',
                },
                engine_liter_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_liter_name',
                    tsType: 'string',
                },
                engine_cc_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cc_name',
                    tsType: 'string',
                },
                engine_cylinders_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cylinders_name',
                    tsType: 'string',
                },
                engine_block_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_block_type_name',
                    tsType: 'string',
                },
                engine_vin_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_vin_name',
                    tsType: 'string',
                },
                engine_valves_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_valves_name',
                    tsType: 'string',
                },
                engine_cylinder_head_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cylinder_head_type_name',
                    tsType: 'string',
                },
                engine_fuel_delivery_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_delivery_type_name',
                    tsType: 'string',
                },
                engine_fuel_delivery_subtype_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_delivery_subtype_name',
                    tsType: 'string',
                },
                engine_fuel_system_control_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_system_control_type_name',
                    tsType: 'string',
                },
                engine_fuel_system_design_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_system_design_name',
                    tsType: 'string',
                },
                engine_aspiration_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_aspiration_name',
                    tsType: 'string',
                },
                engine_fuel_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_type_name',
                    tsType: 'string',
                },
                engine_ignition_system_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_ignition_system_type_name',
                    tsType: 'string',
                },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_id',
                    tsType: 'string',
                },
                series_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'series_id',
                    tsType: 'string',
                },
                submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'submodel_id',
                    tsType: 'string',
                },
                engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_base_id',
                    tsType: 'string',
                },
                engine_fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_delivery_type_id',
                    tsType: 'string',
                },
                engine_fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                engine_fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_system_control_type_id',
                    tsType: 'string',
                },
                engine_fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_system_design_id',
                    tsType: 'string',
                },
                engine_ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_ignition_system_type_id',
                    tsType: 'string',
                },
                engine_cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cylinder_head_type_id',
                    tsType: 'string',
                },
                engine_fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_type_id',
                    tsType: 'string',
                },
                engine_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_definition_id',
                    tsType: 'string',
                },
                drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'drive_type_id',
                    tsType: 'string',
                },
                body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_type_id',
                    tsType: 'string',
                },
                body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_num_doors_id',
                    tsType: 'string',
                },
                transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_id',
                    tsType: 'string',
                },
                bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_type_id',
                    tsType: 'string',
                },
                bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_length_id',
                    tsType: 'string',
                },
                brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_system_id',
                    tsType: 'string',
                },
                brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_abs_id',
                    tsType: 'string',
                },
                rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_brake_type_id',
                    tsType: 'string',
                },
                front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_brake_type_id',
                    tsType: 'string',
                },
                steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_type_id',
                    tsType: 'string',
                },
                steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_system_id',
                    tsType: 'string',
                },
                rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_spring_type_id',
                    tsType: 'string',
                },
                front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_spring_type_id',
                    tsType: 'string',
                },
                transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_base_id',
                    tsType: 'string',
                },
                fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_type_id',
                    tsType: 'string',
                },
                cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cylinder_head_type_id',
                    tsType: 'string',
                },
                ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ignition_system_type_id',
                    tsType: 'string',
                },
                fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_design_id',
                    tsType: 'string',
                },
                fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_control_type_id',
                    tsType: 'string',
                },
                fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_type_id',
                    tsType: 'string',
                },
                valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'valves_id',
                    tsType: 'string',
                },
                engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_version_id',
                    tsType: 'string',
                },
                engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_vin_id',
                    tsType: 'string',
                },
                engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_mfr_id',
                    tsType: 'string',
                },
                aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aspiration_id',
                    tsType: 'string',
                },
                wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'wheel_base_id',
                    tsType: 'string',
                },
                steering_side_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_side_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_region_to_valid_config: {
            primaryKey: {
                constraintName: 'uvdb_region_to_valid_config_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_region_to_valid_config_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_region_to_valid_config_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
                {
                    constraintName: 'uvdb_region_to_valid_config_valid_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valid_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'valid_config',
                    joins: [{ fromColumn: 'valid_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                valid_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'valid_config_id',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'region_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_regions: {
            primaryKey: { constraintName: 'uvdb_regions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_regions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_regions_parent_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['parent_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_regions',
                    alias: 'parent',
                    joins: [{ fromColumn: 'parent_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_origin_region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_origin_region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_vehicle_to_region',
                    alias: 'uvdb_base_vehicle_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_config_to_region',
                    alias: 'uvdb_engine_config_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_make_to_region',
                    alias: 'uvdb_make_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definition_to_region',
                    alias: 'uvdb_oe_vehicle_definition_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_region_to_valid_config',
                    alias: 'uvdb_region_to_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'uvdb_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'parent_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'origin_region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definition_to_region',
                    alias: 'uvdb_vehicle_definition_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'origin_region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_wmis',
                    alias: 'uvdb_vin_wmis',
                    joins: [{ fromColumn: 'id', toColumn: 'region_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_origin_region_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                numcode: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'numcode',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                parent_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'parent_id',
                    tsType: 'string',
                },
                region_abbr: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'region_abbr',
                    tsType: 'string',
                },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_restraint_types: {
            primaryKey: {
                constraintName: 'uvdb_restraint_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_restraint_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_restrictions: {
            primaryKey: {
                constraintName: 'uvdb_restrictions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_restrictions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_restriction1_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_restriction1_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_restriction2_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_restriction2_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_restriction3_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_restriction3_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_restriction1_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_restriction1_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_restriction2_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_restriction2_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_restriction3_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_restriction3_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'restriction1_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'restriction1_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'restriction2_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'restriction2_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'restriction3_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'restriction3_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                title: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'title', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_series: {
            primaryKey: { constraintName: 'uvdb_series_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_series_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'uvdb_series_make_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['make_id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_series_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_series_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'series_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'series_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'series_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_series_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'make_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_spring_type_configs: {
            primaryKey: {
                constraintName: 'uvdb_spring_type_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_spring_type_configs_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_spring_type_id'],
                },
                { constraintName: 'uvdb_spring_type_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_spring_type_configs_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_spring_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'front_spring_type',
                    joins: [{ fromColumn: 'front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'rear_spring_type',
                    joins: [{ fromColumn: 'rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'spring_type_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_spring_type_id',
                    tsType: 'string',
                },
                rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_spring_type_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_spring_types: {
            primaryKey: {
                constraintName: 'uvdb_spring_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_spring_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_front_spring_type_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'uvdb_rear_spring_type_gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'uvdb_front_spring_type_gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'uvdb_rear_spring_type_gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_front_spring_type_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'uvdb_rear_spring_type_gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'front_spring_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'rear_spring_type_uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_spring_type_configs',
                    alias: 'front_spring_type_uvdb_spring_type_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_spring_type_configs',
                    alias: 'rear_spring_type_uvdb_spring_type_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'front_spring_type_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'rear_spring_type_uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'front_spring_type_uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'rear_spring_type_uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'rear_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'uvdb_front_spring_type_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_front_spring_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'uvdb_rear_spring_type_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_rear_spring_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_standard_to_valid_config: {
            primaryKey: {
                constraintName: 'uvdb_standard_to_valid_config_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_standard_to_valid_config_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_standard_to_valid_config_valid_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valid_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'valid_config',
                    joins: [{ fromColumn: 'valid_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                standard_enum: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'standard_enum',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                valid_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'valid_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_steering_configs: {
            primaryKey: {
                constraintName: 'uvdb_steering_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_steering_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_steering_configs_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_system_id'],
                },
                {
                    constraintName: 'uvdb_steering_configs_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'steering_system',
                    joins: [{ fromColumn: 'steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'steering_type',
                    joins: [{ fromColumn: 'steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_type_id',
                    tsType: 'string',
                },
                steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_system_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_steering_sides: {
            primaryKey: {
                constraintName: 'uvdb_steering_sides_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_steering_sides_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_side_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_side_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_side_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_side_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_side_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_side_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_steering_systems: {
            primaryKey: {
                constraintName: 'uvdb_steering_systems_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_steering_systems_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_steering_configs',
                    alias: 'uvdb_steering_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_system_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_system_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_steering_types: {
            primaryKey: {
                constraintName: 'uvdb_steering_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_steering_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_steering_configs',
                    alias: 'uvdb_steering_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'steering_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_steering_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_submodel_vehicle_definition: {
            primaryKey: {
                constraintName: 'uvdb_submodel_vehicle_definition_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_submodel_vehicle_definition_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_submodel_vehicle_definition_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['submodel_id'],
                },
                {
                    constraintName: 'uvdb_submodel_vehicle_definition_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_submodels',
                    alias: 'submodel',
                    joins: [{ fromColumn: 'submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'submodel_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_submodels: {
            primaryKey: { constraintName: 'uvdb_submodels_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_submodels_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_submodels_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'uvdb_submodels_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_submodel_vehicle_definition',
                    alias: 'uvdb_submodel_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicles',
                    alias: 'uvdb_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_submodel_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_submodel_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                vcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_id',
                    tsType: 'number',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transfer_case_bases: {
            primaryKey: {
                constraintName: 'uvdb_transfer_case_bases_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_transfer_case_bases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                type: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'type',
                    tsType: 'string',
                },
                numspeeds: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'numspeeds',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transfer_cases: {
            primaryKey: {
                constraintName: 'uvdb_transfer_cases_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_transfer_cases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [],
            columns: {
                transfercase_base_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'transfercase_base_id',
                    tsType: 'number',
                },
                mfr_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'mfr_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                mfr_code: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'mfr_code',
                    tsType: 'string',
                },
                is_electronic_controlled: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'is_electronic_controlled',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmission_bases: {
            primaryKey: {
                constraintName: 'uvdb_transmission_bases_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_transmission_bases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_transmission_bases_transmission_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_control_type_id'],
                },
                {
                    constraintName: 'uvdb_transmission_bases_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_num_speeds_id'],
                },
                {
                    constraintName: 'uvdb_transmission_bases_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'transmission_control_type',
                    joins: [{ fromColumn: 'transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'transmission_num_speeds',
                    joins: [{ fromColumn: 'transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'transmission_type',
                    joins: [{ fromColumn: 'transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmissions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_base_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_type_id',
                    tsType: 'string',
                },
                transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_num_speeds_id',
                    tsType: 'string',
                },
                transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_control_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmission_control_types: {
            primaryKey: {
                constraintName: 'uvdb_transmission_control_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_transmission_control_types_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_bases',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_control_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_control_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmission_elec_controls: {
            primaryKey: {
                constraintName: 'uvdb_transmission_elec_controls_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_transmission_elec_controls_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_elec_control_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_elec_control_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_elec_control_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmissions',
                    joins: [{ fromColumn: 'id', toColumn: 'elec_control_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_elec_control_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_elec_control_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_elec_control_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmission_mfr_codes: {
            primaryKey: {
                constraintName: 'uvdb_transmission_mfr_codes_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_transmission_mfr_codes_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmissions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_mfr_code_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmission_num_speeds: {
            primaryKey: {
                constraintName: 'uvdb_transmission_num_speeds_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_transmission_num_speeds_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_bases',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_num_speeds_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::bpchar",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmission_types: {
            primaryKey: {
                constraintName: 'uvdb_transmission_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_transmission_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_bases',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_transmissions: {
            primaryKey: {
                constraintName: 'uvdb_transmissions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_transmissions_elec_control_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['elec_control_id'],
                },
                { constraintName: 'uvdb_transmissions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_transmissions_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['mfr_id'],
                },
                {
                    constraintName: 'uvdb_transmissions_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_base_id'],
                },
                {
                    constraintName: 'uvdb_transmissions_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_mfr_code_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'elec_control',
                    joins: [{ fromColumn: 'elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'mfr',
                    joins: [{ fromColumn: 'mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'transmission_base',
                    joins: [{ fromColumn: 'transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'transmission_mfr_code',
                    joins: [{ fromColumn: 'transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_transmissions',
                    alias: 'uvdb_vin_transmissions',
                    joins: [{ fromColumn: 'id', toColumn: 'transmission_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_transmission_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_base_id',
                    tsType: 'string',
                },
                transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_mfr_code_id',
                    tsType: 'string',
                },
                elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'elec_control_id',
                    tsType: 'string',
                },
                mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'mfr_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_valid_configs: {
            primaryKey: {
                constraintName: 'uvdb_valid_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_valid_configs_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['aspiration_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_length_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_num_doors_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_abs_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_system_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['cylinder_head_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['drive_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_base_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_designation_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_mfr_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_version_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_vin_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_brake_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_spring_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_control_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_design_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_type_id'],
                },
                { constraintName: 'uvdb_valid_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_valid_configs_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['ignition_system_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['mfr_body_code_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['model_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_origin_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['origin_region_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_brake_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_spring_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_restriction1_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['restriction1_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_restriction2_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['restriction2_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_restriction3_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['restriction3_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_series_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['series_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_steering_side_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_side_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_system_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['submodel_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_base_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_control_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_elec_control_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_elec_control_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_mfr_code_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_mfr_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_num_speeds_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valves_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
                {
                    constraintName: 'uvdb_valid_configs_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'aspiration',
                    joins: [{ fromColumn: 'aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'bed_length',
                    joins: [{ fromColumn: 'bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'bed_type',
                    joins: [{ fromColumn: 'bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'body_num_doors',
                    joins: [{ fromColumn: 'body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'body_type',
                    joins: [{ fromColumn: 'body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'brake_abs',
                    joins: [{ fromColumn: 'brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'brake_system',
                    joins: [{ fromColumn: 'brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'cylinder_head_type',
                    joins: [{ fromColumn: 'cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'drive_type',
                    joins: [{ fromColumn: 'drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'engine_base',
                    joins: [{ fromColumn: 'engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'engine_designation',
                    joins: [{ fromColumn: 'engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'engine_mfr',
                    joins: [{ fromColumn: 'engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'engine_version',
                    joins: [{ fromColumn: 'engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'engine_vin',
                    joins: [{ fromColumn: 'engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'front_brake_type',
                    joins: [{ fromColumn: 'front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'front_spring_type',
                    joins: [{ fromColumn: 'front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'fuel_delivery_subtype',
                    joins: [{ fromColumn: 'fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'fuel_delivery_type',
                    joins: [{ fromColumn: 'fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'fuel_system_control_type',
                    joins: [{ fromColumn: 'fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'fuel_system_design',
                    joins: [{ fromColumn: 'fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'fuel_type',
                    joins: [{ fromColumn: 'fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'ignition_system_type',
                    joins: [{ fromColumn: 'ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'mfr_body_code',
                    joins: [{ fromColumn: 'mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'model',
                    joins: [{ fromColumn: 'model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'origin_region',
                    joins: [{ fromColumn: 'origin_region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'rear_brake_type',
                    joins: [{ fromColumn: 'rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'rear_spring_type',
                    joins: [{ fromColumn: 'rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'restriction1',
                    joins: [{ fromColumn: 'restriction1_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'restriction2',
                    joins: [{ fromColumn: 'restriction2_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_restrictions',
                    alias: 'restriction3',
                    joins: [{ fromColumn: 'restriction3_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'series',
                    joins: [{ fromColumn: 'series_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_sides',
                    alias: 'steering_side',
                    joins: [{ fromColumn: 'steering_side_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'steering_system',
                    joins: [{ fromColumn: 'steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'steering_type',
                    joins: [{ fromColumn: 'steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'submodel',
                    joins: [{ fromColumn: 'submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'transmission_base',
                    joins: [{ fromColumn: 'transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'transmission_control_type',
                    joins: [{ fromColumn: 'transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'transmission_elec_control',
                    joins: [{ fromColumn: 'transmission_elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'transmission',
                    joins: [{ fromColumn: 'transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'transmission_mfr_code',
                    joins: [{ fromColumn: 'transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'transmission_mfr',
                    joins: [{ fromColumn: 'transmission_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'transmission_num_speeds',
                    joins: [{ fromColumn: 'transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'transmission_type',
                    joins: [{ fromColumn: 'transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'valves',
                    joins: [{ fromColumn: 'valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'wheel_base',
                    joins: [{ fromColumn: 'wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_region_to_valid_config',
                    alias: 'uvdb_region_to_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'valid_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_standard_to_valid_config',
                    alias: 'uvdb_standard_to_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'valid_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                from_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'from_year_id',
                    tsType: 'number',
                },
                from_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'from_month_id',
                    tsType: 'number',
                },
                to_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'to_year_id',
                    tsType: 'number',
                },
                to_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'to_month_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_id',
                    tsType: 'string',
                },
                submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'submodel_id',
                    tsType: 'string',
                },
                series_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'series_id',
                    tsType: 'string',
                },
                aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aspiration_id',
                    tsType: 'string',
                },
                engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_designation_id',
                    tsType: 'string',
                },
                engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_mfr_id',
                    tsType: 'string',
                },
                engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_vin_id',
                    tsType: 'string',
                },
                engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_version_id',
                    tsType: 'string',
                },
                valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'valves_id',
                    tsType: 'string',
                },
                engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_base_id',
                    tsType: 'string',
                },
                fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_type_id',
                    tsType: 'string',
                },
                fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_control_type_id',
                    tsType: 'string',
                },
                fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_design_id',
                    tsType: 'string',
                },
                ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ignition_system_type_id',
                    tsType: 'string',
                },
                cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cylinder_head_type_id',
                    tsType: 'string',
                },
                fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_type_id',
                    tsType: 'string',
                },
                drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'drive_type_id',
                    tsType: 'string',
                },
                mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mfr_body_code_id',
                    tsType: 'string',
                },
                transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_type_id',
                    tsType: 'string',
                },
                transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_control_type_id',
                    tsType: 'string',
                },
                transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_mfr_code_id',
                    tsType: 'string',
                },
                transmission_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_mfr_id',
                    tsType: 'string',
                },
                transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_num_speeds_id',
                    tsType: 'string',
                },
                transmission_elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_elec_control_id',
                    tsType: 'string',
                },
                transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_id',
                    tsType: 'string',
                },
                transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_base_id',
                    tsType: 'string',
                },
                front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_spring_type_id',
                    tsType: 'string',
                },
                rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_spring_type_id',
                    tsType: 'string',
                },
                steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_system_id',
                    tsType: 'string',
                },
                steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_type_id',
                    tsType: 'string',
                },
                front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_brake_type_id',
                    tsType: 'string',
                },
                rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_brake_type_id',
                    tsType: 'string',
                },
                brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_abs_id',
                    tsType: 'string',
                },
                brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_system_id',
                    tsType: 'string',
                },
                body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_type_id',
                    tsType: 'string',
                },
                body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_num_doors_id',
                    tsType: 'string',
                },
                bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_length_id',
                    tsType: 'string',
                },
                bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_type_id',
                    tsType: 'string',
                },
                wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'wheel_base_id',
                    tsType: 'string',
                },
                steering_side_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_side_id',
                    tsType: 'string',
                },
                origin_region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'origin_region_id',
                    tsType: 'string',
                },
                restriction1_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'restriction1_id',
                    tsType: 'string',
                },
                restriction2_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'restriction2_id',
                    tsType: 'string',
                },
                restriction3_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'restriction3_id',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_valves: {
            primaryKey: { constraintName: 'uvdb_valves_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_valves_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'valves_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_valves_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::bpchar",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicle_config_to_wheel: {
            primaryKey: {
                constraintName: 'uvdb_vehicle_config_to_wheel_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vehicle_config_to_wheel_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_vehicle_config_to_wheel_uvdb_wheel_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_config_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_config_to_wheel_vehicle_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_wheel_configs',
                    alias: 'uvdb_wheel_config',
                    joins: [{ fromColumn: 'uvdb_wheel_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'vehicle_config',
                    joins: [{ fromColumn: 'vehicle_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                uvdb_wheel_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'uvdb_wheel_config_id',
                    tsType: 'string',
                },
                vehicle_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicle_configs: {
            primaryKey: {
                constraintName: 'uvdb_vehicle_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vehicle_configs_bed_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_config_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_body_style_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_style_config_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_brake_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_config_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['drive_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_engine_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_config_id'],
                },
                { constraintName: 'uvdb_vehicle_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vehicle_configs_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['mfr_body_code_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_replaced_by_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['replaced_by_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_spring_type_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['spring_type_config_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_steering_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_config_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_configs_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_bed_configs',
                    alias: 'bed_config',
                    joins: [{ fromColumn: 'bed_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_style_configs',
                    alias: 'body_style_config',
                    joins: [{ fromColumn: 'body_style_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_configs',
                    alias: 'brake_config',
                    joins: [{ fromColumn: 'brake_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'drive_type',
                    joins: [{ fromColumn: 'drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'engine_config',
                    joins: [{ fromColumn: 'engine_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'mfr_body_code',
                    joins: [{ fromColumn: 'mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'replaced_by',
                    joins: [{ fromColumn: 'replaced_by_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_type_configs',
                    alias: 'spring_type_config',
                    joins: [{ fromColumn: 'spring_type_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_configs',
                    alias: 'steering_config',
                    joins: [{ fromColumn: 'steering_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'transmission',
                    joins: [{ fromColumn: 'transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicles',
                    alias: 'vehicle',
                    joins: [{ fromColumn: 'vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'wheel_base',
                    joins: [{ fromColumn: 'wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_config_to_wheel',
                    alias: 'uvdb_vehicle_config_to_wheels',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'replaced_by_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vinmodel_vehiclecfg',
                    alias: 'uvdb_vinmodel_vehiclecfgs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vinplant_vehicleconfig',
                    alias: 'uvdb_vinplant_vehicleconfigs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vinrestraint_vehiclecfg',
                    alias: 'uvdb_vinrestraint_vehiclecfgs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vinwmi_vehicleconfig',
                    alias: 'uvdb_vinwmi_vehicleconfigs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_id',
                    tsType: 'string',
                },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                bed_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_config_id',
                    tsType: 'string',
                },
                body_style_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'body_style_config_id',
                    tsType: 'string',
                },
                brake_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_config_id',
                    tsType: 'string',
                },
                drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'drive_type_id',
                    tsType: 'string',
                },
                engine_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'engine_config_id',
                    tsType: 'string',
                },
                mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mfr_body_code_id',
                    tsType: 'string',
                },
                spring_type_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'spring_type_config_id',
                    tsType: 'string',
                },
                steering_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_config_id',
                    tsType: 'string',
                },
                transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_id',
                    tsType: 'string',
                },
                wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'wheel_base_id',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                replaced_by_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'replaced_by_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicle_definition_to_region: {
            primaryKey: {
                constraintName: 'uvdb_vehicle_definition_to_region_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vehicle_definition_to_region_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definition_to_region_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definition_to_region_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'vehicle_definition',
                    joins: [{ fromColumn: 'vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_definition_id',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'region_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicle_definitions: {
            primaryKey: {
                constraintName: 'uvdb_vehicle_definitions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vehicle_definitions_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['aspiration_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_length_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['bed_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_num_doors_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_abs_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['brake_system_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['cylinder_head_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['drive_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_base_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_engine_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_definition_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_mfr_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_version_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_vin_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_brake_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['front_spring_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_delivery_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_control_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_system_design_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['fuel_type_id'],
                },
                { constraintName: 'uvdb_vehicle_definitions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vehicle_definitions_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['ignition_system_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['model_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_origin_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['origin_region_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_power_output_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['power_output_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_brake_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['rear_spring_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_series_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['series_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_steering_side_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_side_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_system_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['steering_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['submodel_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_base_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_control_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_elec_control_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_elec_control_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_mfr_code_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_mfr_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_num_speeds_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['valves_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
                {
                    constraintName: 'uvdb_vehicle_definitions_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['wheel_base_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'aspiration',
                    joins: [{ fromColumn: 'aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'bed_length',
                    joins: [{ fromColumn: 'bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'bed_type',
                    joins: [{ fromColumn: 'bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'body_num_doors',
                    joins: [{ fromColumn: 'body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'body_type',
                    joins: [{ fromColumn: 'body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'brake_abs',
                    joins: [{ fromColumn: 'brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'brake_system',
                    joins: [{ fromColumn: 'brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'cylinder_head_type',
                    joins: [{ fromColumn: 'cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'drive_type',
                    joins: [{ fromColumn: 'drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'engine_base',
                    joins: [{ fromColumn: 'engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'engine_definition',
                    joins: [{ fromColumn: 'engine_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'engine_mfr',
                    joins: [{ fromColumn: 'engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'engine_version',
                    joins: [{ fromColumn: 'engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'engine_vin',
                    joins: [{ fromColumn: 'engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'front_brake_type',
                    joins: [{ fromColumn: 'front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'front_spring_type',
                    joins: [{ fromColumn: 'front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'fuel_delivery_subtype',
                    joins: [{ fromColumn: 'fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'fuel_delivery_type',
                    joins: [{ fromColumn: 'fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'fuel_system_control_type',
                    joins: [{ fromColumn: 'fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'fuel_system_design',
                    joins: [{ fromColumn: 'fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'fuel_type',
                    joins: [{ fromColumn: 'fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'ignition_system_type',
                    joins: [{ fromColumn: 'ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'model',
                    joins: [{ fromColumn: 'model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'origin_region',
                    joins: [{ fromColumn: 'origin_region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_power_outputs',
                    alias: 'power_output',
                    joins: [{ fromColumn: 'power_output_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'rear_brake_type',
                    joins: [{ fromColumn: 'rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'rear_spring_type',
                    joins: [{ fromColumn: 'rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'series',
                    joins: [{ fromColumn: 'series_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_sides',
                    alias: 'steering_side',
                    joins: [{ fromColumn: 'steering_side_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'steering_system',
                    joins: [{ fromColumn: 'steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'steering_type',
                    joins: [{ fromColumn: 'steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'submodel',
                    joins: [{ fromColumn: 'submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'transmission_base',
                    joins: [{ fromColumn: 'transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'transmission_control_type',
                    joins: [{ fromColumn: 'transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'transmission_elec_control',
                    joins: [{ fromColumn: 'transmission_elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'transmission',
                    joins: [{ fromColumn: 'transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'transmission_mfr_code',
                    joins: [{ fromColumn: 'transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'transmission_mfr',
                    joins: [{ fromColumn: 'transmission_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'transmission_num_speeds',
                    joins: [{ fromColumn: 'transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'transmission_type',
                    joins: [{ fromColumn: 'transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'valves',
                    joins: [{ fromColumn: 'valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'wheel_base',
                    joins: [{ fromColumn: 'wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_defined_fitments',
                    alias: 'gapc_defined_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_groups',
                    alias: 'gapc_fitment_groups',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'part_requests',
                    alias: 'part_requests',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_to_vehicle_definition',
                    alias: 'uvdb_base_to_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_designation_to_vehicle_definition',
                    alias: 'uvdb_designation_to_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_mfr_body_code_vehicle_definition',
                    alias: 'uvdb_mfr_body_code_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_model_vehicle_definition',
                    alias: 'uvdb_model_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_submodel_vehicle_definition',
                    alias: 'uvdb_submodel_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definition_to_region',
                    alias: 'uvdb_vehicle_definition_to_regions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_definition_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_parts_mapper',
                    alias: 'vehicle_parts_mappers',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_definition_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                from_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'from_year_id',
                    tsType: 'number',
                },
                from_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'from_month_id',
                    tsType: 'number',
                },
                to_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'to_year_id',
                    tsType: 'number',
                },
                to_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'to_month_id',
                    tsType: 'number',
                },
                euro_car_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'euro_car_id',
                    tsType: 'number',
                },
                euro_commercial_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'euro_commercial_id',
                    tsType: 'number',
                },
                ebay_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ebay_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                euro_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'euro_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                badge: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'badge', tsType: 'string' },
                euro_badge: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'euro_badge',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_id',
                    tsType: 'string',
                },
                submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'submodel_id',
                    tsType: 'string',
                },
                series_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'series_id',
                    tsType: 'string',
                },
                drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'drive_type_id',
                    tsType: 'string',
                },
                body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_type_id',
                    tsType: 'string',
                },
                body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_num_doors_id',
                    tsType: 'string',
                },
                engine_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_definition_id',
                    tsType: 'string',
                },
                transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_id',
                    tsType: 'string',
                },
                bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_type_id',
                    tsType: 'string',
                },
                bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'bed_length_id',
                    tsType: 'string',
                },
                brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_system_id',
                    tsType: 'string',
                },
                brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'brake_abs_id',
                    tsType: 'string',
                },
                rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_brake_type_id',
                    tsType: 'string',
                },
                front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_brake_type_id',
                    tsType: 'string',
                },
                steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_type_id',
                    tsType: 'string',
                },
                steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_system_id',
                    tsType: 'string',
                },
                rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_spring_type_id',
                    tsType: 'string',
                },
                front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'front_spring_type_id',
                    tsType: 'string',
                },
                transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_base_id',
                    tsType: 'string',
                },
                fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_type_id',
                    tsType: 'string',
                },
                cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'cylinder_head_type_id',
                    tsType: 'string',
                },
                ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'ignition_system_type_id',
                    tsType: 'string',
                },
                fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_design_id',
                    tsType: 'string',
                },
                fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_system_control_type_id',
                    tsType: 'string',
                },
                fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'fuel_delivery_type_id',
                    tsType: 'string',
                },
                engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_base_id',
                    tsType: 'string',
                },
                valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'valves_id',
                    tsType: 'string',
                },
                engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_version_id',
                    tsType: 'string',
                },
                engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_vin_id',
                    tsType: 'string',
                },
                engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_mfr_id',
                    tsType: 'string',
                },
                power_output_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'power_output_id',
                    tsType: 'string',
                },
                aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'aspiration_id',
                    tsType: 'string',
                },
                steering_side_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'steering_side_id',
                    tsType: 'string',
                },
                wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'wheel_base_id',
                    tsType: 'string',
                },
                transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_type_id',
                    tsType: 'string',
                },
                transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_num_speeds_id',
                    tsType: 'string',
                },
                transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_control_type_id',
                    tsType: 'string',
                },
                transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_mfr_code_id',
                    tsType: 'string',
                },
                transmission_elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_elec_control_id',
                    tsType: 'string',
                },
                transmission_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_mfr_id',
                    tsType: 'string',
                },
                mfr_body_code_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mfr_body_code_names',
                    tsType: 'string',
                },
                series_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'series_name',
                    tsType: 'string',
                },
                submodel_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'submodel_names',
                    tsType: 'string',
                },
                model_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_names',
                    tsType: 'string',
                },
                engine_aspiration_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_aspiration_name',
                    tsType: 'string',
                },
                engine_version_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_version_names',
                    tsType: 'string',
                },
                engine_power_output_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_power_output_name',
                    tsType: 'string',
                },
                engine_power_output_name_ps: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_power_output_name_ps',
                    tsType: 'string',
                },
                engine_fuel_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_type_name',
                    tsType: 'string',
                },
                engine_liter_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_liter_name',
                    tsType: 'string',
                },
                engine_cc_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cc_name',
                    tsType: 'string',
                },
                engine_cid_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cid_name',
                    tsType: 'string',
                },
                engine_fuel_delivery_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_fuel_delivery_type_name',
                    tsType: 'string',
                },
                engine_cylinder_count_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_cylinder_count_name',
                    tsType: 'string',
                },
                engine_block_type_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_block_type_name',
                    tsType: 'string',
                },
                engine_valves_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_valves_name',
                    tsType: 'string',
                },
                engine_designation_names: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_designation_names',
                    tsType: 'string',
                },
                kba_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'kba_number',
                    tsType: 'string',
                },
                kbb_model: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'kbb_model',
                    tsType: 'string',
                },
                origin_region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'origin_region_id',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                euro_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'euro_name',
                    tsType: 'string',
                },
                euro_modelname: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'euro_modelname',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                import_table: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_table',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicle_subtypes: {
            primaryKey: {
                constraintName: 'uvdb_vehicle_subtypes_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_vehicle_subtypes_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vehicle_subtypes_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_make_to_vehicle_subtype',
                    alias: 'uvdb_make_to_vehicle_subtypes',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_subtype_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                vcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicle_types: {
            primaryKey: {
                constraintName: 'uvdb_vehicle_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_vehicle_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'categories',
                    alias: 'categories',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_categories',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_types',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategories',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_makes',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_models',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodels',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_subtypes',
                    alias: 'uvdb_vehicle_subtypes',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicles',
                    alias: 'uvdb_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vin_wmis',
                    alias: 'uvdb_vin_wmis',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_type_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_type_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                group_id: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'group_id',
                    tsType: 'boolean',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: {
                    dbType: 'text',
                    columnDefault: "''::character varying",
                    nullable: false,
                    columnName: 'name',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vehicles: {
            primaryKey: { constraintName: 'uvdb_vehicles_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'uvdb_vehicles_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['base_vehicle_id'],
                },
                { constraintName: 'uvdb_vehicles_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vehicles_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['submodel_id'],
                },
                {
                    constraintName: 'uvdb_vehicles_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'base_vehicle',
                    joins: [{ fromColumn: 'base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'submodel',
                    joins: [{ fromColumn: 'submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'parts_to_base_vehicle',
                    alias: 'parts_to_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_vehicle_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                vcdb_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vcdb_id',
                    tsType: 'number',
                },
                data_source_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'data_source_id',
                    tsType: 'number',
                },
                integrity_level: {
                    dbType: 'int4',
                    columnDefault: '0',
                    nullable: false,
                    columnName: 'integrity_level',
                    tsType: 'number',
                },
                deprecated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deprecated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'base_vehicle_id',
                    tsType: 'string',
                },
                submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'submodel_id',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_bodys: {
            primaryKey: { constraintName: 'uvdb_vin_bodys_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                {
                    constraintName: 'uvdb_vin_bodys_body_style_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['body_style_config_id'],
                },
                { constraintName: 'uvdb_vin_bodys_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_bodys_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_body_style_configs',
                    alias: 'body_style_config',
                    joins: [{ fromColumn: 'body_style_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                body_style_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_style_config_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_drive_types: {
            primaryKey: {
                constraintName: 'uvdb_vin_drive_types_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vin_drive_types_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['drive_type_id'],
                },
                { constraintName: 'uvdb_vin_drive_types_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_drive_types_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'drive_type',
                    joins: [{ fromColumn: 'drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'drive_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_engines: {
            primaryKey: { constraintName: 'uvdb_vin_engines_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_vin_engines_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_engines_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_vin_engines_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['mfr_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'mfr',
                    joins: [{ fromColumn: 'mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'uvdb_engine_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_engine_definitions',
                    alias: 'uvdb_engine_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'engine_vin_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vinengine_engineconfig',
                    alias: 'uvdb_vinengine_engineconfigs',
                    joins: [{ fromColumn: 'id', toColumn: 'vin_engine_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_engine_vin_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
                mfr_id: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'mfr_id', tsType: 'string' },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_locations: {
            primaryKey: {
                constraintName: 'uvdb_vin_locations_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [{ constraintName: 'uvdb_vin_locations_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vin_plants',
                    alias: 'uvdb_vin_plants',
                    joins: [{ fromColumn: 'id', toColumn: 'location_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                country: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'country',
                    tsType: 'string',
                },
                region: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'region',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_models: {
            primaryKey: { constraintName: 'uvdb_vin_models_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_vin_models_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_models_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_vin_models_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['model_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'model',
                    joins: [{ fromColumn: 'model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vinmodel_vehiclecfg',
                    alias: 'uvdb_vinmodel_vehiclecfgs',
                    joins: [{ fromColumn: 'id', toColumn: 'vin_model_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'model_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_plants: {
            primaryKey: { constraintName: 'uvdb_vin_plants_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_vin_plants_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_plants_location_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['location_id'],
                },
                {
                    constraintName: 'uvdb_vin_plants_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vin_locations',
                    alias: 'location',
                    joins: [{ fromColumn: 'location_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vinplant_vehicleconfig',
                    alias: 'uvdb_vinplant_vehicleconfigs',
                    joins: [{ fromColumn: 'id', toColumn: 'plant_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                location_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'location_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_restraints: {
            primaryKey: {
                constraintName: 'uvdb_vin_restraints_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_vin_restraints_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_restraints_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vinrestraint_vehiclecfg',
                    alias: 'uvdb_vinrestraint_vehiclecfgs',
                    joins: [{ fromColumn: 'id', toColumn: 'restraint_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'description',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_transmissions: {
            primaryKey: {
                constraintName: 'uvdb_vin_transmissions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_vin_transmissions_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_transmissions_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_vin_transmissions_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['transmission_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'transmission',
                    joins: [{ fromColumn: 'transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_wmis: {
            primaryKey: { constraintName: 'uvdb_vin_wmis_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_vin_wmis_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_wmis_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
                {
                    constraintName: 'uvdb_vin_wmis_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['region_id'],
                },
                {
                    constraintName: 'uvdb_vin_wmis_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_type_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'region',
                    joins: [{ fromColumn: 'region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'vehicle_type',
                    joins: [{ fromColumn: 'vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vinwmi_vehicleconfig',
                    alias: 'uvdb_vinwmi_vehicleconfigs',
                    joins: [{ fromColumn: 'id', toColumn: 'vin_wmi_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
                region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'region_id',
                    tsType: 'string',
                },
                manufacturer: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'manufacturer',
                    tsType: 'string',
                },
                vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vin_years: {
            primaryKey: { constraintName: 'uvdb_vin_years_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_vin_years_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vin_years_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['make_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_makes',
                    alias: 'make',
                    joins: [{ fromColumn: 'make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                year: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'year', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'make_id',
                    tsType: 'string',
                },
                vin_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_code',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vinengine_engineconfig: {
            primaryKey: {
                constraintName: 'uvdb_vinengine_engineconfig_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vinengine_engineconfig_engine_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['engine_config_id'],
                },
                {
                    constraintName: 'uvdb_vinengine_engineconfig_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_vinengine_engineconfig_vin_engine_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vin_engine_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_engine_configs',
                    alias: 'engine_config',
                    joins: [{ fromColumn: 'engine_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'vin_engine',
                    joins: [{ fromColumn: 'vin_engine_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vin_engine_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vin_engine_id',
                    tsType: 'string',
                },
                engine_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'engine_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vinmodel_vehiclecfg: {
            primaryKey: {
                constraintName: 'uvdb_vinmodel_vehiclecfg_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_vinmodel_vehiclecfg_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_vinmodel_vehiclecfg_vehicle_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_config_id'],
                },
                {
                    constraintName: 'uvdb_vinmodel_vehiclecfg_vin_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vin_model_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'vehicle_config',
                    joins: [{ fromColumn: 'vehicle_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_models',
                    alias: 'vin_model',
                    joins: [{ fromColumn: 'vin_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vin_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_model_id',
                    tsType: 'string',
                },
                vehicle_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vinplant_vehicleconfig: {
            primaryKey: {
                constraintName: 'uvdb_vinplant_vehicleconfig_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vinplant_vehicleconfig_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_vinplant_vehicleconfig_plant_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['plant_id'],
                },
                {
                    constraintName: 'uvdb_vinplant_vehicleconfig_vehicle_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vin_plants',
                    alias: 'plant',
                    joins: [{ fromColumn: 'plant_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'vehicle_config',
                    joins: [{ fromColumn: 'vehicle_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                plant_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'plant_id',
                    tsType: 'string',
                },
                vehicle_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vinrestraint_vehiclecfg: {
            primaryKey: {
                constraintName: 'uvdb_vinrestraint_vehiclecfg_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vinrestraint_vehiclecfg_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_vinrestraint_vehiclecfg_restraint_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['restraint_id'],
                },
                {
                    constraintName: 'uvdb_vinrestraint_vehiclecfg_vehicle_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vin_restraints',
                    alias: 'restraint',
                    joins: [{ fromColumn: 'restraint_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'vehicle_config',
                    joins: [{ fromColumn: 'vehicle_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                restraint_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'restraint_id',
                    tsType: 'string',
                },
                vehicle_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_vinwmi_vehicleconfig: {
            primaryKey: {
                constraintName: 'uvdb_vinwmi_vehicleconfig_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'uvdb_vinwmi_vehicleconfig_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['id'],
                },
                {
                    constraintName: 'uvdb_vinwmi_vehicleconfig_vehicle_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_config_id'],
                },
                {
                    constraintName: 'uvdb_vinwmi_vehicleconfig_vin_wmi_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vin_wmi_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'vehicle_config',
                    joins: [{ fromColumn: 'vehicle_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_wmis',
                    alias: 'vin_wmi',
                    joins: [{ fromColumn: 'vin_wmi_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                vin_wmi_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vin_wmi_id',
                    tsType: 'string',
                },
                vehicle_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'vehicle_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_wheel_bases: {
            primaryKey: { constraintName: 'uvdb_wheel_bases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_wheel_bases_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'gapc_config_fitments',
                    alias: 'gapc_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_draft_config_fitments',
                    alias: 'gapc_draft_config_fitments',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'gapc_fitment_group_configs',
                    alias: 'gapc_fitment_group_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_oe_vehicle_definitions',
                    alias: 'uvdb_oe_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_valid_configs',
                    alias: 'uvdb_valid_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_configs',
                    alias: 'uvdb_vehicle_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definitions',
                    joins: [{ fromColumn: 'id', toColumn: 'wheel_base_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'vehicle_instances',
                    alias: 'vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_base_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'name', tsType: 'string' },
                wheelbase: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'wheelbase',
                    tsType: 'string',
                },
                wheelbase_mm: {
                    dbType: 'text',
                    columnDefault: "''::text",
                    nullable: false,
                    columnName: 'wheelbase_mm',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_wheel_configs: {
            primaryKey: {
                constraintName: 'uvdb_wheel_configs_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                { constraintName: 'uvdb_wheel_configs_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'uvdb_wheel_configs_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicle_to_wheel_config',
                    alias: 'uvdb_base_vehicle_to_wheel_configs',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_vehicle_config_to_wheel',
                    alias: 'uvdb_vehicle_config_to_wheels',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_config_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'uvdb_wheels',
                    alias: 'uvdb_wheels',
                    joins: [{ fromColumn: 'id', toColumn: 'uvdb_wheel_config_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                supplier_created_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_created_at',
                    tsType: 'Date',
                },
                supplier_updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_updated_at',
                    tsType: 'Date',
                },
                stud_count: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'stud_count',
                    tsType: 'number',
                },
                pcd: { dbType: 'float8', columnDefault: null, nullable: false, columnName: 'pcd', tsType: 'number' },
                hub_size: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'hub_size',
                    tsType: 'number',
                },
                supplier_dtm_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_dtm_id',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                supplier_class_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_class_name',
                    tsType: 'string',
                },
                bolt_pattern_1: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'bolt_pattern_1',
                    tsType: 'string',
                },
                bolt_pattern_2: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'bolt_pattern_2',
                    tsType: 'string',
                },
                bolt_pattern_3: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'bolt_pattern_3',
                    tsType: 'string',
                },
                lug_nut: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'lug_nut',
                    tsType: 'string',
                },
                lug_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'lug_type',
                    tsType: 'string',
                },
                oem_offset: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'oem_offset',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_wheels: {
            primaryKey: { constraintName: 'uvdb_wheels_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [
                { constraintName: 'uvdb_wheels_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                { constraintName: 'uvdb_wheels_user_id_fkey', constraintType: 'FOREIGN KEY', columnNames: ['user_id'] },
                {
                    constraintName: 'uvdb_wheels_uvdb_wheel_config_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_config_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_configs',
                    alias: 'uvdb_wheel_config',
                    joins: [{ fromColumn: 'uvdb_wheel_config_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                supplier_created_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_created_at',
                    tsType: 'Date',
                },
                supplier_updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_updated_at',
                    tsType: 'Date',
                },
                is_heavy_duty: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_heavy_duty',
                    tsType: 'boolean',
                },
                is_big_brakes: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_big_brakes',
                    tsType: 'boolean',
                },
                is_runflat_tyre: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_runflat_tyre',
                    tsType: 'boolean',
                },
                is_tricky: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_tricky',
                    tsType: 'boolean',
                },
                is_self_sealing: {
                    dbType: 'bool',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'is_self_sealing',
                    tsType: 'boolean',
                },
                original_tyre_model_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_tyre_model_id',
                    tsType: 'number',
                },
                supplier_dtm_id: {
                    dbType: 'int8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_dtm_id',
                    tsType: 'number',
                },
                tyre_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tyre_width',
                    tsType: 'number',
                },
                tyre_ratio: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tyre_ratio',
                    tsType: 'number',
                },
                tyre_diameter: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'tyre_diameter',
                    tsType: 'number',
                },
                oem_wheel_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_wheel_width',
                    tsType: 'number',
                },
                oem_wheel_diameter: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_wheel_diameter',
                    tsType: 'number',
                },
                oem_wheel_diameter_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_wheel_diameter_max',
                    tsType: 'number',
                },
                oem_wheel_width_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_wheel_width_max',
                    tsType: 'number',
                },
                oem_wheel_offset_min: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_wheel_offset_min',
                    tsType: 'number',
                },
                oem_wheel_offset_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_wheel_offset_max',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                rear_tyre_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_tyre_width',
                    tsType: 'number',
                },
                rear_tyre_ratio: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_tyre_ratio',
                    tsType: 'number',
                },
                rear_tyre_diameter: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_tyre_diameter',
                    tsType: 'number',
                },
                oem_rear_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_rear_width',
                    tsType: 'number',
                },
                oem_rear_diameter: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_rear_diameter',
                    tsType: 'number',
                },
                oem_rear_offset: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_rear_offset',
                    tsType: 'number',
                },
                rear_oem_wheel_diameter: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_oem_wheel_diameter',
                    tsType: 'number',
                },
                rear_oem_wheel_diameter_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_oem_wheel_diameter_max',
                    tsType: 'number',
                },
                rear_oem_wheel_width: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_oem_wheel_width',
                    tsType: 'number',
                },
                rear_oem_wheel_width_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_oem_wheel_width_max',
                    tsType: 'number',
                },
                rear_oem_wheel_offset_min: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_oem_wheel_offset_min',
                    tsType: 'number',
                },
                rear_oem_wheel_offset_max: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'rear_oem_wheel_offset_max',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                supplier_class_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'supplier_class_name',
                    tsType: 'string',
                },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                oem_tyre_load_rating: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'oem_tyre_load_rating',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                uvdb_wheel_config_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_wheel_config_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
        uvdb_years: {
            primaryKey: { constraintName: 'uvdb_years_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
            keys: [{ constraintName: 'uvdb_years_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] }],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicles',
                    joins: [{ fromColumn: 'id', toColumn: 'year_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                id: { dbType: 'int4', columnDefault: null, nullable: false, columnName: 'id', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
            },
            softDelete: null,
            enums: {},
        },
        vehicle_instances: {
            primaryKey: {
                constraintName: 'vehicle_instances_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'vehicle_instances_country_code_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['country_code'],
                },
                {
                    constraintName: 'vehicle_instances_creator_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['creator_user_id'],
                },
                {
                    constraintName: 'vehicle_instances_guest_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['guest_user_id'],
                },
                { constraintName: 'vehicle_instances_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'vehicle_instances_main_image_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['main_image_id'],
                },
                {
                    constraintName: 'vehicle_instances_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'vehicle_instances_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_aspiration_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_aspiration_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_base_vehicle_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_base_vehicle_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_bed_length_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_length_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_bed_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_bed_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_body_num_doors_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_num_doors_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_body_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_body_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_brake_abs_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_abs_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_brake_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_brake_system_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_cylinder_head_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_cylinder_head_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_drive_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_drive_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_engine_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_base_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_designation_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_engine_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_mfr_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_engine_version_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_version_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_engine_vin_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_vin_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_front_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_brake_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_front_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_front_spring_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_fuel_delivery_subtype_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_subtype_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_fuel_delivery_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_delivery_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_fuel_system_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_control_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_fuel_system_design_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_system_design_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_fuel_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_fuel_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_ignition_system_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_ignition_system_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_mfr_body_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_mfr_body_code_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_model_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_origin_region_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_origin_region_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_rear_brake_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_brake_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_rear_spring_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_rear_spring_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_series_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_series_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_steering_side_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_side_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_steering_system_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_system_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_steering_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_steering_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_submodel_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_base_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_control_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_control_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_elec_control_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_elec_control_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_mfr_code_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_code_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_mfr_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_mfr_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_num_speeds_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_num_speeds_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_transmission_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_transmission_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_valves_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_valves_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_definition_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_vehicle_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_type_id'],
                },
                {
                    constraintName: 'vehicle_instances_uvdb_wheel_base_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_wheel_base_id'],
                },
                {
                    constraintName: 'vehicle_instances_vehicle_color_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['vehicle_color_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'countries',
                    alias: 'country_code_',
                    joins: [{ fromColumn: 'country_code', toColumn: 'num_code' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'creator_user',
                    joins: [{ fromColumn: 'creator_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'guest_users',
                    alias: 'guest_user',
                    joins: [{ fromColumn: 'guest_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'images',
                    alias: 'main_image',
                    joins: [{ fromColumn: 'main_image_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_aspirations',
                    alias: 'uvdb_aspiration',
                    joins: [{ fromColumn: 'uvdb_aspiration_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_base_vehicles',
                    alias: 'uvdb_base_vehicle',
                    joins: [{ fromColumn: 'uvdb_base_vehicle_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_lengths',
                    alias: 'uvdb_bed_length',
                    joins: [{ fromColumn: 'uvdb_bed_length_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_bed_types',
                    alias: 'uvdb_bed_type',
                    joins: [{ fromColumn: 'uvdb_bed_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_num_doors',
                    alias: 'uvdb_body_num_doors',
                    joins: [{ fromColumn: 'uvdb_body_num_doors_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_body_types',
                    alias: 'uvdb_body_type',
                    joins: [{ fromColumn: 'uvdb_body_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_abs',
                    alias: 'uvdb_brake_abs',
                    joins: [{ fromColumn: 'uvdb_brake_abs_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_systems',
                    alias: 'uvdb_brake_system',
                    joins: [{ fromColumn: 'uvdb_brake_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_cylinder_head_types',
                    alias: 'uvdb_cylinder_head_type',
                    joins: [{ fromColumn: 'uvdb_cylinder_head_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_drive_types',
                    alias: 'uvdb_drive_type',
                    joins: [{ fromColumn: 'uvdb_drive_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_bases',
                    alias: 'uvdb_engine_base',
                    joins: [{ fromColumn: 'uvdb_engine_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'uvdb_engine_designation',
                    joins: [{ fromColumn: 'uvdb_engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_engine_mfr',
                    joins: [{ fromColumn: 'uvdb_engine_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_versions',
                    alias: 'uvdb_engine_version',
                    joins: [{ fromColumn: 'uvdb_engine_version_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vin_engines',
                    alias: 'uvdb_engine_vin',
                    joins: [{ fromColumn: 'uvdb_engine_vin_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_front_brake_type',
                    joins: [{ fromColumn: 'uvdb_front_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_front_spring_type',
                    joins: [{ fromColumn: 'uvdb_front_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_subtypes',
                    alias: 'uvdb_fuel_delivery_subtype',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_subtype_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_delivery_types',
                    alias: 'uvdb_fuel_delivery_type',
                    joins: [{ fromColumn: 'uvdb_fuel_delivery_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_control_types',
                    alias: 'uvdb_fuel_system_control_type',
                    joins: [{ fromColumn: 'uvdb_fuel_system_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_system_designs',
                    alias: 'uvdb_fuel_system_design',
                    joins: [{ fromColumn: 'uvdb_fuel_system_design_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_fuel_types',
                    alias: 'uvdb_fuel_type',
                    joins: [{ fromColumn: 'uvdb_fuel_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_ignition_system_types',
                    alias: 'uvdb_ignition_system_type',
                    joins: [{ fromColumn: 'uvdb_ignition_system_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfr_body_codes',
                    alias: 'uvdb_mfr_body_code',
                    joins: [{ fromColumn: 'uvdb_mfr_body_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_model',
                    joins: [{ fromColumn: 'uvdb_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_regions',
                    alias: 'uvdb_origin_region',
                    joins: [{ fromColumn: 'uvdb_origin_region_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_brake_types',
                    alias: 'uvdb_rear_brake_type',
                    joins: [{ fromColumn: 'uvdb_rear_brake_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_spring_types',
                    alias: 'uvdb_rear_spring_type',
                    joins: [{ fromColumn: 'uvdb_rear_spring_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_series',
                    alias: 'uvdb_series',
                    joins: [{ fromColumn: 'uvdb_series_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_sides',
                    alias: 'uvdb_steering_side',
                    joins: [{ fromColumn: 'uvdb_steering_side_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_systems',
                    alias: 'uvdb_steering_system',
                    joins: [{ fromColumn: 'uvdb_steering_system_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_steering_types',
                    alias: 'uvdb_steering_type',
                    joins: [{ fromColumn: 'uvdb_steering_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodel',
                    joins: [{ fromColumn: 'uvdb_submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_bases',
                    alias: 'uvdb_transmission_base',
                    joins: [{ fromColumn: 'uvdb_transmission_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_control_types',
                    alias: 'uvdb_transmission_control_type',
                    joins: [{ fromColumn: 'uvdb_transmission_control_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_elec_controls',
                    alias: 'uvdb_transmission_elec_control',
                    joins: [{ fromColumn: 'uvdb_transmission_elec_control_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmissions',
                    alias: 'uvdb_transmission',
                    joins: [{ fromColumn: 'uvdb_transmission_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_mfr_codes',
                    alias: 'uvdb_transmission_mfr_code',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_code_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_mfrs',
                    alias: 'uvdb_transmission_mfr',
                    joins: [{ fromColumn: 'uvdb_transmission_mfr_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_num_speeds',
                    alias: 'uvdb_transmission_num_speeds',
                    joins: [{ fromColumn: 'uvdb_transmission_num_speeds_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_transmission_types',
                    alias: 'uvdb_transmission_type',
                    joins: [{ fromColumn: 'uvdb_transmission_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_valves',
                    alias: 'uvdb_valves',
                    joins: [{ fromColumn: 'uvdb_valves_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definition',
                    joins: [{ fromColumn: 'uvdb_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_types',
                    alias: 'uvdb_vehicle_type',
                    joins: [{ fromColumn: 'uvdb_vehicle_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_wheel_bases',
                    alias: 'uvdb_wheel_base',
                    joins: [{ fromColumn: 'uvdb_wheel_base_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_vehicle_colors',
                    alias: 'vehicle_color',
                    joins: [{ fromColumn: 'vehicle_color_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'images_to_vehicle_instances',
                    alias: 'images_to_vehicle_instances',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_instance_id' }],
                    type: 'hasMany',
                },
                {
                    toTable: 'products',
                    alias: 'products',
                    joins: [{ fromColumn: 'id', toColumn: 'vehicle_instance_id' }],
                    type: 'hasMany',
                },
            ],
            columns: {
                listing_type: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'listing_type',
                    tsType: 'number',
                },
                odometer: {
                    dbType: 'float8',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'odometer',
                    tsType: 'number',
                },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                deleted_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deleted_at',
                    tsType: 'Date',
                },
                country_code: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                gross_mass_kg: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gross_mass_kg',
                    tsType: 'number',
                },
                uvdb_year_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_year_id',
                    tsType: 'number',
                },
                uvdb_month_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_month_id',
                    tsType: 'number',
                },
                uvdb_restriction1_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction1_id',
                    tsType: 'number',
                },
                uvdb_restriction2_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction2_id',
                    tsType: 'number',
                },
                uvdb_restriction3_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_restriction3_id',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                custom_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'custom_name',
                    tsType: 'string',
                },
                vin_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vin_number',
                    tsType: 'string',
                },
                plate_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'plate_number',
                    tsType: 'string',
                },
                vin_shorthand: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vin_shorthand',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                vehicle_color_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'vehicle_color_id',
                    tsType: 'string',
                },
                uvdb_base_vehicle_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_base_vehicle_id',
                    tsType: 'string',
                },
                uvdb_submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_id',
                    tsType: 'string',
                },
                guest_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'guest_user_id',
                    tsType: 'string',
                },
                chassis_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'chassis_number',
                    tsType: 'string',
                },
                engine_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'engine_number',
                    tsType: 'string',
                },
                transmission_number: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_number',
                    tsType: 'string',
                },
                body_color: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_color',
                    tsType: 'string',
                },
                trim_color: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'trim_color',
                    tsType: 'string',
                },
                body_style: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'body_style',
                    tsType: 'string',
                },
                description: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'description',
                    tsType: 'string',
                },
                url_segment: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'url_segment',
                    tsType: 'string',
                },
                main_image_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'main_image_id',
                    tsType: 'string',
                },
                creator_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'creator_user_id',
                    tsType: 'string',
                },
                generated_name: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'generated_name',
                    tsType: 'string',
                },
                sku: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'sku', tsType: 'string' },
                class: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'class', tsType: 'string' },
                country_registration_year: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_registration_year',
                    tsType: 'string',
                },
                country_registration_month: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'country_registration_month',
                    tsType: 'string',
                },
                import_status: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_status',
                    tsType: 'string',
                },
                industry_class: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'industry_class',
                    tsType: 'string',
                },
                industry_model_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'industry_model_code',
                    tsType: 'string',
                },
                mvma_model_code: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'mvma_model_code',
                    tsType: 'string',
                },
                original_country: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'original_country',
                    tsType: 'string',
                },
                tla: { dbType: 'text', columnDefault: null, nullable: true, columnName: 'tla', tsType: 'string' },
                transmission_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'transmission_type',
                    tsType: 'string',
                },
                import_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'import_id',
                    tsType: 'string',
                },
                uvdb_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_definition_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
                uvdb_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_model_id',
                    tsType: 'string',
                },
                uvdb_series_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_series_id',
                    tsType: 'string',
                },
                uvdb_aspiration_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_aspiration_id',
                    tsType: 'string',
                },
                uvdb_engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_designation_id',
                    tsType: 'string',
                },
                uvdb_engine_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_mfr_id',
                    tsType: 'string',
                },
                uvdb_engine_vin_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_vin_id',
                    tsType: 'string',
                },
                uvdb_engine_version_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_version_id',
                    tsType: 'string',
                },
                uvdb_valves_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_valves_id',
                    tsType: 'string',
                },
                uvdb_engine_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_base_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_delivery_subtype_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_delivery_subtype_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_control_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_system_design_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_system_design_id',
                    tsType: 'string',
                },
                uvdb_ignition_system_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_ignition_system_type_id',
                    tsType: 'string',
                },
                uvdb_cylinder_head_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_cylinder_head_type_id',
                    tsType: 'string',
                },
                uvdb_fuel_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_fuel_type_id',
                    tsType: 'string',
                },
                uvdb_drive_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_drive_type_id',
                    tsType: 'string',
                },
                uvdb_mfr_body_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_mfr_body_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_control_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_control_type_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_code_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_code_id',
                    tsType: 'string',
                },
                uvdb_transmission_mfr_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_mfr_id',
                    tsType: 'string',
                },
                uvdb_transmission_num_speeds_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_num_speeds_id',
                    tsType: 'string',
                },
                uvdb_transmission_elec_control_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_elec_control_id',
                    tsType: 'string',
                },
                uvdb_transmission_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_id',
                    tsType: 'string',
                },
                uvdb_transmission_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_transmission_base_id',
                    tsType: 'string',
                },
                uvdb_front_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_spring_type_id',
                    tsType: 'string',
                },
                uvdb_rear_spring_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_spring_type_id',
                    tsType: 'string',
                },
                uvdb_steering_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_system_id',
                    tsType: 'string',
                },
                uvdb_steering_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_type_id',
                    tsType: 'string',
                },
                uvdb_front_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_front_brake_type_id',
                    tsType: 'string',
                },
                uvdb_rear_brake_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_rear_brake_type_id',
                    tsType: 'string',
                },
                uvdb_brake_abs_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_abs_id',
                    tsType: 'string',
                },
                uvdb_brake_system_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_brake_system_id',
                    tsType: 'string',
                },
                uvdb_body_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_type_id',
                    tsType: 'string',
                },
                uvdb_body_num_doors_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_body_num_doors_id',
                    tsType: 'string',
                },
                uvdb_bed_length_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_length_id',
                    tsType: 'string',
                },
                uvdb_bed_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_bed_type_id',
                    tsType: 'string',
                },
                uvdb_wheel_base_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_wheel_base_id',
                    tsType: 'string',
                },
                uvdb_steering_side_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_steering_side_id',
                    tsType: 'string',
                },
                uvdb_origin_region_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_origin_region_id',
                    tsType: 'string',
                },
                uvdb_vehicle_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'uvdb_vehicle_type_id',
                    tsType: 'string',
                },
            },
            softDelete: {
                dbType: 'timestamp',
                columnDefault: null,
                nullable: true,
                columnName: 'deleted_at',
                tsType: 'Date',
            },
            enums: {},
        },
        vehicle_parts_mapper: {
            primaryKey: {
                constraintName: 'vehicle_parts_mapper_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['id'],
            },
            keys: [
                {
                    constraintName: 'vehicle_parts_mapper_approved_by_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['approved_by_user_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_gapc_brand_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_brand_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_gapc_category_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_category_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_gapc_part_type_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_part_type_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_gapc_position_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_position_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_gapc_subcategory_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['gapc_subcategory_id'],
                },
                { constraintName: 'vehicle_parts_mapper_pkey', constraintType: 'PRIMARY KEY', columnNames: ['id'] },
                {
                    constraintName: 'vehicle_parts_mapper_store_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['store_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_user_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_uvdb_engine_designation_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_engine_designation_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_uvdb_make_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_make_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_uvdb_model_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_model_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_uvdb_submodel_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_submodel_id'],
                },
                {
                    constraintName: 'vehicle_parts_mapper_uvdb_vehicle_definition_id_fkey',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['uvdb_vehicle_definition_id'],
                },
            ],
            uniqueKeyCombinations: [['id']],
            nonUniqueKeyCombinations: [],
            relations: [
                {
                    toTable: 'users',
                    alias: 'approved_by_user',
                    joins: [{ fromColumn: 'approved_by_user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_brands',
                    alias: 'gapc_brand',
                    joins: [{ fromColumn: 'gapc_brand_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_categories',
                    alias: 'gapc_category',
                    joins: [{ fromColumn: 'gapc_category_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_part_types',
                    alias: 'gapc_part_type',
                    joins: [{ fromColumn: 'gapc_part_type_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_positions',
                    alias: 'gapc_position',
                    joins: [{ fromColumn: 'gapc_position_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'gapc_subcategories',
                    alias: 'gapc_subcategory',
                    joins: [{ fromColumn: 'gapc_subcategory_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'stores',
                    alias: 'store',
                    joins: [{ fromColumn: 'store_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_engine_designations',
                    alias: 'uvdb_engine_designation',
                    joins: [{ fromColumn: 'uvdb_engine_designation_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_makes',
                    alias: 'uvdb_make',
                    joins: [{ fromColumn: 'uvdb_make_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_models',
                    alias: 'uvdb_model',
                    joins: [{ fromColumn: 'uvdb_model_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_submodels',
                    alias: 'uvdb_submodel',
                    joins: [{ fromColumn: 'uvdb_submodel_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
                {
                    toTable: 'uvdb_vehicle_definitions',
                    alias: 'uvdb_vehicle_definition',
                    joins: [{ fromColumn: 'uvdb_vehicle_definition_id', toColumn: 'id' }],
                    type: 'belongsTo',
                },
            ],
            columns: {
                scope: { dbType: 'int4', columnDefault: '1', nullable: false, columnName: 'scope', tsType: 'number' },
                created_at: {
                    dbType: 'timestamp',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created_at',
                    tsType: 'Date',
                },
                updated_at: {
                    dbType: 'timestamp',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'updated_at',
                    tsType: 'Date',
                },
                is_universal_fit: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: false,
                    columnName: 'is_universal_fit',
                    tsType: 'boolean',
                },
                locale_id: {
                    dbType: 'int4',
                    columnDefault: '2',
                    nullable: false,
                    columnName: 'locale_id',
                    tsType: 'number',
                },
                country_code: {
                    dbType: 'int4',
                    columnDefault: '1',
                    nullable: false,
                    columnName: 'country_code',
                    tsType: 'number',
                },
                id: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'id', tsType: 'string' },
                name: { dbType: 'text', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                match_type: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'match_type',
                    tsType: 'string',
                },
                gapc_category_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_category_id',
                    tsType: 'string',
                },
                gapc_subcategory_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_subcategory_id',
                    tsType: 'string',
                },
                gapc_part_type_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_part_type_id',
                    tsType: 'string',
                },
                uvdb_model_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_model_id',
                    tsType: 'string',
                },
                uvdb_make_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_make_id',
                    tsType: 'string',
                },
                user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'string',
                },
                store_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'store_id',
                    tsType: 'string',
                },
                gapc_brand_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_brand_id',
                    tsType: 'string',
                },
                gapc_position_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'gapc_position_id',
                    tsType: 'string',
                },
                approved_by_user_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'approved_by_user_id',
                    tsType: 'string',
                },
                uvdb_submodel_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_submodel_id',
                    tsType: 'string',
                },
                uvdb_engine_designation_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_engine_designation_id',
                    tsType: 'string',
                },
                uvdb_vehicle_definition_id: {
                    dbType: 'text',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'uvdb_vehicle_definition_id',
                    tsType: 'string',
                },
            },
            softDelete: null,
            enums: {},
        },
    },
};
