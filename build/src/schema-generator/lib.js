"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeJSONFile = exports.writeJSFile = exports.writeTypescriptFile = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const config_1 = require("./config");
// @ts-ignore
const prettier_1 = require("prettier");
/**
 * Write to a typescript file
 * @param content
 * @param directory
 * @param filename
 */
function writeTypescriptFile(content, directory, filename) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileHeader = `
         /* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */
        
        /* eslint-disable */
    `;
        const file = filename + '.ts';
        // append creates files if they don't exist - write overwrites contents
        yield fs_extra_1.default.appendFile(path_1.default.join(directory, file), '');
        yield fs_extra_1.default.writeFile(path_1.default.join(directory, file), prettier_1.format(fileHeader + content, Object.assign({ parser: 'typescript' }, config_1.prettier)));
    });
}
exports.writeTypescriptFile = writeTypescriptFile;
/**
 * Write to a json file
 * @param content
 * @param directory
 * @param filename
 */
function writeJSFile(content, directory, filename) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileHeader = `
         /* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */
        
        /* eslint-disable */
    `;
        const file = filename + '.js';
        // append creates files if they don't exist - write overwrites contents
        yield fs_extra_1.default.appendFile(path_1.default.join(directory, file), '');
        yield fs_extra_1.default.writeFile(path_1.default.join(directory, file), prettier_1.format(fileHeader + content, Object.assign({ parser: 'javascript' }, config_1.prettier)));
    });
}
exports.writeJSFile = writeJSFile;
/**
 * Write to a js file
 * @param content
 * @param directory
 * @param filename
 */
function writeJSONFile(content, directory, filename) {
    return __awaiter(this, void 0, void 0, function* () {
        const file = filename + '.json';
        // append creates files if they don't exist - write overwrites contents
        yield fs_extra_1.default.appendFile(path_1.default.join(directory, file), '');
        yield fs_extra_1.default.writeFile(path_1.default.join(directory, file), prettier_1.format(JSON.stringify(content), Object.assign({ parser: 'json' }, config_1.prettier)));
    });
}
exports.writeJSONFile = writeJSONFile;
//# sourceMappingURL=lib.js.map