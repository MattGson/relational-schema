(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{61:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return l})),t.d(e,"metadata",(function(){return m})),t.d(e,"rightToc",(function(){return i})),t.d(e,"default",(function(){return r}));var a=t(2),s=t(6),o=(t(0),t(74)),l={id:"introduction",title:"Intro",hide_title:!0,sidebar_label:"Introduction"},m={unversionedId:"introduction",id:"introduction",isDocsHomePage:!0,title:"Intro",description:"npm",source:"@site/docs/introduction.md",permalink:"/relational-schema/docs/",editUrl:"https://github.com/MattGson/relational-schema/docs/docs/introduction.md",sidebar_label:"Introduction",sidebar:"someSidebar",next:{title:"Getting started",permalink:"/relational-schema/docs/installation"}},i=[{value:"Why relational-schema?",id:"why-relational-schema",children:[]},{value:"Usage",id:"usage",children:[]}],u={rightToc:i};function r(n){var e=n.components,t=Object(s.a)(n,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/relational-schema"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/npm/v/relational-schema.svg?style=for-the-badge",alt:"npm"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/MattGson/relational-schema"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/github/tag/MattGson/relational-schema.svg?style=for-the-badge",alt:"GitHub tag"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/MattGson/relational-schema/commits"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/github/stars/MattGson/relational-schema.svg?style=for-the-badge&logo=github&logoColor=ffffff",alt:"Github last commit"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/MattGson/relational-schema"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=for-the-badge",alt:"Pull Requests Welcome"})))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Easily work with relational databases in Javascript and Typescript"))),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://mattgson.github.io/relational-schema/"}),"relational-schema")," is a utility package to generate a semantic,\ncomplete schema of a relational database (PostgreSQL, MySQL) in Javascript."),Object(o.b)("p",null,"relational-schema is built on top of trusted open-source projects:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/knex/knex"}),"Knex"))),Object(o.b)("p",null,"Works with MySQL and PostgreSQL. SQLite coming soon."),Object(o.b)("p",null,"Full docs ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://mattgson.github.io/relational-schema/"}),"here")),Object(o.b)("h3",{id:"why-relational-schema"},"Why relational-schema?"),Object(o.b)("p",null,"One of the key benefits of working with relational databases is the strict schema.\nOften in our applications we fail to take advantage of this, instead we rely on handwritten simplifications\nsuch as ORM models."),Object(o.b)("p",null,"relational-schema gives TS/JS developers a complete database schema including some nice additions (see below for specs).\nThe schema can be output in ",Object(o.b)("inlineCode",{parentName:"p"},"json"),", ",Object(o.b)("inlineCode",{parentName:"p"},"es6"),", ",Object(o.b)("inlineCode",{parentName:"p"},"typescript")," and ",Object(o.b)("inlineCode",{parentName:"p"},"commonJS")," to suit multiple use-cases."),Object(o.b)("p",null,"This schema can be used for building better, more automated tooling for working with relational databases in JS."),Object(o.b)("p",null,"Projects using relational-schema"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://mattgson.github.io/Gybson"}),"Gybson")," - an auto generated, typesafe, flexible query client for working with relational databases in typescript.")),Object(o.b)("h3",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"npm install relational-schema\n")),Object(o.b)("p",null,"Create a config file ",Object(o.b)("inlineCode",{parentName:"p"},"introspect-config.json")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "host": "127.0.0.1",\n  "port": 3306,\n  "user": "root",\n  "password": "secure",\n  "database": "mydb",\n  "outdir": "src/schemas",\n  "format": "json"\n}\n\n')),Object(o.b)("p",null,"relational-schema introspect"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'\nThe schema will be generated in `outdir` in the chosen format.\n\n```\n\n\n---\n\n### Key features:\n\n#### Full table definitions including:\n\n - columns (names, types, default values, nullability...)\n - keys and constraints\n - unique-ness\n - Typescript type mappings\n - table relations (including direction)\n - human readable relation alias\'\n - soft-delete idenfication\n - enums\n\n### Example output:\n\n```json\n{\n    "database": "tests",\n    "schema": "tests",\n    "generatedAt": "2021-04-21T08:41:31.747Z",\n    "tables": {\n        "teams": {\n            "primaryKey": {\n                "constraintName": "teams_pkey",\n                "constraintType": "PRIMARY KEY",\n                "columnNames": ["team_id"]\n            },\n            "keys": [{ "constraintName": "teams_pkey", "constraintType": "PRIMARY KEY", "columnNames": ["team_id"] }],\n            "uniqueKeyCombinations": [["team_id"]],\n            "nonUniqueKeyCombinations": [],\n            "relations": [\n                {\n                    "toTable": "team_members",\n                    "alias": "team_members",\n                    "joins": [{ "fromColumn": "team_id", "toColumn": "team_id" }],\n                    "type": "hasMany"\n                }\n            ],\n            "columns": {\n                "team_id": {\n                    "dbType": "int4",\n                    "columnDefault": "nextval(\'teams_team_id_seq\'::regclass)",\n                    "nullable": false,\n                    "columnName": "team_id",\n                    "tsType": "number"\n                },\n                "name": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "name",\n                    "tsType": "string"\n                },\n                "deleted": {\n                    "dbType": "bool",\n                    "columnDefault": "false",\n                    "nullable": true,\n                    "columnName": "deleted",\n                    "tsType": "boolean"\n                }\n            },\n            "softDelete": {\n                "dbType": "bool",\n                "columnDefault": "false",\n                "nullable": true,\n                "columnName": "deleted",\n                "tsType": "boolean"\n            },\n            "enums": {\n                "teams_subscription_level": {\n                    "enumName": "teams_subscription_level",\n                    "values": ["BRONZE", "GOLD", "SILVER"],\n                    "columnName": ""\n                },\n                "teams_permissions": { "enumName": "teams_permissions", "values": ["ADMIN", "USER"], "columnName": "" }\n            }\n        },\n        "team_members": {\n            "primaryKey": {\n                "constraintName": "team_members_pkey",\n                "constraintType": "PRIMARY KEY",\n                "columnNames": ["team_id", "user_id"]\n            },\n            "keys": [\n                {\n                    "constraintName": "team_members_member_post_id_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["member_post_id"]\n                },\n                {\n                    "constraintName": "team_members_pkey",\n                    "constraintType": "PRIMARY KEY",\n                    "columnNames": ["team_id", "user_id"]\n                },\n                {\n                    "constraintName": "team_members_team_id_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["team_id"]\n                },\n                {\n                    "constraintName": "team_members_user_id_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["user_id"]\n                }\n            ],\n            "uniqueKeyCombinations": [["team_id", "user_id"]],\n            "nonUniqueKeyCombinations": [\n                ["member_post_id"],\n                ["member_post_id", "team_id"],\n                ["member_post_id", "user_id"],\n                ["team_id"],\n                ["user_id"]\n            ],\n            "relations": [\n                {\n                    "toTable": "posts",\n                    "alias": "member_post",\n                    "joins": [{ "fromColumn": "member_post_id", "toColumn": "post_id" }],\n                    "type": "belongsTo"\n                },\n                {\n                    "toTable": "teams",\n                    "alias": "team",\n                    "joins": [{ "fromColumn": "team_id", "toColumn": "team_id" }],\n                    "type": "belongsTo"\n                },\n                {\n                    "toTable": "users",\n                    "alias": "user",\n                    "joins": [{ "fromColumn": "user_id", "toColumn": "user_id" }],\n                    "type": "belongsTo"\n                },\n                {\n                    "toTable": "team_members_positions",\n                    "alias": "team_members_position",\n                    "joins": [\n                        { "fromColumn": "team_id", "toColumn": "team_id" },\n                        { "fromColumn": "user_id", "toColumn": "user_id" }\n                    ],\n                    "type": "hasOne"\n                }\n            ],\n            "columns": {\n                "team_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "team_id",\n                    "tsType": "number"\n                },\n                "user_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "user_id",\n                    "tsType": "number"\n                },\n                "member_post_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "member_post_id",\n                    "tsType": "number"\n                },\n                "deleted": {\n                    "dbType": "bool",\n                    "columnDefault": "false",\n                    "nullable": true,\n                    "columnName": "deleted",\n                    "tsType": "boolean"\n                }\n            },\n            "softDelete": {\n                "dbType": "bool",\n                "columnDefault": "false",\n                "nullable": true,\n                "columnName": "deleted",\n                "tsType": "boolean"\n            },\n            "enums": {\n                "team_members_subscription_level": {\n                    "enumName": "team_members_subscription_level",\n                    "values": ["BRONZE", "GOLD", "SILVER"],\n                    "columnName": ""\n                },\n                "team_members_permissions": {\n                    "enumName": "team_members_permissions",\n                    "values": ["ADMIN", "USER"],\n                    "columnName": ""\n                }\n            }\n        },\n        "team_members_positions": {\n            "primaryKey": {\n                "constraintName": "team_members_positions_pkey",\n                "constraintType": "PRIMARY KEY",\n                "columnNames": ["team_id", "user_id"]\n            },\n            "keys": [\n                {\n                    "constraintName": "team_members_positions_position_manager_unique",\n                    "constraintType": "UNIQUE",\n                    "columnNames": ["manager", "position"]\n                },\n                {\n                    "constraintName": "team_members_positions_pkey",\n                    "constraintType": "PRIMARY KEY",\n                    "columnNames": ["team_id", "user_id"]\n                },\n                {\n                    "constraintName": "team_members_positions_team_id_user_id_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["team_id", "user_id"]\n                }\n            ],\n            "uniqueKeyCombinations": [\n                ["manager", "position"],\n                ["team_id", "user_id"]\n            ],\n            "nonUniqueKeyCombinations": [\n                ["manager"],\n                ["position"],\n                ["manager", "team_id"],\n                ["position", "team_id"],\n                ["manager", "user_id"],\n                ["position", "user_id"],\n                ["team_id"],\n                ["user_id"]\n            ],\n            "relations": [\n                {\n                    "toTable": "team_members",\n                    "alias": "team_member",\n                    "joins": [\n                        { "fromColumn": "team_id", "toColumn": "team_id" },\n                        { "fromColumn": "user_id", "toColumn": "user_id" }\n                    ],\n                    "type": "hasOne"\n                }\n            ],\n            "columns": {\n                "team_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "team_id",\n                    "tsType": "number"\n                },\n                "user_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "user_id",\n                    "tsType": "number"\n                },\n                "position": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "position",\n                    "tsType": "string"\n                },\n                "manager": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "manager",\n                    "tsType": "string"\n                },\n                "verified": {\n                    "dbType": "bool",\n                    "columnDefault": "false",\n                    "nullable": true,\n                    "columnName": "verified",\n                    "tsType": "boolean"\n                }\n            },\n            "softDelete": null,\n            "enums": {\n                "team_members_positions_subscription_level": {\n                    "enumName": "team_members_positions_subscription_level",\n                    "values": ["BRONZE", "GOLD", "SILVER"],\n                    "columnName": ""\n                },\n                "team_members_positions_permissions": {\n                    "enumName": "team_members_positions_permissions",\n                    "values": ["ADMIN", "USER"],\n                    "columnName": ""\n                }\n            }\n        },\n        "users": {\n            "primaryKey": {\n                "constraintName": "users_pkey",\n                "constraintType": "PRIMARY KEY",\n                "columnNames": ["user_id"]\n            },\n            "keys": [\n                {\n                    "constraintName": "users_best_friend_id_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["best_friend_id"]\n                },\n                { "constraintName": "users_email_unique", "constraintType": "UNIQUE", "columnNames": ["email"] },\n                { "constraintName": "users_token_unique", "constraintType": "UNIQUE", "columnNames": ["token"] },\n                { "constraintName": "users_pkey", "constraintType": "PRIMARY KEY", "columnNames": ["user_id"] }\n            ],\n            "uniqueKeyCombinations": [["email"], ["token"], ["user_id"]],\n            "nonUniqueKeyCombinations": [["best_friend_id"]],\n            "relations": [\n                {\n                    "toTable": "users",\n                    "alias": "best_friend",\n                    "joins": [{ "fromColumn": "best_friend_id", "toColumn": "user_id" }],\n                    "type": "belongsTo"\n                },\n                {\n                    "toTable": "posts",\n                    "alias": "author_posts",\n                    "joins": [{ "fromColumn": "user_id", "toColumn": "author_id" }],\n                    "type": "hasMany"\n                },\n                {\n                    "toTable": "posts",\n                    "alias": "co_author_posts",\n                    "joins": [{ "fromColumn": "user_id", "toColumn": "co_author" }],\n                    "type": "hasMany"\n                },\n                {\n                    "toTable": "team_members",\n                    "alias": "team_members",\n                    "joins": [{ "fromColumn": "user_id", "toColumn": "user_id" }],\n                    "type": "hasMany"\n                },\n                {\n                    "toTable": "users",\n                    "alias": "users",\n                    "joins": [{ "fromColumn": "user_id", "toColumn": "best_friend_id" }],\n                    "type": "hasMany"\n                }\n            ],\n            "columns": {\n                "user_id": {\n                    "dbType": "int4",\n                    "columnDefault": "nextval(\'users_user_id_seq\'::regclass)",\n                    "nullable": false,\n                    "columnName": "user_id",\n                    "tsType": "number"\n                },\n                "best_friend_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "best_friend_id",\n                    "tsType": "number"\n                },\n                "email": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "email",\n                    "tsType": "string"\n                },\n                "first_name": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "first_name",\n                    "tsType": "string"\n                },\n                "last_name": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "last_name",\n                    "tsType": "string"\n                },\n                "password": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "password",\n                    "tsType": "string"\n                },\n                "token": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "token",\n                    "tsType": "string"\n                },\n                "permissions": {\n                    "dbType": "permissions",\n                    "columnDefault": "\'USER\'::permissions",\n                    "nullable": true,\n                    "columnName": "permissions",\n                    "tsType": "users_permissions"\n                },\n                "subscription_level": {\n                    "dbType": "subscription_level",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "subscription_level",\n                    "tsType": "users_subscription_level"\n                },\n                "deleted_at": {\n                    "dbType": "timestamptz",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "deleted_at",\n                    "tsType": "Date"\n                }\n            },\n            "softDelete": {\n                "dbType": "timestamptz",\n                "columnDefault": null,\n                "nullable": true,\n                "columnName": "deleted_at",\n                "tsType": "Date"\n            },\n            "enums": {\n                "users_subscription_level": {\n                    "enumName": "users_subscription_level",\n                    "values": ["BRONZE", "GOLD", "SILVER"],\n                    "columnName": ""\n                },\n                "users_permissions": { "enumName": "users_permissions", "values": ["ADMIN", "USER"], "columnName": "" }\n            }\n        },\n        "posts": {\n            "primaryKey": {\n                "constraintName": "posts_pkey",\n                "constraintType": "PRIMARY KEY",\n                "columnNames": ["post_id"]\n            },\n            "keys": [\n                {\n                    "constraintName": "posts_author_id_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["author_id"]\n                },\n                {\n                    "constraintName": "posts_co_author_foreign",\n                    "constraintType": "FOREIGN KEY",\n                    "columnNames": ["co_author"]\n                },\n                { "constraintName": "posts_pkey", "constraintType": "PRIMARY KEY", "columnNames": ["post_id"] }\n            ],\n            "uniqueKeyCombinations": [["post_id"]],\n            "nonUniqueKeyCombinations": [["author_id"], ["author_id", "co_author"], ["co_author"]],\n            "relations": [\n                {\n                    "toTable": "users",\n                    "alias": "author_",\n                    "joins": [{ "fromColumn": "author_id", "toColumn": "user_id" }],\n                    "type": "belongsTo"\n                },\n                {\n                    "toTable": "users",\n                    "alias": "co_author_",\n                    "joins": [{ "fromColumn": "co_author", "toColumn": "user_id" }],\n                    "type": "belongsTo"\n                },\n                {\n                    "toTable": "team_members",\n                    "alias": "team_members",\n                    "joins": [{ "fromColumn": "post_id", "toColumn": "member_post_id" }],\n                    "type": "hasMany"\n                }\n            ],\n            "columns": {\n                "post_id": {\n                    "dbType": "int4",\n                    "columnDefault": "nextval(\'posts_post_id_seq\'::regclass)",\n                    "nullable": false,\n                    "columnName": "post_id",\n                    "tsType": "number"\n                },\n                "author": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "author",\n                    "tsType": "string"\n                },\n                "author_id": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "author_id",\n                    "tsType": "number"\n                },\n                "co_author": {\n                    "dbType": "int4",\n                    "columnDefault": null,\n                    "nullable": true,\n                    "columnName": "co_author",\n                    "tsType": "number"\n                },\n                "message": {\n                    "dbType": "varchar",\n                    "columnDefault": null,\n                    "nullable": false,\n                    "columnName": "message",\n                    "tsType": "string"\n                },\n                "rating_average": {\n                    "dbType": "float4",\n                    "columnDefault": "\'0\'::real",\n                    "nullable": true,\n                    "columnName": "rating_average",\n                    "tsType": "number"\n                },\n                "created": {\n                    "dbType": "timestamptz",\n                    "columnDefault": "CURRENT_TIMESTAMP",\n                    "nullable": true,\n                    "columnName": "created",\n                    "tsType": "Date"\n                },\n                "deleted": {\n                    "dbType": "bool",\n                    "columnDefault": "false",\n                    "nullable": true,\n                    "columnName": "deleted",\n                    "tsType": "boolean"\n                }\n            },\n            "softDelete": {\n                "dbType": "bool",\n                "columnDefault": "false",\n                "nullable": true,\n                "columnName": "deleted",\n                "tsType": "boolean"\n            },\n            "enums": {\n                "posts_subscription_level": {\n                    "enumName": "posts_subscription_level",\n                    "values": ["BRONZE", "GOLD", "SILVER"],\n                    "columnName": ""\n                },\n                "posts_permissions": { "enumName": "posts_permissions", "values": ["ADMIN", "USER"], "columnName": "" }\n            }\n        }\n    }\n}\n\n\n```\n')))}r.isMDXComponent=!0}}]);