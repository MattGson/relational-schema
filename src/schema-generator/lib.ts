import _ from 'lodash';
import fs from 'fs-extra';
import path from 'path';
import { prettier } from './config';
// @ts-ignore
import { format } from 'prettier';

/**
 * Write to a typescript file
 * @param content
 * @param directory
 * @param filename
 */
export async function writeTypescriptFile(content: string, directory: string, filename: string) {
    const fileHeader = `
         /* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */
        
        /* eslint-disable */
    `;

    const file = filename + '.ts';

    // append creates files if they don't exist - write overwrites contents
    await fs.appendFile(path.join(directory, file), '');
    await fs.writeFile(path.join(directory, file), format(fileHeader + content, { parser: 'typescript', ...prettier }));
}

/**
 * Write to a json file
 * @param content
 * @param directory
 * @param filename
 */
export async function writeJSFile(content: string, directory: string, filename: string) {
    const fileHeader = `
         /* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */
        
        /* eslint-disable */
    `;

    const file = filename + '.js';

    // append creates files if they don't exist - write overwrites contents
    await fs.appendFile(path.join(directory, file), '');
    await fs.writeFile(path.join(directory, file), format(fileHeader + content, { parser: 'javascript', ...prettier }));
}

/**
 * Write to a js file
 * @param content
 * @param directory
 * @param filename
 */
export async function writeJSONFile(content: Record<string, any>, directory: string, filename: string) {
    const file = filename + '.json';

    // append creates files if they don't exist - write overwrites contents
    await fs.appendFile(path.join(directory, file), '');
    await fs.writeFile(path.join(directory, file), format(JSON.stringify(content), { parser: 'json', ...prettier }));
}
